#!/usr/bin/python

import argparse
import os
import sys
import time
import traceback
import yaml

def get_sim_info(name):
    fname = name.split(' ')[1]
    if fname.rfind('/') < 0:
        raise ValueError ('ERROR: Unable to find bisection be cause of a lack of \'/\'')
    split_fname = fname.split('/')
    bisec = split_fname[0]
    simname = split_fname[-1]
    split_name = simname.split('.')

    if len(split_name) == 6:
        topo, hosts, model, res, ecmp, yaml = split_name
        fas = 'dfsssp'
    elif len(split_name) == 7:
        topo, hosts, model, res, ecmp, fas, yaml = split_name
        if fas != 'fas':
            raise ValueError ('Unexpected "fas"')
    else:
        raise ValueError ('Unexpected split_name length %d' % len(split_name))

    if yaml != 'yaml':
        raise ValueError ('Unexpected (non-)yaml')

    return topo, bisec, hosts, model, res, ecmp, fas

def parse_files_human(fnames, args):
    data = {}

    for fname in fnames:
        with open(fname) as f:
            lines = f.readlines()
            i = 0
            while i < len(lines):
                name = lines[i]
                output = lines[i+1]

                # No data
                if output == '\n':
                    i += 2
                    continue
                elif output.find('|vcs|:') < 0:
                    i += 3
                    continue
                else:
                    i += 3

                topo, bisec, hosts, model, res, ecmp, fas = get_sim_info(name)
                num_vcs = int(output.split(' ')[-1])

                if topo not in data:
                    data[topo] = {}
                if bisec not in data[topo]:
                    data[topo][bisec] = {}
                if hosts not in data[topo][bisec]:
                    data[topo][bisec][hosts] = {}
                if res not in data[topo][bisec][hosts]:
                    data[topo][bisec][hosts][res] = {}
                if ecmp not in data[topo][bisec][hosts][res]:
                    data[topo][bisec][hosts][res][ecmp] = {}
                if fas not in data[topo][bisec][hosts][res][ecmp]:
                    data[topo][bisec][hosts][res][ecmp][fas] = {}
                data[topo][bisec][hosts][res][ecmp][fas][model] = num_vcs

    print yaml.dump(data)

def parse_files(fnames, args):
    data = {}

    for fname in fnames:
        with open(fname) as f:
            lines = f.readlines()
            i = 0
            while i < len(lines):
                name = lines[i]
                output = lines[i+1]

                # No data
                if output == '\n':
                    i += 2
                    continue
                elif output.find('|vcs|:') < 0:
                    i += 3
                    continue
                else:
                    i += 3

                topo, bisec, hosts, model, res, ecmp, fas = get_sim_info(name)
                num_vcs = int(output.split(' ')[-1])

                table_name = '%s-%s-%s-%s' % (topo, bisec, model, fas)
                if table_name not in data:
                    data[table_name] = {}
                if res not in data[table_name]:
                    data[table_name][res] = {}
                if hosts not in data[table_name][res]:
                    data[table_name][res][hosts] = {}
                data[table_name][res][hosts][ecmp] = num_vcs

    table_names = data.keys()
    table_names.sort()
    for table_name in table_names:
        print 'Table:', table_name
        output_table(data[table_name])
        print

def output_table(tdata):
    ress = tdata.keys()
    ress.sort()
    ecmps = ['1e', '2e', '4e', '8e']
    hosts = list(set(reduce(lambda x, y: x + y, [tdata[res].keys() for res in ress])))
    hosts.sort(key=lambda x: int(x[:-1]))

    hstr = ' & ' + reduce(lambda x, y: x + ' & ' + y, hosts) + ' \\\\'
    print hstr
    hstr2 = ' & 1e/2e/4e/8e' * len(hosts) + ' \\\\ \\hline\\hline'
    print hstr2

    for res in ress:
        r = int(res[:-3])
        line = '%d-R' % r
        for host in hosts:
            line += ' & '
            if host in tdata[res]:
                estr = [tdata[res][host][ecmp] if ecmp in tdata[res][host] else '?' for ecmp in ecmps]
                estr = map(lambda x: str(x), estr)
                estr = reduce(lambda x, y: x + '/' + y, estr)
                line += estr
            else:
                line += '?/?/?/?'
        print line + ' \\\\ \\hline'
                

def main():
    # Create the parser and subparsers
    parser = argparse.ArgumentParser(
        description='Parse the output for DFR generated by "tail -n 1 B*/*.yaml > file".')

    # The files to parse
    parser.add_argument('files', nargs=1, \
        help='The output files')

    args = parser.parse_args()

    parse_files(args.files, args)

if __name__ == "__main__":
    main()
