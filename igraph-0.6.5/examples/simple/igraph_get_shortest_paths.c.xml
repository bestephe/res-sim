<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

int <emphasis role="strong">print_vector</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link> *v) {
  long int i, l=<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(v);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;l; i++) {
    <emphasis role="strong">printf</emphasis>(" %li", (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*v)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");
}

int <emphasis role="strong">check_evecs</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *graph, <emphasis role="strong">const</emphasis> igraph_vector_ptr_t *vecs,
		<emphasis role="strong">const</emphasis> igraph_vector_ptr_t *evecs, int error_code) {

  igraph_bool_t directed=<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(graph);
  long int i, n=<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(vecs);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(evecs) != n) { <emphasis role="strong">exit</emphasis>(error_code+1); }
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;n; i++) {
    <link linkend='igraph_vector_t'>igraph_vector_t</link> *vvec=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*vecs)[i];
    <link linkend='igraph_vector_t'>igraph_vector_t</link> *evec=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*evecs)[i];
    long int j, n2=<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(evec);
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(vvec) == 0 &amp;&amp; n2==0) { <emphasis role="strong">continue</emphasis>; }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(vvec) != n2+1) { <emphasis role="strong">exit</emphasis>(error_code+2); }
    <emphasis role="strong">for</emphasis> (j=0; j&lt;n2; j++) {
      long int edge=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*evec)[j];
      long int from=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*vvec)[j];
      long int to=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*vvec)[j+1];
      <emphasis role="strong">if</emphasis> (directed) {
	<emphasis role="strong">if</emphasis> (from != <emphasis role="strong">IGRAPH_FROM</emphasis>(graph, edge) ||
	    to   != <emphasis role="strong">IGRAPH_TO</emphasis>  (graph, edge)) {
	  <emphasis role="strong">exit</emphasis>(error_code);
	}
      } <emphasis role="strong">else</emphasis> {
	long int from2=<emphasis role="strong">IGRAPH_FROM</emphasis>(graph, edge);
	long int to2=<emphasis role="strong">IGRAPH_TO</emphasis>(graph, edge);
	long int min1= from &lt; to ? from : to;
	long int max1= from &lt; to ? to : from;
	long int min2= from2 &lt; to2 ? from2 : to2;
	long int max2= from2 &lt; to2 ? to2 : from2;
	<emphasis role="strong">if</emphasis> (min1 != min2 || max2 != max2) { <emphasis role="strong">exit</emphasis>(error_code+3); }
      }
    }
  }

  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {

  igraph_t g;
  igraph_vector_ptr_t vecs, evecs;
  long int i;
  igraph_vs_t vs;

  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;g, 10, IGRAPH_DIRECTED, 0, 1);
  
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;vecs, 5);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;evecs, 5);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(&amp;vecs); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vecs)[i] = <emphasis role="strong">calloc</emphasis>(1, <emphasis role="strong">sizeof</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link>));
    <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vecs)[i], 0);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(evecs)[i] = <emphasis role="strong">calloc</emphasis>(1, <emphasis role="strong">sizeof</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link>));
    <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(evecs)[i], 0);
  }
  <emphasis role="strong"><link linkend='igraph_vs_vector_small'>igraph_vs_vector_small</link></emphasis>(&amp;vs, 1, 3, 5, 2, 1,  -1);
  
  <emphasis role="strong"><link linkend='igraph_get_shortest_paths'>igraph_get_shortest_paths</link></emphasis>(&amp;g, &amp;vecs, &amp;evecs, 0, vs, IGRAPH_OUT);

  <emphasis role="strong">check_evecs</emphasis>(&amp;g, &amp;vecs, &amp;evecs, 10);
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(&amp;vecs); i++) {
    <emphasis role="strong">print_vector</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vecs)[i]);
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vecs)[i]);
    <emphasis role="strong">free</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vecs)[i]);
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(evecs)[i]);
    <emphasis role="strong">free</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(evecs)[i]);
  }
  <emphasis role="strong"><link linkend='igraph_vector_ptr_destroy'>igraph_vector_ptr_destroy</link></emphasis>(&amp;vecs);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_destroy'>igraph_vector_ptr_destroy</link></emphasis>(&amp;evecs);
  <emphasis role="strong"><link linkend='igraph_vs_destroy'>igraph_vs_destroy</link></emphasis>(&amp;vs);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">if</emphasis> (!IGRAPH_FINALLY_STACK_EMPTY) <emphasis role="strong">return</emphasis> 1;
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
