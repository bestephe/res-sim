<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">strvector_print</emphasis>(<emphasis role="strong">const</emphasis> igraph_strvector_t *sv) {
  long int i, s=<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(sv);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;s; i++) {
    <emphasis role="strong">printf</emphasis>("---%s---\n", <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(*sv, i));
  }
}

int <emphasis role="strong">main</emphasis>() {

  igraph_strvector_t sv1, sv2;
  char *str1, *str2;
  int i;

  <emphasis>/* igraph_strvector_init, igraph_strvector_destroy */</emphasis>
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;sv1, 10);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv1);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;sv1, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv1);

  <emphasis>/* igraph_strvector_get, igraph_strvector_set */</emphasis>
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;sv1, 5);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1); i++) {
    <emphasis role="strong"><link linkend='igraph_strvector_get'>igraph_strvector_get</link></emphasis>(&amp;sv1, i, &amp;str1);
    <emphasis role="strong">printf</emphasis>("---%s---\n", str1);
  }
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 0, "zero");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 1, "one");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 2, "two");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 3, "three");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 4, "four");
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1); i++) {
    <emphasis role="strong"><link linkend='igraph_strvector_get'>igraph_strvector_get</link></emphasis>(&amp;sv1, i, &amp;str1);
    <emphasis role="strong">printf</emphasis>("---%s---\n", str1);
  }

  <emphasis>/* igraph_strvector_remove_section, igraph_strvector_remove, </emphasis>
<emphasis>     igraph_strvector_resize, igraph_strvector_size */</emphasis>
  <emphasis role="strong">igraph_strvector_remove_section</emphasis>(&amp;sv1, 0, 5);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1) != 0) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 10);
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 0, "zero");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 1, "one");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 2, "two");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 3, "three");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 4, "four");
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 5);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1); i++) {
    <emphasis role="strong"><link linkend='igraph_strvector_get'>igraph_strvector_get</link></emphasis>(&amp;sv1, i, &amp;str1);
    <emphasis role="strong">printf</emphasis>("---%s---\n", str1);
  }
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1) != 0) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 10);
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 0, "zero");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 1, "one");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 2, "two");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 3, "three");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 4, "four");
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 5);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1); i++) {
    <emphasis role="strong"><link linkend='igraph_strvector_get'>igraph_strvector_get</link></emphasis>(&amp;sv1, i, &amp;str1);
    <emphasis role="strong">printf</emphasis>("---%s---\n", str1);
  }  

  <emphasis>/* igraph_strvector_move_interval */</emphasis>
  <emphasis role="strong">igraph_strvector_move_interval</emphasis>(&amp;sv1, 3, 5, 0);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1); i++) {
    <emphasis role="strong"><link linkend='igraph_strvector_get'>igraph_strvector_get</link></emphasis>(&amp;sv1, i, &amp;str1);
    <emphasis role="strong">printf</emphasis>("---%s---\n", str1);
  }

  <emphasis>/* igraph_strvector_copy */</emphasis>
  <emphasis role="strong"><link linkend='igraph_strvector_copy'>igraph_strvector_copy</link></emphasis>(&amp;sv2, &amp;sv1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv2); i++) {
    <emphasis role="strong"><link linkend='igraph_strvector_get'>igraph_strvector_get</link></emphasis>(&amp;sv2, i, &amp;str1);
    <emphasis role="strong">printf</emphasis>("---%s---\n", str1);
  }
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv2);
  <emphasis role="strong"><link linkend='igraph_strvector_copy'>igraph_strvector_copy</link></emphasis>(&amp;sv2, &amp;sv1);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv2) != 0) {
    <emphasis role="strong">return</emphasis> 2;
  }
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv2);

  <emphasis>/* igraph_strvector_add */</emphasis>
  <emphasis role="strong"><link linkend='igraph_strvector_add'>igraph_strvector_add</link></emphasis>(&amp;sv1, "zeroth");
  <emphasis role="strong"><link linkend='igraph_strvector_add'>igraph_strvector_add</link></emphasis>(&amp;sv1, "first");
  <emphasis role="strong"><link linkend='igraph_strvector_add'>igraph_strvector_add</link></emphasis>(&amp;sv1, "second");
  <emphasis role="strong"><link linkend='igraph_strvector_add'>igraph_strvector_add</link></emphasis>(&amp;sv1, "third");
  <emphasis role="strong"><link linkend='igraph_strvector_add'>igraph_strvector_add</link></emphasis>(&amp;sv1, "fourth");
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1); i++) {
    <emphasis role="strong"><link linkend='igraph_strvector_get'>igraph_strvector_get</link></emphasis>(&amp;sv1, i, &amp;str1);
    <emphasis role="strong">printf</emphasis>("---%s---\n", str1);
  }

  <emphasis>/* </emphasis><emphasis role="strong">TODO:</emphasis><emphasis> igraph_strvector_permdelete */</emphasis>
  <emphasis>/* </emphasis><emphasis role="strong">TODO:</emphasis><emphasis> igraph_strvector_remove_negidx */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv1);

  <emphasis>/* append */</emphasis>
  <emphasis role="strong">printf</emphasis>("---\n");
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;sv1, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;sv2, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_append'>igraph_strvector_append</link></emphasis>(&amp;sv1, &amp;sv2);
  <emphasis role="strong">strvector_print</emphasis>(&amp;sv1);
  <emphasis role="strong">printf</emphasis>("---\n");
  
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 3);
  <emphasis role="strong"><link linkend='igraph_strvector_append'>igraph_strvector_append</link></emphasis>(&amp;sv1, &amp;sv2);
  <emphasis role="strong">strvector_print</emphasis>(&amp;sv1);
  <emphasis role="strong">printf</emphasis>("---\n");   

  <emphasis role="strong"><link linkend='igraph_strvector_append'>igraph_strvector_append</link></emphasis>(&amp;sv2, &amp;sv1);
  <emphasis role="strong">strvector_print</emphasis>(&amp;sv2);
  <emphasis role="strong">printf</emphasis>("---\n");   
  
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 0, "0");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 1, "1");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 2, "2");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv2, 0, "3");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv2, 1, "4");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv2, 2, "5");
  <emphasis role="strong"><link linkend='igraph_strvector_append'>igraph_strvector_append</link></emphasis>(&amp;sv1, &amp;sv2);
  <emphasis role="strong">strvector_print</emphasis>(&amp;sv1);
  
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv1);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv2);
  
  <emphasis>/* clear */</emphasis>
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;sv1, 3);
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 0, "0");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 1, "1");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 2, "2");
  <emphasis role="strong"><link linkend='igraph_strvector_clear'>igraph_strvector_clear</link></emphasis>(&amp;sv1);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;sv1) != 0) {
    <emphasis role="strong">return</emphasis> 3;
  }
  <emphasis role="strong"><link linkend='igraph_strvector_resize'>igraph_strvector_resize</link></emphasis>(&amp;sv1, 4);
  <emphasis role="strong">strvector_print</emphasis>(&amp;sv1);
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 0, "one");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 2, "two");
  <emphasis role="strong">strvector_print</emphasis>(&amp;sv1);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv1);

  <emphasis>/* STR */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;sv1, 5);
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 0, "one");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 1, "two");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 2, "three");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 3, "four");
  <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;sv1, 4, "five");
  <emphasis role="strong">strvector_print</emphasis>(&amp;sv1);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;sv1);

  <emphasis role="strong">if</emphasis> (!IGRAPH_FINALLY_STACK_EMPTY) <emphasis role="strong">return</emphasis> 4;
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
