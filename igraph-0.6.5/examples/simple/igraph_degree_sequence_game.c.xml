<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> outdeg, indeg, vec;
  igraph_bool_t is_simple;

  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;outdeg, 10, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0);
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;indeg, 10, 4.0, 4.0, 2.0, 2.0, 4.0, 4.0, 2.0, 2.0, 3.0, 3.0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;vec, 0);

  <emphasis>/* checking the simple method, undirected graphs */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree_sequence_game'>igraph_degree_sequence_game</link></emphasis>(&amp;g, &amp;outdeg, 0, IGRAPH_DEGSEQ_SIMPLE);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g) || <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 10)
	<emphasis role="strong">return</emphasis> 1;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;vec, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, 1))
	<emphasis role="strong">return</emphasis> 2;
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;vec);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* checking the Viger-Latapy method, undirected graphs */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree_sequence_game'>igraph_degree_sequence_game</link></emphasis>(&amp;g, &amp;outdeg, 0, IGRAPH_DEGSEQ_VL);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g) || <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 10)
	<emphasis role="strong">return</emphasis> 3;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_simple'>igraph_is_simple</link></emphasis>(&amp;g, &amp;is_simple) || !is_simple)
	<emphasis role="strong">return</emphasis> 4;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;vec, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, 0))
	<emphasis role="strong">return</emphasis> 5;
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;vec);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* checking the simple method, directed graphs */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree_sequence_game'>igraph_degree_sequence_game</link></emphasis>(&amp;g, &amp;outdeg, &amp;indeg, IGRAPH_DEGSEQ_SIMPLE);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g) || <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 10)
	<emphasis role="strong">return</emphasis> 6;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;vec, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, 1))
	<emphasis role="strong">return</emphasis> 7;
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;vec);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;vec, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_IN, 1))
	<emphasis role="strong">return</emphasis> 8;
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;vec);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* checking the no multiple edges method, undirected graphs */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree_sequence_game'>igraph_degree_sequence_game</link></emphasis>(&amp;g, &amp;outdeg, 0, IGRAPH_DEGSEQ_SIMPLE_NO_MULTIPLE);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g) || <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 10)
	<emphasis role="strong">return</emphasis> 9;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_simple'>igraph_is_simple</link></emphasis>(&amp;g, &amp;is_simple) || !is_simple)
	<emphasis role="strong">return</emphasis> 10;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;vec, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, 1))
	<emphasis role="strong">return</emphasis> 11;
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;vec);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* checking the no multiple edges method, directed graphs */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree_sequence_game'>igraph_degree_sequence_game</link></emphasis>(&amp;g, &amp;outdeg, &amp;indeg, IGRAPH_DEGSEQ_SIMPLE_NO_MULTIPLE);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g) || <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 10)
	<emphasis role="strong">return</emphasis> 12;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_simple'>igraph_is_simple</link></emphasis>(&amp;g, &amp;is_simple) || !is_simple)
	<emphasis role="strong">return</emphasis> 13;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;vec, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, 1))
	<emphasis role="strong">return</emphasis> 14;
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;vec);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;vec, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_IN, 1))
	<emphasis role="strong">return</emphasis> 15;
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;vec);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;vec);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;outdeg);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;indeg);

  <emphasis role="strong">return</emphasis> 0;
}

</programlisting>
