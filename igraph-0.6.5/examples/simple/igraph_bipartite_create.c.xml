<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2008-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  igraph_real_t edges2[] = {0,1, 1,2, 3,4, 5,6, 6,5, 1,4, 1,6, 0,3 };
  igraph_real_t edges3[] = {0,1, 1,2, 3,4, 5,6, 6,5, 2,4, 1,6, 0,3 };
  igraph_t g;
  igraph_vector_bool_t types;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> edges;
  long int i;
  int ret;

  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;edges, edges2, <emphasis role="strong">sizeof</emphasis>(edges2)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong">igraph_vector_bool_init</emphasis>(&amp;types, <emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;edges)+1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_bool_size</emphasis>(&amp;types); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(types)[i] = i % 2;
  }
  <emphasis role="strong"><link linkend='igraph_create_bipartite'>igraph_create_bipartite</link></emphasis>(&amp;g, &amp;types, &amp;edges, <emphasis>/*directed=*/</emphasis> 1);
  <emphasis role="strong"><link linkend='igraph_write_graph_edgelist'>igraph_write_graph_edgelist</link></emphasis>(&amp;g, stdout);
  <emphasis role="strong">igraph_vector_bool_destroy</emphasis>(&amp;types);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Error handling */</emphasis>
  <emphasis role="strong"><link linkend='igraph_set_error_handler'>igraph_set_error_handler</link></emphasis>(<link linkend='igraph_error_handler_ignore'>igraph_error_handler_ignore</link>);
  
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;edges, edges3, <emphasis role="strong">sizeof</emphasis>(edges3)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong">igraph_vector_bool_init</emphasis>(&amp;types, <emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;edges)+1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_bool_size</emphasis>(&amp;types); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(types)[i] = i % 2;
  }
  ret = <emphasis role="strong"><link linkend='igraph_create_bipartite'>igraph_create_bipartite</link></emphasis>(&amp;g, &amp;types, &amp;edges, <emphasis>/*directed=*/</emphasis> 1);
  <emphasis role="strong">if</emphasis> (ret != IGRAPH_EINVAL) { <emphasis role="strong">return</emphasis> 1; }
  <emphasis role="strong">igraph_vector_bool_destroy</emphasis>(&amp;types);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">return</emphasis> 0;
}
  
  

    
</programlisting>
