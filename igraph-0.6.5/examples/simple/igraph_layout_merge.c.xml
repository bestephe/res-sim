<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_types_internal.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;
<emphasis role="strong">#include</emphasis> &lt;time.h&gt;

int <emphasis role="strong">igraph_i_layout_merge_dla</emphasis>(igraph_i_layout_mergegrid_t *grid, 
			      long int actg, igraph_real_t *x, igraph_real_t *y, igraph_real_t r,
			      igraph_real_t cx, igraph_real_t cy, igraph_real_t startr, 
			      igraph_real_t killr);

int <emphasis role="strong">main</emphasis>() {
  
  <emphasis>/*******************/</emphasis>
  <emphasis>/* Testing the DLA */</emphasis>
  <emphasis>/*******************/</emphasis>
  long int nodes=10;
  igraph_i_layout_mergegrid_t grid;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> x, y, r;
  long int i;

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42);
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;x, nodes);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;y, nodes);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;r, nodes);  
  <emphasis role="strong">igraph_i_layout_mergegrid_init</emphasis>(&amp;grid, -5, 5, 100, -5, 5, 100);

  <emphasis>/* radius */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;nodes; i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(r)[i]=<emphasis role="strong">rand</emphasis>()/(double)RAND_MAX;
  }
  <emphasis role="strong"><link linkend='igraph_vector_sort'>igraph_vector_sort</link></emphasis>(&amp;r);

  <emphasis>/* place */</emphasis>
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(x)[0]=0;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(y)[0]=0;
  <emphasis role="strong">igraph_i_layout_merge_place_sphere</emphasis>(&amp;grid, 0, 0, <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(r)[nodes-1], 0);

  <emphasis role="strong">for</emphasis> (i=1; i&lt;nodes; i++) {
<emphasis>/*     fprintf(stderr, "%li ", i); */</emphasis>
    <emphasis role="strong">igraph_i_layout_merge_dla</emphasis>(&amp;grid, i, 
			      <emphasis role="strong"><link linkend='igraph_vector_e_ptr'>igraph_vector_e_ptr</link></emphasis>(&amp;x, i),
			      <emphasis role="strong"><link linkend='igraph_vector_e_ptr'>igraph_vector_e_ptr</link></emphasis>(&amp;y, i),
			      <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(r)[nodes-i-1], 0, 0, 4, 7);
    <emphasis role="strong">igraph_i_layout_merge_place_sphere</emphasis>(&amp;grid, <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(x)[i], <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(y)[i], 
				       <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(r)[nodes-i-1], i);
  }

<emphasis>/*   for (i=0; i&lt;nodes; i++) {  */</emphasis>
<emphasis>/*     printf("%f %f\n", VECTOR(x)[i], VECTOR(y)[i]); */</emphasis>
<emphasis>/*   } */</emphasis>

<emphasis>/*   print_grid(&amp;grid, stdout); */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;x);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;y);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;r);
  <emphasis role="strong">igraph_i_layout_mergegrid_destroy</emphasis>(&amp;grid);
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
