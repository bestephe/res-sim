<programlisting linenumbering="numbered">
<emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_psumtree.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

int <emphasis role="strong">print_vector</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link> *v) {
  long int i, n=<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(v);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;n; i++) {
    <emphasis role="strong">printf</emphasis>("%li ", (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*v)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {
  igraph_psumtree_t tree;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> vec;
  long int i;
  igraph_real_t sum;

  <emphasis>/* Uniform random numbers */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;vec, 16);
  <emphasis role="strong">igraph_psumtree_init</emphasis>(&amp;tree, 16);
  sum=<emphasis role="strong">igraph_psumtree_sum</emphasis>(&amp;tree);
  <emphasis role="strong">if</emphasis> (sum != 0) {
    <emphasis role="strong">printf</emphasis>("Sum: %f instead of 0.\n", sum);
    <emphasis role="strong">return</emphasis> 1;
  }

  <emphasis role="strong">for</emphasis> (i=0; i&lt;16; i++) {
    <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, i, 1);
  }
  <emphasis role="strong">if</emphasis> ((sum=<emphasis role="strong">igraph_psumtree_sum</emphasis>(&amp;tree)) != 16) {
    <emphasis role="strong">printf</emphasis>("Sum: %f instead of 16.\n", sum);
    <emphasis role="strong">return</emphasis> 2;
  }
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;16000; i++) {
    igraph_real_t r=((double)<emphasis role="strong">rand</emphasis>())/RAND_MAX * sum;
    long int idx;
    <emphasis role="strong">igraph_psumtree_search</emphasis>(&amp;tree, &amp;idx, r);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[idx] += 1;
  }  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;16; i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &lt; 800 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &gt; 1200) {
      <emphasis role="strong">return</emphasis> 3;
    }
  }

  <emphasis>/* Nonuniform, even indices have twice as much chance */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;16; i+=2) {
    <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, i, 2);
  }
  <emphasis role="strong">if</emphasis> ((sum=<emphasis role="strong">igraph_psumtree_sum</emphasis>(&amp;tree)) != 24) {
    <emphasis role="strong">printf</emphasis>("Sum: %f instead of 24.\n", sum);
    <emphasis role="strong">return</emphasis> 4;
  }
  
  <emphasis role="strong"><link linkend='igraph_vector_null'>igraph_vector_null</link></emphasis>(&amp;vec);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;24000; i++) {
    igraph_real_t r=((double)<emphasis role="strong">rand</emphasis>())/RAND_MAX * sum;
    long int idx;
    <emphasis role="strong">igraph_psumtree_search</emphasis>(&amp;tree, &amp;idx, r);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[idx] += 1;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;16; i++) {
    <emphasis role="strong">if</emphasis> (i%2 == 0 &amp;&amp; (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &lt; 1800 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &gt; 2200)) {
      <emphasis role="strong">return</emphasis> 5;
    }
    <emphasis role="strong">if</emphasis> (i%2 != 0 &amp;&amp; (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &lt; 800 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &gt; 1200)) {
      <emphasis role="strong">return</emphasis> 6;
    }
  }
  
  <emphasis>/* Test zero probabilities */</emphasis>
  <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, 0, 0);
  <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, 5, 0);
  <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, 15, 0);
  sum=<emphasis role="strong">igraph_psumtree_sum</emphasis>(&amp;tree);
  
  <emphasis role="strong"><link linkend='igraph_vector_null'>igraph_vector_null</link></emphasis>(&amp;vec);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;20000; i++) {
    igraph_real_t r=((double)<emphasis role="strong">rand</emphasis>())/RAND_MAX * sum;
    long int idx;
    <emphasis role="strong">igraph_psumtree_search</emphasis>(&amp;tree, &amp;idx, r);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[idx] += 1;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[0] != 0 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[5] != 0 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[15] != 0) {
    <emphasis role="strong">return</emphasis> 7;
  }

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;vec);
  <emphasis role="strong">igraph_psumtree_destroy</emphasis>(&amp;tree);

  <emphasis>/****************************************************/</emphasis>
  <emphasis>/* Non power-of-two vector size                     */</emphasis>
  <emphasis>/****************************************************/</emphasis>

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;vec, 9);
  <emphasis role="strong">igraph_psumtree_init</emphasis>(&amp;tree, 9);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;9; i++) {
    <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, i, 1);
  }
  sum=<emphasis role="strong">igraph_psumtree_sum</emphasis>(&amp;tree);
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;9000; i++) {
    igraph_real_t r=((double)<emphasis role="strong">rand</emphasis>())/RAND_MAX * sum;
    long int idx;
    <emphasis role="strong">igraph_psumtree_search</emphasis>(&amp;tree, &amp;idx, r);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[idx] += 1;
  }  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;9; i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &lt; 800 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &gt; 1200) {
      <emphasis role="strong">return</emphasis> 8;
    }
  }

  <emphasis>/* Nonuniform, even indices have twice as much chance */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;9; i+=2) {
    <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, i, 2);
  }
  sum=<emphasis role="strong">igraph_psumtree_sum</emphasis>(&amp;tree);
  
  <emphasis role="strong"><link linkend='igraph_vector_null'>igraph_vector_null</link></emphasis>(&amp;vec);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;14000; i++) {
    igraph_real_t r=((double)<emphasis role="strong">rand</emphasis>())/RAND_MAX * sum;
    long int idx;
    <emphasis role="strong">igraph_psumtree_search</emphasis>(&amp;tree, &amp;idx, r);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[idx] += 1;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;9; i++) {
    <emphasis role="strong">if</emphasis> (i%2 == 0 &amp;&amp; (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &lt; 1800 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &gt; 2200)) {
      <emphasis role="strong">return</emphasis> 9;
    }
    <emphasis role="strong">if</emphasis> (i%2 != 0 &amp;&amp; (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &lt; 800 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &gt; 1200)) {
      <emphasis role="strong">return</emphasis> 10;
    }
  }

  <emphasis>/* Test query */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_psumtree_size</emphasis>(&amp;tree); i++) {
    <emphasis role="strong">if</emphasis> (i%2==0 &amp;&amp; <emphasis role="strong">igraph_psumtree_get</emphasis>(&amp;tree, i) != 2) {
      <emphasis role="strong">return</emphasis> 11;
    }
    <emphasis role="strong">if</emphasis> (i%2!=0 &amp;&amp; <emphasis role="strong">igraph_psumtree_get</emphasis>(&amp;tree, i) != 1) {
      <emphasis role="strong">return</emphasis> 12;
    }
  }
  
  <emphasis>/* Test zero probabilities */</emphasis>
  <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, 0, 0);
  <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, 5, 0);
  <emphasis role="strong">igraph_psumtree_update</emphasis>(&amp;tree, 8, 0);
  sum=<emphasis role="strong">igraph_psumtree_sum</emphasis>(&amp;tree);
  
  <emphasis role="strong"><link linkend='igraph_vector_null'>igraph_vector_null</link></emphasis>(&amp;vec);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;9000; i++) {
    igraph_real_t r=((double)<emphasis role="strong">rand</emphasis>())/RAND_MAX * sum;
    long int idx;
    <emphasis role="strong">igraph_psumtree_search</emphasis>(&amp;tree, &amp;idx, r);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[idx] += 1;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[0] != 0 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[5] != 0 || <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[8] != 0) {
    <emphasis role="strong">return</emphasis> 11;
  }

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;vec);
  <emphasis role="strong">igraph_psumtree_destroy</emphasis>(&amp;tree);

  <emphasis role="strong">if</emphasis> (!IGRAPH_FINALLY_STACK_EMPTY) <emphasis role="strong">return</emphasis> 13;
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
