<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2009-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_sparsemat.h&gt;

<emphasis role="strong">#define</emphasis> EPS 1e-13


<emphasis>/* Generic test for 1x1 matrices */</emphasis>
void <emphasis role="strong">test_1x1</emphasis>(igraph_real_t value) {
  igraph_sparsemat_t A, B;
  igraph_matrix_t values, vectors;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> values2;
  <link linkend='igraph_arpack_options_t'>igraph_arpack_options_t</link> options;

  <emphasis role="strong"><link linkend='igraph_arpack_options_init'>igraph_arpack_options_init</link></emphasis>(&amp;options);

  <emphasis role="strong"><link linkend='igraph_sparsemat_init'>igraph_sparsemat_init</link></emphasis>(&amp;A, 1, 1, 1);
  <emphasis role="strong"><link linkend='igraph_sparsemat_entry'>igraph_sparsemat_entry</link></emphasis>(&amp;A, 0, 0, value);
  <emphasis role="strong"><link linkend='igraph_sparsemat_compress'>igraph_sparsemat_compress</link></emphasis>(&amp;A, &amp;B);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;A);

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;values, 0, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
  options.mode=1;  
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rnsolve'>igraph_sparsemat_arpack_rnsolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, &amp;vectors);
  <emphasis role="strong">printf</emphasis>("rnsolve:\n  - eigenvalues:\n    "); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;values);
  <emphasis role="strong">printf</emphasis>("  - eigenvectors:\n    "); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;values);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values2, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
  options.mode=1;  
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values2, &amp;vectors, IGRAPH_SPARSEMAT_SOLVE_LU);
  <emphasis role="strong">printf</emphasis>("rssolve:\n  - eigenvalues:\n    "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values2);
  <emphasis role="strong">printf</emphasis>("  - eigenvectors:\n    "); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values2);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);

  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;B);
}

<emphasis>/* Generic test for 2x2 matrices */</emphasis>
void <emphasis role="strong">test_2x2</emphasis>(igraph_real_t a, igraph_real_t b, igraph_real_t c, igraph_real_t d) {
  igraph_sparsemat_t A, B;
  igraph_matrix_t values, vectors;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> values2;
  <link linkend='igraph_arpack_options_t'>igraph_arpack_options_t</link> options;

  <emphasis role="strong"><link linkend='igraph_arpack_options_init'>igraph_arpack_options_init</link></emphasis>(&amp;options);
  options.mode=1; options.nev=2;

  <emphasis role="strong"><link linkend='igraph_sparsemat_init'>igraph_sparsemat_init</link></emphasis>(&amp;A, 2, 2, 4);
  <emphasis role="strong"><link linkend='igraph_sparsemat_entry'>igraph_sparsemat_entry</link></emphasis>(&amp;A, 0, 0, a);
  <emphasis role="strong"><link linkend='igraph_sparsemat_entry'>igraph_sparsemat_entry</link></emphasis>(&amp;A, 0, 1, b);
  <emphasis role="strong"><link linkend='igraph_sparsemat_entry'>igraph_sparsemat_entry</link></emphasis>(&amp;A, 1, 0, c);
  <emphasis role="strong"><link linkend='igraph_sparsemat_entry'>igraph_sparsemat_entry</link></emphasis>(&amp;A, 1, 1, d);
  <emphasis role="strong"><link linkend='igraph_sparsemat_compress'>igraph_sparsemat_compress</link></emphasis>(&amp;A, &amp;B);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;A);

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;values, 0, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rnsolve'>igraph_sparsemat_arpack_rnsolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, &amp;vectors);
  <emphasis role="strong">printf</emphasis>("rnsolve:\n  - eigenvalues:\n    "); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;values);
  <emphasis role="strong">printf</emphasis>("  - eigenvectors:\n    "); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;values);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);

  <emphasis role="strong">if</emphasis> (b == c) {
    <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values2, 0);
    <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
    <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
            &amp;values2, &amp;vectors, IGRAPH_SPARSEMAT_SOLVE_QR);
    <emphasis role="strong">printf</emphasis>("rssolve:\n  - eigenvalues:\n    "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values2);
    <emphasis role="strong">printf</emphasis>("  - eigenvectors:\n    "); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values2);
    <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);
  }

  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;B);
}

int <emphasis role="strong">main</emphasis>() {

  igraph_sparsemat_t A, B;
  igraph_matrix_t vectors, values2;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> values;
  long int i;
  <link linkend='igraph_arpack_options_t'>igraph_arpack_options_t</link> options;
  igraph_real_t min, max;
  igraph_t g1, g2, g3;

  <emphasis>/***********************************************************************/</emphasis>

  <emphasis>/* Identity matrix */</emphasis>
<emphasis role="strong">#define</emphasis> DIM 10
  <emphasis role="strong"><link linkend='igraph_sparsemat_init'>igraph_sparsemat_init</link></emphasis>(&amp;A, DIM, DIM, DIM);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong"><link linkend='igraph_sparsemat_entry'>igraph_sparsemat_entry</link></emphasis>(&amp;A, i, i, 1.0);
  }
  <emphasis role="strong"><link linkend='igraph_sparsemat_compress'>igraph_sparsemat_compress</link></emphasis>(&amp;A, &amp;B);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;A);

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values, 0);
  <emphasis role="strong"><link linkend='igraph_arpack_options_init'>igraph_arpack_options_init</link></emphasis>(&amp;options);

  options.mode=1;
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0, 
				  &amp;values, <emphasis>/*vectors=*/</emphasis> 0, <emphasis>/*solvemethod=*/</emphasis>0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0] != 1.0) { <emphasis role="strong">return</emphasis> 1; }

  options.mode=3;
  options.sigma=2;
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0, 
				  &amp;values, <emphasis>/*vectors=*/</emphasis> 0,
				  IGRAPH_SPARSEMAT_SOLVE_LU);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0] != 1.0) { <emphasis role="strong">return</emphasis> 21; }
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0, 
				  &amp;values, <emphasis>/*vectors=*/</emphasis> 0,
				  IGRAPH_SPARSEMAT_SOLVE_QR);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0] != 1.0) { <emphasis role="strong">return</emphasis> 31; }

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;B);  

<emphasis role="strong">#undef</emphasis> DIM

  <emphasis>/***********************************************************************/</emphasis>

  <emphasis>/* Diagonal matrix */</emphasis>
<emphasis role="strong">#define</emphasis> DIM 10
  <emphasis role="strong"><link linkend='igraph_sparsemat_init'>igraph_sparsemat_init</link></emphasis>(&amp;A, DIM, DIM, DIM);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong"><link linkend='igraph_sparsemat_entry'>igraph_sparsemat_entry</link></emphasis>(&amp;A, i, i, i+1.0);
  }
  <emphasis role="strong"><link linkend='igraph_sparsemat_compress'>igraph_sparsemat_compress</link></emphasis>(&amp;A, &amp;B);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;A);
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
  
  options.mode=1;
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, <emphasis>/*vectors=*/</emphasis> &amp;vectors, 
				  <emphasis>/*solvemethod=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> ( <emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0] - DIM) &gt; EPS ) {
    <emphasis role="strong">printf</emphasis>("VECTOR(values)[0] numerical precision is only %g, should be %g",
			<emphasis role="strong">fabs</emphasis>((double)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0]-DIM), EPS);
	<emphasis role="strong">return</emphasis> 2;
  }

  <emphasis role="strong">if</emphasis> ( <emphasis role="strong">fabs</emphasis>(<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, DIM-1, 0)) - 1.0) &gt; EPS) { <emphasis role="strong">return</emphasis> 3; }
  <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, DIM-1, 0) = 0.0;
  <emphasis role="strong"><link linkend='igraph_matrix_minmax'>igraph_matrix_minmax</link></emphasis>(&amp;vectors, &amp;min, &amp;max);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(min) &gt; EPS) { <emphasis role="strong">return</emphasis> 3; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(max) &gt; EPS) { <emphasis role="strong">return</emphasis> 3; }

  options.mode=3;
  options.sigma=11;
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, <emphasis>/*vectors=*/</emphasis> &amp;vectors,
				  IGRAPH_SPARSEMAT_SOLVE_LU);
  <emphasis role="strong">if</emphasis> ( <emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0] - DIM) &gt; EPS ) {
    <emphasis role="strong">printf</emphasis>("VECTOR(values)[0] numerical precision is only %g, should be %g",
			<emphasis role="strong">fabs</emphasis>((double)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0]-DIM), EPS);
	<emphasis role="strong">return</emphasis> 22;
  }
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, <emphasis>/*vectors=*/</emphasis> &amp;vectors,
				  IGRAPH_SPARSEMAT_SOLVE_QR);
  <emphasis role="strong">if</emphasis> ( <emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0] - DIM) &gt; EPS ) {
    <emphasis role="strong">printf</emphasis>("VECTOR(values)[0] numerical precision is only %g, should be %g",
			<emphasis role="strong">fabs</emphasis>((double)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0]-DIM), EPS);
    <emphasis role="strong">return</emphasis> 32;
  }

  <emphasis role="strong">if</emphasis> ( <emphasis role="strong">fabs</emphasis>(<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, DIM-1, 0)) - 1.0) &gt; EPS) { <emphasis role="strong">return</emphasis> 23; }
  <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, DIM-1, 0) = 0.0;
  <emphasis role="strong"><link linkend='igraph_matrix_minmax'>igraph_matrix_minmax</link></emphasis>(&amp;vectors, &amp;min, &amp;max);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(min) &gt; EPS) { <emphasis role="strong">return</emphasis> 23; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(max) &gt; EPS) { <emphasis role="strong">return</emphasis> 23; }
  
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;B);
<emphasis role="strong">#undef</emphasis> DIM

  <emphasis>/***********************************************************************/</emphasis>

  <emphasis>/* A tree, plus a ring */</emphasis>
<emphasis role="strong">#define</emphasis> DIM 10
  <emphasis role="strong"><link linkend='igraph_tree'>igraph_tree</link></emphasis>(&amp;g1, DIM, <emphasis>/*children=*/</emphasis> 2, IGRAPH_TREE_UNDIRECTED);
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;g2, DIM, IGRAPH_UNDIRECTED, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis> 1);
  <emphasis role="strong"><link linkend='igraph_union'>igraph_union</link></emphasis>(&amp;g3, &amp;g1, &amp;g2);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g1);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g2);

  <emphasis role="strong"><link linkend='igraph_get_sparsemat'>igraph_get_sparsemat</link></emphasis>(&amp;g3, &amp;A);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g3);
  <emphasis role="strong"><link linkend='igraph_sparsemat_compress'>igraph_sparsemat_compress</link></emphasis>(&amp;A, &amp;B);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;A);
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
  
  options.mode=1;
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, &amp;vectors, <emphasis>/*solvemethod=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, 0, 0) &lt; 0.0) { 
    <emphasis role="strong"><link linkend='igraph_matrix_scale'>igraph_matrix_scale</link></emphasis>(&amp;vectors, -1.0);
  }
  
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values);
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);

  options.mode=3;
  options.sigma=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[0] * 1.1;
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, &amp;vectors, 
				  IGRAPH_SPARSEMAT_SOLVE_LU);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, 0, 0) &lt; 0.0) { 
    <emphasis role="strong"><link linkend='igraph_matrix_scale'>igraph_matrix_scale</link></emphasis>(&amp;vectors, -1.0);
  }  
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values);
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);

  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rssolve'>igraph_sparsemat_arpack_rssolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values, &amp;vectors, 
				  IGRAPH_SPARSEMAT_SOLVE_QR);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, 0, 0) &lt; 0.0) { 
    <emphasis role="strong"><link linkend='igraph_matrix_scale'>igraph_matrix_scale</link></emphasis>(&amp;vectors, -1.0);
  }  
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values);
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;B);
<emphasis role="strong">#undef</emphasis> DIM

  <emphasis role="strong">printf</emphasis>("--\n");

  <emphasis>/***********************************************************************/</emphasis>

  <emphasis>/* A directed tree and a directed, mutual ring */</emphasis>
<emphasis role="strong">#define</emphasis> DIM 10
  <emphasis role="strong"><link linkend='igraph_tree'>igraph_tree</link></emphasis>(&amp;g1, DIM, <emphasis>/*children=*/</emphasis> 2, IGRAPH_TREE_OUT);
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;g2, DIM, IGRAPH_DIRECTED, <emphasis>/*mutual=*/</emphasis> 1, <emphasis>/*circular=*/</emphasis> 1);
  <emphasis role="strong"><link linkend='igraph_union'>igraph_union</link></emphasis>(&amp;g3, &amp;g1, &amp;g2);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g1);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g2);

  <emphasis role="strong"><link linkend='igraph_get_sparsemat'>igraph_get_sparsemat</link></emphasis>(&amp;g3, &amp;A);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g3);
  <emphasis role="strong"><link linkend='igraph_sparsemat_compress'>igraph_sparsemat_compress</link></emphasis>(&amp;A, &amp;B);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;A);
  
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;values2, 0, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
  
  options.mode=1;
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rnsolve'>igraph_sparsemat_arpack_rnsolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values2, &amp;vectors);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, 0, 0) &lt; 0.0) { 
    <emphasis role="strong"><link linkend='igraph_matrix_scale'>igraph_matrix_scale</link></emphasis>(&amp;vectors, -1.0);
  }
  
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;values2);
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;values2);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;B);
<emphasis role="strong">#undef</emphasis> DIM

  <emphasis>/***********************************************************************/</emphasis>

  <emphasis>/* A small test graph */</emphasis>

  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g1, 11, IGRAPH_DIRECTED,
	       0, 1, 1, 3, 1, 8, 2, 10, 3, 6, 3, 10, 4, 2, 5, 4, 
	       6, 1, 6, 4, 7, 9, 8, 5, 8, 7, 9, 8, 10, 0,
	       -1);

  <emphasis role="strong"><link linkend='igraph_get_sparsemat'>igraph_get_sparsemat</link></emphasis>(&amp;g1, &amp;A);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g1);
  <emphasis role="strong"><link linkend='igraph_sparsemat_compress'>igraph_sparsemat_compress</link></emphasis>(&amp;A, &amp;B);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;A);
  
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;values2, 0, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);

  options.mode=1;  
  <emphasis role="strong"><link linkend='igraph_sparsemat_arpack_rnsolve'>igraph_sparsemat_arpack_rnsolve</link></emphasis>(&amp;B, &amp;options, <emphasis>/*storage=*/</emphasis> 0,
				  &amp;values2, &amp;vectors);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, 0, 0) &lt; 0.0) { 
    <emphasis role="strong"><link linkend='igraph_matrix_scale'>igraph_matrix_scale</link></emphasis>(&amp;vectors, -1.0);
  }
  
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;values2);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;B);

  <emphasis>/***********************************************************************/</emphasis>

  <emphasis>/* Testing the special case solver for 1x1 matrices */</emphasis>
  <emphasis role="strong">printf</emphasis>("--\n");
  <emphasis role="strong">test_1x1</emphasis>(2);
  <emphasis role="strong">test_1x1</emphasis>(0);
  <emphasis role="strong">test_1x1</emphasis>(-3);

  <emphasis>/***********************************************************************/</emphasis>

  <emphasis>/* Testing the special case solver for 2x2 matrices */</emphasis>
  <emphasis role="strong">printf</emphasis>("--\n");
  <emphasis role="strong">test_2x2</emphasis>(1, 2, 2, 4);      <emphasis>/* symmetric */</emphasis>
  <emphasis role="strong">test_2x2</emphasis>(1, 2, 3, 4);      <emphasis>/* non-symmetric, real eigenvalues */</emphasis>
  <emphasis role="strong">test_2x2</emphasis>(1, -5, 10, 4);    <emphasis>/* non-symmetric, complex eigenvalues */</emphasis>
  <emphasis role="strong">test_2x2</emphasis>(0, 0, 0, 0);      <emphasis>/* symmetric, pathological */</emphasis>

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
