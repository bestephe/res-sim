<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2008-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_types_internal.h&gt;
<emphasis role="strong">#include</emphasis> &lt;time.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  <link linkend='igraph_vector_t'>igraph_vector_t</link> elems;
  igraph_2wheap_t Q;
  long int i;
  igraph_real_t prev=IGRAPH_INFINITY;

  <emphasis role="strong">srand</emphasis>(<emphasis role="strong">time</emphasis>(0));
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;elems, 100);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[i] = <emphasis role="strong">rand</emphasis>()/(double)RAND_MAX;
  }
 
  <emphasis role="strong">igraph_2wheap_init</emphasis>(&amp;Q, <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems));
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    <emphasis role="strong">igraph_2wheap_push_with_index</emphasis>(&amp;Q, i, <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[i]);
  }

  <emphasis>/*****/</emphasis>

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[i] != <emphasis role="strong">igraph_2wheap_get</emphasis>(&amp;Q, i)) { <emphasis role="strong">return</emphasis> 1; }
  }

  <emphasis>/*****/</emphasis>
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    long int j;
    igraph_real_t tmp=<emphasis role="strong">igraph_2wheap_max</emphasis>(&amp;Q);
    <emphasis role="strong">if</emphasis> (tmp &gt; prev) { <emphasis role="strong">return</emphasis> 2; }
    <emphasis role="strong">if</emphasis> (tmp != <emphasis role="strong">igraph_2wheap_delete_max_index</emphasis>(&amp;Q, &amp;j)) { <emphasis role="strong">return</emphasis> 3; }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[j] != tmp) { <emphasis role="strong">return</emphasis> 4; }
    prev=tmp;
  }

  <emphasis>/*****/</emphasis>

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    <emphasis role="strong">igraph_2wheap_push_with_index</emphasis>(&amp;Q, i, <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[i]);
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_2wheap_size</emphasis>(&amp;Q) != <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems)) { <emphasis role="strong">return</emphasis> 5; }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[i] = <emphasis role="strong">rand</emphasis>()/(double)RAND_MAX;
    <emphasis role="strong">igraph_2wheap_modify</emphasis>(&amp;Q, i, <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[i]);
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[i] != <emphasis role="strong">igraph_2wheap_get</emphasis>(&amp;Q, i)) { <emphasis role="strong">return</emphasis> 6; }
  }
  prev=IGRAPH_INFINITY;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;elems); i++) {
    long int j;
    igraph_real_t tmp=<emphasis role="strong">igraph_2wheap_max</emphasis>(&amp;Q);
    <emphasis role="strong">if</emphasis> (tmp &gt; prev) { <emphasis role="strong">return</emphasis> 7; }
    <emphasis role="strong">if</emphasis> (tmp != <emphasis role="strong">igraph_2wheap_delete_max_index</emphasis>(&amp;Q, &amp;j)) { <emphasis role="strong">return</emphasis> 8; }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(elems)[j] != tmp) { <emphasis role="strong">return</emphasis> 9; }
    prev=tmp;
  }
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_2wheap_empty</emphasis>(&amp;Q)) { <emphasis role="strong">return</emphasis> 10; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_2wheap_size</emphasis>(&amp;Q) != 0) { <emphasis role="strong">return</emphasis> 11; }
  
  <emphasis role="strong">igraph_2wheap_destroy</emphasis>(&amp;Q);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;elems);

  <emphasis>/* Hand-made example */</emphasis>
    
<emphasis role="strong">#define</emphasis> MAX       <emphasis role="strong">do</emphasis> { <emphasis role="strong">igraph_2wheap_delete_max</emphasis>(&amp;Q); <emphasis role="strong">igraph_2wheap_check</emphasis>(&amp;Q); } <emphasis role="strong">while</emphasis> (0)
<emphasis role="strong">#define</emphasis> <emphasis role="strong">PUSH</emphasis>(i,e) <emphasis role="strong">do</emphasis> { <emphasis role="strong">igraph_2wheap_push_with_index</emphasis>(&amp;Q, (i), -(e)); <emphasis role="strong">igraph_2wheap_check</emphasis>(&amp;Q); } <emphasis role="strong">while</emphasis> (0);
<emphasis role="strong">#define</emphasis> <emphasis role="strong">MOD</emphasis>(i, e) <emphasis role="strong">do</emphasis> { <emphasis role="strong">igraph_2wheap_modify</emphasis>(&amp;Q, (i), -(e)); <emphasis role="strong">igraph_2wheap_check</emphasis>(&amp;Q); } <emphasis role="strong">while</emphasis> (0)

  <emphasis role="strong">igraph_2wheap_init</emphasis>(&amp;Q, 21);
  <emphasis>/* 0.00 [ 4] */</emphasis> <emphasis role="strong">PUSH</emphasis>(4, 0);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 0.63 [11] */</emphasis> <emphasis role="strong">PUSH</emphasis>(11, 0.63);
  <emphasis>/* 0.05 [15] */</emphasis> <emphasis role="strong">PUSH</emphasis>(15, 0.05);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 0.4  [12] */</emphasis> <emphasis role="strong">PUSH</emphasis>(12, 0.4);
  <emphasis>/* 0.4  [13] */</emphasis> <emphasis role="strong">PUSH</emphasis>(13, 0.4);
  <emphasis>/* 0.12 [16] */</emphasis> <emphasis role="strong">PUSH</emphasis>(16, 0.12);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 1.1  [ 0] */</emphasis> <emphasis role="strong">PUSH</emphasis>(0, 1.1);
  <emphasis>/* 1.1  [14] */</emphasis> <emphasis role="strong">PUSH</emphasis>(14, 1.1);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* [11]/0.44 */</emphasis> <emphasis role="strong">MOD</emphasis>(11, 0.44);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 1.1  [20] */</emphasis> <emphasis role="strong">PUSH</emphasis>(20, 1.1);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 1.3  [ 7] */</emphasis> <emphasis role="strong">PUSH</emphasis>(7, 1.3);
  <emphasis>/* 1.7  [ 9] */</emphasis> <emphasis role="strong">PUSH</emphasis>(9, 1.7);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 1.6  [19] */</emphasis> <emphasis role="strong">PUSH</emphasis>(19, 1.6);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 2.1  [17] */</emphasis> <emphasis role="strong">PUSH</emphasis>(17, 2.1);
  <emphasis>/* 1.3  [18] */</emphasis> <emphasis role="strong">PUSH</emphasis>(18, 1.3);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 2.3  [ 1] */</emphasis> <emphasis role="strong">PUSH</emphasis>(1, 2.3);
  <emphasis>/* 2.2  [ 5] */</emphasis> <emphasis role="strong">PUSH</emphasis>(5, 2.2);
  <emphasis>/* 2.3  [10] */</emphasis> <emphasis role="strong">PUSH</emphasis>(10, 2.3);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* [17]/1.5  */</emphasis> <emphasis role="strong">MOD</emphasis>(17, 1.5);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 1.8  [ 6] */</emphasis> <emphasis role="strong">PUSH</emphasis>(6, 1.8);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 1.3  [ 3] */</emphasis> <emphasis role="strong">PUSH</emphasis>(3, 1.3);
  <emphasis>/* [ 6]/1.3  */</emphasis> <emphasis role="strong">MOD</emphasis>(6, 1.3);
  <emphasis>/* MAX       */</emphasis> MAX;
  <emphasis>/* 1.6  [ 8] */</emphasis> <emphasis role="strong">PUSH</emphasis>(8, 1.6);
  <emphasis>/* MAX       */</emphasis> MAX;

  <emphasis role="strong">igraph_2wheap_destroy</emphasis>(&amp;Q);
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
