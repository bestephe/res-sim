<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;assert.h&gt;

int <emphasis role="strong">main</emphasis>() {
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> tdist;
  igraph_matrix_t pmat;
  igraph_bool_t conn;
  igraph_vector_bool_t bs;
  int i, ret;
  
  <emphasis>/* Symmetric preference game */</emphasis>
  <emphasis role="strong">igraph_vector_bool_init</emphasis>(&amp;bs, 0);

  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;tdist, 3, 1.0, 1.0, 1.0);

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;pmat, 3, 3);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;3; i++) <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, i, i) = 0.2;

  <emphasis>/* undirected, no loops */</emphasis>
  <emphasis role="strong"><link linkend='IGRAPH_CHECK'>IGRAPH_CHECK</link></emphasis>(<emphasis role="strong"><link linkend='igraph_preference_game'>igraph_preference_game</link></emphasis>(&amp;g, 1000, 3, &amp;tdist, <emphasis>/*fixed_sizes=*/</emphasis> 0,
				      &amp;pmat, 0, 0, 0));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 1000) <emphasis role="strong">return</emphasis> 18;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) <emphasis role="strong">return</emphasis> 2;
  <emphasis role="strong"><link linkend='igraph_is_connected'>igraph_is_connected</link></emphasis>(&amp;g, &amp;conn, IGRAPH_STRONG);
  <emphasis role="strong">if</emphasis> (conn) <emphasis role="strong">return</emphasis> 3;
  <emphasis role="strong"><link linkend='igraph_is_loop'>igraph_is_loop</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 4;
  <emphasis role="strong"><link linkend='igraph_is_multiple'>igraph_is_multiple</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 5;
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;2; i++) <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, i, i+1) = 0.1;

  <emphasis>/* directed, no loops */</emphasis>
  <emphasis role="strong"><link linkend='IGRAPH_CHECK'>IGRAPH_CHECK</link></emphasis>(<emphasis role="strong"><link linkend='igraph_preference_game'>igraph_preference_game</link></emphasis>(&amp;g, 1000, 3, &amp;tdist, <emphasis>/*fixed_sizes=*/</emphasis>0, 
				      &amp;pmat, 0, 1, 0));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 1000) <emphasis role="strong">return</emphasis> 17;
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) <emphasis role="strong">return</emphasis> 6;
  <emphasis role="strong"><link linkend='igraph_is_loop'>igraph_is_loop</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 7;
  <emphasis role="strong"><link linkend='igraph_is_multiple'>igraph_is_multiple</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 8;
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* undirected, loops */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;3; i++) <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, i, i) = 1.0;
  <emphasis role="strong"><link linkend='IGRAPH_CHECK'>IGRAPH_CHECK</link></emphasis>(<emphasis role="strong"><link linkend='igraph_preference_game'>igraph_preference_game</link></emphasis>(&amp;g, 100, 3, &amp;tdist, <emphasis>/*fixed_sizes=*/</emphasis> 0,
				      &amp;pmat, 0, 0, 1));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 100) <emphasis role="strong">return</emphasis> 16;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g) &lt; 1395) <emphasis role="strong">return</emphasis> 20;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) <emphasis role="strong">return</emphasis> 9;
  <emphasis role="strong"><link linkend='igraph_is_loop'>igraph_is_loop</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs) == 0) <emphasis role="strong">return</emphasis> 10;
  <emphasis role="strong"><link linkend='igraph_is_multiple'>igraph_is_multiple</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 11;
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* directed, loops */</emphasis>
  <emphasis role="strong"><link linkend='IGRAPH_CHECK'>IGRAPH_CHECK</link></emphasis>(<emphasis role="strong"><link linkend='igraph_preference_game'>igraph_preference_game</link></emphasis>(&amp;g, 100, 3, &amp;tdist, <emphasis>/*fixed_sizes=*/</emphasis> 0,
				      &amp;pmat, 0, 1, 1));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 100) <emphasis role="strong">return</emphasis> 15;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g) &lt; 2700) <emphasis role="strong">return</emphasis> 19;
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) <emphasis role="strong">return</emphasis> 12;
  <emphasis role="strong"><link linkend='igraph_is_loop'>igraph_is_loop</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs) == 0) <emphasis role="strong">return</emphasis> 13;
  <emphasis role="strong"><link linkend='igraph_is_multiple'>igraph_is_multiple</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 14;
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Asymmetric preference game */</emphasis>

  <emphasis>/* directed, no loops */</emphasis>
  <emphasis role="strong"><link linkend='igraph_matrix_resize'>igraph_matrix_resize</link></emphasis>(&amp;pmat, 2, 2);
  <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 0, 0) = 1; <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 0, 1) = 1;
  <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 1, 0) = 1; <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 1, 1) = 1;
  <emphasis role="strong"><link linkend='IGRAPH_CHECK'>IGRAPH_CHECK</link></emphasis>(<emphasis role="strong"><link linkend='igraph_asymmetric_preference_game'>igraph_asymmetric_preference_game</link></emphasis>(&amp;g, 100, 2, 0, &amp;pmat, 0, 0, 0));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 100) <emphasis role="strong">return</emphasis> 21;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g) != 9900) <emphasis role="strong">return</emphasis> 22;
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) <emphasis role="strong">return</emphasis> 23;
  <emphasis role="strong"><link linkend='igraph_is_loop'>igraph_is_loop</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 24;
  <emphasis role="strong"><link linkend='igraph_is_multiple'>igraph_is_multiple</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 25;
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* directed, loops */</emphasis>
  <emphasis role="strong"><link linkend='igraph_matrix_resize'>igraph_matrix_resize</link></emphasis>(&amp;pmat, 2, 2);
  <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 0, 0) = 1; <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 0, 1) = 1;
  <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 1, 0) = 1; <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(pmat, 1, 1) = 1;
  <emphasis role="strong"><link linkend='IGRAPH_CHECK'>IGRAPH_CHECK</link></emphasis>(<emphasis role="strong"><link linkend='igraph_asymmetric_preference_game'>igraph_asymmetric_preference_game</link></emphasis>(&amp;g, 100, 2, 0, &amp;pmat, 0, 0, 1));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 100) <emphasis role="strong">return</emphasis> 26;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g) != 10000) <emphasis role="strong">return</emphasis> 27;
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) <emphasis role="strong">return</emphasis> 28;
  <emphasis role="strong"><link linkend='igraph_is_loop'>igraph_is_loop</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs) != 100) <emphasis role="strong">return</emphasis> 29;
  <emphasis role="strong"><link linkend='igraph_is_multiple'>igraph_is_multiple</link></emphasis>(&amp;g, &amp;bs, <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_bool_sum</emphasis>(&amp;bs)) <emphasis role="strong">return</emphasis> 30;
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;tdist);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;pmat);
  <emphasis role="strong">igraph_vector_bool_destroy</emphasis>(&amp;bs);

  <emphasis role="strong">assert</emphasis>(IGRAPH_FINALLY_STACK_EMPTY);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
