<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

<emphasis role="strong">typedef</emphasis> <emphasis role="strong">struct</emphasis> cb2_data_t {
  igraph_matrix_t *A;
} cb2_data_t;

int <emphasis role="strong">cb2</emphasis>(igraph_real_t *to, <emphasis role="strong">const</emphasis> igraph_real_t *from, int n, void *extra) {
  cb2_data_t *data=(cb2_data_t*) extra;
  <emphasis role="strong"><link linkend='igraph_blas_dgemv_array'>igraph_blas_dgemv_array</link></emphasis>(<emphasis>/*transpose=*/</emphasis> 0, <emphasis>/*alpha=*/</emphasis> 1.0, 
			  data-&gt;A, from, <emphasis>/*beta=*/</emphasis> 0.0, to);
  <emphasis role="strong">return</emphasis> 0;
}

<emphasis role="strong">#define</emphasis> DIM 10

int <emphasis role="strong">main</emphasis>() {
  igraph_matrix_t A;
  igraph_matrix_t values, vectors;
  <link linkend='igraph_arpack_options_t'>igraph_arpack_options_t</link> options;
  cb2_data_t data = { &amp;A };  
  int i, j;

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42 * 42);

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;A, DIM, DIM);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong">for</emphasis> (j=0; j&lt;DIM; j++) {
      <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, i, j) = <emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), -10, 10);
    }
  }
  
  <emphasis role="strong"><link linkend='igraph_arpack_options_init'>igraph_arpack_options_init</link></emphasis>(&amp;options);
  options.n=DIM;
  options.start=0;
  options.nev=4;
  options.ncv=9;
  options.which[0]='L' ; options.which[1]='M';

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;values, 0, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, options.n, 1);

  <emphasis role="strong"><link linkend='igraph_arpack_rnsolve'>igraph_arpack_rnsolve</link></emphasis>(cb2, <emphasis>/*extra=*/</emphasis> &amp;data, &amp;options, <emphasis>/*storage=*/</emphasis> 0, 
			&amp;values, &amp;vectors);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 2, 1) &gt; 0) {
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 2, 1) = -<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 2, 1);
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 3, 1) = -<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 3, 1);    
  }

  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;values);
  <emphasis role="strong">printf</emphasis>("---\n");
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  <emphasis role="strong">printf</emphasis>("---\n");

  <emphasis>/* -------------- */</emphasis>

  options.nev=3;
  options.which[0]='L' ; options.which[1]='M';

  <emphasis role="strong"><link linkend='igraph_arpack_rnsolve'>igraph_arpack_rnsolve</link></emphasis>(cb2, <emphasis>/*extra=*/</emphasis> &amp;data, &amp;options, <emphasis>/*storage=*/</emphasis> 0, 
			&amp;values, &amp;vectors);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 2, 1) &gt; 0) {
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 2, 1) = -<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(values, 2, 1);
  }

  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;values);
  <emphasis role="strong">printf</emphasis>("---\n");
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  <emphasis role="strong">printf</emphasis>("---\n");

  <emphasis>/* -------------- */</emphasis>

  options.nev=3;
  options.which[0]='S' ; options.which[1]='R';

  <emphasis role="strong"><link linkend='igraph_arpack_rnsolve'>igraph_arpack_rnsolve</link></emphasis>(cb2, <emphasis>/*extra=*/</emphasis> &amp;data, &amp;options, <emphasis>/*storage=*/</emphasis> 0, 
			&amp;values, &amp;vectors);

  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;values);
  <emphasis role="strong">printf</emphasis>("---\n");
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  <emphasis role="strong">printf</emphasis>("---\n");

  <emphasis>/* -------------- */</emphasis>

  options.nev=3;
  options.which[0]='L' ; options.which[1]='I';

  <emphasis role="strong"><link linkend='igraph_arpack_rnsolve'>igraph_arpack_rnsolve</link></emphasis>(cb2, <emphasis>/*extra=*/</emphasis> &amp;data, &amp;options, <emphasis>/*storage=*/</emphasis> 0, 
			&amp;values, &amp;vectors);

  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;values);
  <emphasis role="strong">printf</emphasis>("---\n");
  <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
  <emphasis role="strong">printf</emphasis>("---\n");

  <emphasis>/* -------------- */</emphasis>

  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;values);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;A);
  
  <emphasis role="strong">return</emphasis> 0;
}
			
</programlisting>
