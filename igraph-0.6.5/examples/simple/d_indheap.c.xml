<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_types_internal.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  igraph_d_indheap_t h;
  int i;
  long int idx1, idx2;

  <emphasis>/* igraph_d_indheap_init, igraph_d_indheap_destroy */</emphasis>
  <emphasis role="strong">igraph_d_indheap_init</emphasis>(&amp;h, 0);
  <emphasis role="strong">igraph_d_indheap_destroy</emphasis>(&amp;h);
  <emphasis role="strong">igraph_d_indheap_init</emphasis>(&amp;h, 100);
  <emphasis role="strong">igraph_d_indheap_destroy</emphasis>(&amp;h);  

  <emphasis>/* igraph_d_indheap_empty, igraph_d_indheap_size */</emphasis>
  <emphasis role="strong">igraph_d_indheap_init</emphasis>(&amp;h, 10);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_d_indheap_empty</emphasis>(&amp;h)) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_d_indheap_size</emphasis>(&amp;h) != 0) {
    <emphasis role="strong">return</emphasis> 2;
  }
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 10, 0, 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_d_indheap_empty</emphasis>(&amp;h)) {
    <emphasis role="strong">return</emphasis> 3;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_d_indheap_size</emphasis>(&amp;h) != 1) {
    <emphasis role="strong">return</emphasis> 4;
  }
  
  <emphasis>/* igraph_d_indheap_push */</emphasis>
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 9, 9, 8);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 3, 3, 2);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 2, 2, 1);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 1, 1, 0);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 7, 7, 6);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 4, 4, 3);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 0, 0, 1);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 6, 6, 5);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 5, 5, 4);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 8, 8, 7);  

  <emphasis>/* igraph_d_indheap_max, igraph_d_indheap_delete_max */</emphasis>
  <emphasis role="strong">while</emphasis> (!<emphasis role="strong">igraph_d_indheap_empty</emphasis>(&amp;h)) {
    <emphasis role="strong">printf</emphasis>("% li", (long int)<emphasis role="strong">igraph_d_indheap_max</emphasis>(&amp;h));
    <emphasis role="strong">printf</emphasis>("% li\n", (long int)<emphasis role="strong">igraph_d_indheap_delete_max</emphasis>(&amp;h));
  }

  <emphasis>/* igraph_d_indheap_reserve */</emphasis>
  <emphasis role="strong">igraph_d_indheap_reserve</emphasis>(&amp;h, 5);
  <emphasis role="strong">igraph_d_indheap_reserve</emphasis>(&amp;h, 20);
  <emphasis role="strong">igraph_d_indheap_reserve</emphasis>(&amp;h, 0);
  <emphasis role="strong">igraph_d_indheap_reserve</emphasis>(&amp;h, 3);
  
  <emphasis>/* igraph_d_indheap_max_index */</emphasis>
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 0, 0, 1);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 8, 8, 7);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 2, 2, 1);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 7, 7, 6);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 9, 9, 8);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 4, 4, 3);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 3, 3, 2);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 5, 5, 4);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 1, 1, 0);  
  <emphasis role="strong">igraph_d_indheap_push</emphasis>(&amp;h, 6, 6, 5);  
  <emphasis role="strong">while</emphasis> (!<emphasis role="strong">igraph_d_indheap_empty</emphasis>(&amp;h)) {
    <emphasis role="strong">igraph_d_indheap_max_index</emphasis>(&amp;h, &amp;idx1, &amp;idx2);
    <emphasis role="strong">printf</emphasis>(" %li %li", idx1, idx2);
    <emphasis role="strong">igraph_d_indheap_delete_max</emphasis>(&amp;h);
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong">igraph_d_indheap_destroy</emphasis>(&amp;h);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_FINALLY_STACK_SIZE</emphasis>() != 0) <emphasis role="strong">return</emphasis> 5;
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
