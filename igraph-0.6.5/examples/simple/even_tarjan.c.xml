<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2010-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;limits.h&gt;

int <emphasis role="strong">main</emphasis>() {

  igraph_t g, gbar;
  igraph_integer_t k1, k2 = (igraph_integer_t) INT_MAX;
  igraph_real_t tmpk;
  long int i, j, n;

  <emphasis>/* --------------------------------------------------- */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_famous'>igraph_famous</link></emphasis>(&amp;g, "meredith");
  <emphasis role="strong">igraph_even_tarjan_reduction</emphasis>(&amp;g, &amp;gbar, <emphasis>/*capacity=*/</emphasis> 0);
  
  <emphasis role="strong"><link linkend='igraph_vertex_connectivity'>igraph_vertex_connectivity</link></emphasis>(&amp;g, &amp;k1, <emphasis>/* checks= */</emphasis> 0);

  n=<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;n; i++) {
    <emphasis role="strong">for</emphasis> (j=i+1; j&lt;n; j++) {
      igraph_bool_t conn;
      <emphasis role="strong"><link linkend='igraph_are_connected'>igraph_are_connected</link></emphasis>(&amp;g, i, j, &amp;conn);
      <emphasis role="strong">if</emphasis> (conn) { <emphasis role="strong">continue</emphasis>; }
      <emphasis role="strong"><link linkend='igraph_maxflow_value'>igraph_maxflow_value</link></emphasis>(&amp;gbar, &amp;tmpk, 
			   <emphasis>/* source= */</emphasis> i + n, 
			   <emphasis>/* target= */</emphasis> j, 
			   <emphasis>/* capacity= */</emphasis> 0);
      <emphasis role="strong">if</emphasis> (tmpk &lt; k2) { k2=tmpk; }
    }
  }

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;gbar);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
  <emphasis role="strong">if</emphasis> (k1 != k2) {
    <emphasis role="strong">printf</emphasis>("k1 = %ld while k2 = %ld\n", (long int) k1, (long int) k2);
    <emphasis role="strong">return</emphasis> 1;
  }

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
