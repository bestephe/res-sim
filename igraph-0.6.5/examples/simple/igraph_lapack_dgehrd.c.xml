<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2011-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  int nodes=10;
  igraph_t tree;
  igraph_matrix_t sto;
  igraph_matrix_t hess;
  igraph_matrix_complex_t evec1, evec2;
  igraph_vector_complex_t eval1, eval2;
  igraph_eigen_which_t which;
  int i;

  <emphasis role="strong"><link linkend='igraph_tree'>igraph_tree</link></emphasis>(&amp;tree, nodes, <emphasis>/* children= */</emphasis> 3, IGRAPH_TREE_UNDIRECTED);
  
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;sto, nodes, nodes);
  <emphasis role="strong"><link linkend='igraph_get_stochastic'>igraph_get_stochastic</link></emphasis>(&amp;tree, &amp;sto, <emphasis>/*column_wise=*/</emphasis> 0);
  <emphasis role="strong"><link linkend='igraph_matrix_transpose'>igraph_matrix_transpose</link></emphasis>(&amp;sto);
  
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;hess, nodes, nodes);
  <emphasis role="strong">igraph_lapack_dgehrd</emphasis>(&amp;sto, 1, nodes, &amp;hess);
  
  <emphasis role="strong">igraph_matrix_complex_init</emphasis>(&amp;evec1, 0, 0);
  <emphasis role="strong">igraph_vector_complex_init</emphasis>(&amp;eval1, 0);
  which.pos = IGRAPH_EIGEN_ALL;
  <emphasis role="strong">igraph_eigen_matrix</emphasis>(&amp;sto, 0, 0, nodes, 0, IGRAPH_EIGEN_LAPACK, &amp;which, 0, 0,
		      &amp;eval1, &amp;evec1);

  <emphasis role="strong">igraph_matrix_complex_init</emphasis>(&amp;evec2, 0, 0);
  <emphasis role="strong">igraph_vector_complex_init</emphasis>(&amp;eval2, 0);
  <emphasis role="strong">igraph_eigen_matrix</emphasis>(&amp;hess, 0, 0, nodes, 0, IGRAPH_EIGEN_LAPACK, &amp;which, 0, 
		      0, &amp;eval2, &amp;evec2);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;nodes; i++) { 
    igraph_real_t d=<emphasis role="strong">igraph_complex_abs</emphasis>(<emphasis role="strong">igraph_complex_sub</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(eval1)[i],
							  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(eval2)[i]));
    <emphasis role="strong">if</emphasis> (d &gt; 1e-14) { <emphasis role="strong">printf</emphasis>("Difference: %g\n", d); <emphasis role="strong">return</emphasis> 1; }
  }
  
  <emphasis role="strong">igraph_matrix_complex_destroy</emphasis>(&amp;evec2);
  <emphasis role="strong">igraph_vector_complex_destroy</emphasis>(&amp;eval2);

  <emphasis role="strong">igraph_matrix_complex_destroy</emphasis>(&amp;evec1);
  <emphasis role="strong">igraph_vector_complex_destroy</emphasis>(&amp;eval1);
  
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;hess);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;sto);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;tree);
    
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
