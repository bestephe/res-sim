<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdarg.h&gt;

void <emphasis role="strong">print</emphasis>(igraph_t *g) {
  <link linkend='igraph_vector_t'>igraph_vector_t</link> el;
  long int i, j, n;
  char ch = <emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(g) ? '&gt;' : '-';

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;el, 0);
  <emphasis role="strong"><link linkend='igraph_get_edgelist'>igraph_get_edgelist</link></emphasis>(g, &amp;el, 0);
  n = <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(g);

  <emphasis role="strong">for</emphasis> (i=0, j=0; i&lt;n; i++, j+=2) {
    <emphasis role="strong">printf</emphasis>("%ld --%c %ld: %ld\n",
      (long)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(el)[j], ch, (long)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(el)[j+1], (long)<emphasis role="strong"><link linkend='EAN'>EAN</link></emphasis>(g, "weight", i)); 
  }
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;el);
}

int <emphasis role="strong">main</emphasis>() {
  igraph_t g;
  igraph_matrix_t mat;
  int m[4][4] = { { 0, 1, 2, 0 }, { 2, 0, 0, 1 }, { 0, 0, 1, 0 }, { 0, 1, 0, 0 } };
  long int i, j;

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;mat, 4, 4);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;4; i++) <emphasis role="strong">for</emphasis> (j=0; j&lt;4; j++) <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(mat, i, j) = m[i][j];
  <emphasis role="strong"><link linkend='igraph_i_set_attribute_table'>igraph_i_set_attribute_table</link></emphasis>(&amp;igraph_cattribute_table);

  <emphasis>/* [ 0 1 2 0 ]</emphasis>
<emphasis>     [ 2 0 0 1 ]</emphasis>
<emphasis>     [ 0 0 1 0 ]</emphasis>
<emphasis>     [ 0 1 0 0 ] */</emphasis>
  <emphasis role="strong"><link linkend='igraph_weighted_adjacency'>igraph_weighted_adjacency</link></emphasis>(&amp;g, &amp;mat, IGRAPH_ADJ_DIRECTED, 0, <emphasis>/*loops=*/</emphasis> 1);
  <emphasis role="strong">print</emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* [ 0 1 2 0 ]</emphasis>
<emphasis>     [ - 0 0 1 ]</emphasis>
<emphasis>     [ - - 1 0 ]</emphasis>
<emphasis>     [ - - - 0 ] */</emphasis>
  <emphasis role="strong"><link linkend='igraph_weighted_adjacency'>igraph_weighted_adjacency</link></emphasis>(&amp;g, &amp;mat, IGRAPH_ADJ_UPPER, 0, <emphasis>/*loops=*/</emphasis> 1);
  <emphasis role="strong">print</emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* [ 0 - - - ]</emphasis>
<emphasis>     [ 2 0 - - ]</emphasis>
<emphasis>     [ 0 0 1 - ]</emphasis>
<emphasis>     [ 0 1 0 0 ] */</emphasis>
  <emphasis role="strong"><link linkend='igraph_weighted_adjacency'>igraph_weighted_adjacency</link></emphasis>(&amp;g, &amp;mat, IGRAPH_ADJ_LOWER, 0, <emphasis>/*loops=*/</emphasis> 1);
  <emphasis role="strong">print</emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* [ 0 1 0 0 ]</emphasis>
<emphasis>     [ 1 0 0 1 ]</emphasis>
<emphasis>     [ 0 0 1 0 ]</emphasis>
<emphasis>     [ 0 1 0 0 ] */</emphasis>
  <emphasis role="strong"><link linkend='igraph_weighted_adjacency'>igraph_weighted_adjacency</link></emphasis>(&amp;g, &amp;mat, IGRAPH_ADJ_MIN, 0, <emphasis>/*loops=*/</emphasis> 1);
  <emphasis role="strong">print</emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* [ 0 2 2 0 ]</emphasis>
<emphasis>     [ 2 0 0 1 ]</emphasis>
<emphasis>     [ 2 0 1 0 ]</emphasis>
<emphasis>     [ 0 1 0 0 ] */</emphasis>
  <emphasis role="strong"><link linkend='igraph_weighted_adjacency'>igraph_weighted_adjacency</link></emphasis>(&amp;g, &amp;mat, IGRAPH_ADJ_MAX, 0, <emphasis>/*loops=*/</emphasis> 1);
  <emphasis role="strong">print</emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* [ 0 3 2 0 ]</emphasis>
<emphasis>     [ 3 0 0 2 ]</emphasis>
<emphasis>     [ 2 0 1 0 ]</emphasis>
<emphasis>     [ 0 2 0 0 ] */</emphasis>
  <emphasis role="strong"><link linkend='igraph_weighted_adjacency'>igraph_weighted_adjacency</link></emphasis>(&amp;g, &amp;mat, IGRAPH_ADJ_PLUS, 0, <emphasis>/*loops=*/</emphasis> 1);
  <emphasis role="strong">print</emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;mat);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_FINALLY_STACK_SIZE</emphasis>() != 0) <emphasis role="strong">return</emphasis> 1;

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
