<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

<emphasis>/* ----------------------------------------------------------- */</emphasis>

<emphasis>/* Vertices/edges with the same parity match */</emphasis>
igraph_bool_t <emphasis role="strong">compat_parity</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *graph1, 
			    <emphasis role="strong">const</emphasis> igraph_t *graph2,
			    <emphasis role="strong">const</emphasis> igraph_integer_t g1_num,
			    <emphasis role="strong">const</emphasis> igraph_integer_t g2_num,
			    void *arg) {
  <emphasis role="strong">return</emphasis> (g1_num % 2) == (g2_num %2);
}

<emphasis>/* Nothing vertex/edge 0 in graph1 */</emphasis>
igraph_bool_t <emphasis role="strong">compat_not0</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *graph1, 
			  <emphasis role="strong">const</emphasis> igraph_t *graph2,
			  <emphasis role="strong">const</emphasis> igraph_integer_t g1_num,
			  <emphasis role="strong">const</emphasis> igraph_integer_t g2_num,
			  void *arg) {
  <emphasis role="strong">return</emphasis> g1_num != 0;
}

int <emphasis role="strong">match_rings</emphasis>() {

  igraph_t r1, r2;
  igraph_bool_t iso;
  igraph_integer_t count;
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;r1, 10, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis> 1);
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;r2, 10, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis> 1);

  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			&amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			<emphasis>/*node_compat_fn=*/</emphasis> 0, <emphasis>/*edge_compat_fn=*/</emphasis> 0, 
			<emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (!iso) { <emphasis role="strong">exit</emphasis>(1); }

  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			&amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			compat_parity, <emphasis>/*edge_compat_fn=*/</emphasis> 0, <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (!iso) { <emphasis role="strong">exit</emphasis>(2); }  

  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
  			&amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0,
  			compat_not0, <emphasis>/*edge_compat_fn=*/</emphasis> 0, <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (iso) { <emphasis role="strong">exit</emphasis>(3); }

  <emphasis>/* ------- */</emphasis>

  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			&amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			<emphasis>/*node_compat_fn=*/</emphasis> 0, compat_parity, <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (!iso) { <emphasis role="strong">exit</emphasis>(4); }  

  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			&amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			<emphasis>/*node_compat_fn=*/</emphasis> 0, compat_not0, <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (iso) { <emphasis role="strong">exit</emphasis>(5); }  

  <emphasis>/* ------- */</emphasis>

  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
				&amp;count, <emphasis>/*node_compat_fn=*/</emphasis> 0, 
				<emphasis>/*edge_compat_fn=*/</emphasis> 0, <emphasis>/*arg=*/</emphasis> 0);
  
  <emphasis role="strong">if</emphasis> (count != 20) { <emphasis role="strong">exit</emphasis>(6); }

  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
				&amp;count, compat_parity, <emphasis>/*edge_compat_fn=*/</emphasis> 0,
				<emphasis>/*arg=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (count != 10) { <emphasis role="strong">exit</emphasis>(7); }

  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
				&amp;count, compat_not0, <emphasis>/*edge_compat_fn=*/</emphasis> 0,
				<emphasis>/*arg=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (count != 0) { <emphasis role="strong">exit</emphasis>(8); }  

  <emphasis>/* ------- */</emphasis> 

  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
				&amp;count, <emphasis>/*node_compat_fn=*/</emphasis> 0, compat_parity,
				<emphasis>/*arg=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (count != 10) { <emphasis role="strong">exit</emphasis>(9); }

  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;r1, &amp;r2, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
				&amp;count, <emphasis>/*node_compat_fn=*/</emphasis> 0, compat_not0,
				<emphasis>/*arg=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (count != 0) { <emphasis role="strong">exit</emphasis>(10); }    

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;r1);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;r2);
  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">match_rings_open_closed</emphasis>() {
  igraph_t ro, rc;
  igraph_bool_t iso;
  igraph_integer_t count;
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ro, 10, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis> 0);
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;rc, 10, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis> 1);  

  <emphasis role="strong"><link linkend='igraph_subisomorphic_vf2'>igraph_subisomorphic_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			   &amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			   <emphasis>/*node_compat_fn=*/</emphasis> 0, <emphasis>/*edge_compat_fn=*/</emphasis> 0, 
			   <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (!iso) { <emphasis role="strong">exit</emphasis>(31); }

  <emphasis role="strong"><link linkend='igraph_subisomorphic_vf2'>igraph_subisomorphic_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			   &amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			   compat_parity, <emphasis>/*edge_compat_fn=*/</emphasis> 0, 
			   <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (!iso) { <emphasis role="strong">exit</emphasis>(32); }

  <emphasis role="strong"><link linkend='igraph_subisomorphic_vf2'>igraph_subisomorphic_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			   &amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			   compat_not0, <emphasis>/*edge_compat_fn=*/</emphasis> 0, 
			   <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (iso) { <emphasis role="strong">exit</emphasis>(33); }
  
  <emphasis>/* ------- */</emphasis> 

  <emphasis role="strong"><link linkend='igraph_subisomorphic_vf2'>igraph_subisomorphic_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			   &amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			   <emphasis>/*node_compat_fn=*/</emphasis> 0, compat_parity,
			   <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (!iso) { <emphasis role="strong">exit</emphasis>(34); }

  <emphasis role="strong"><link linkend='igraph_subisomorphic_vf2'>igraph_subisomorphic_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
			   &amp;iso, <emphasis>/*map12=*/</emphasis> 0, <emphasis>/*map21=*/</emphasis> 0, 
			   <emphasis>/*node_compat_fn=*/</emphasis> 0, compat_not0,
			   <emphasis>/*arg=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (!iso) { <emphasis role="strong">exit</emphasis>(35); }  

  <emphasis>/* ------- */</emphasis>

  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
  				   &amp;count, <emphasis>/*node_compat_fn=*/</emphasis> 0,
  				   <emphasis>/*edge_compat_fn=*/</emphasis> 0, <emphasis>/*arg=*/</emphasis> 0);
  
  <emphasis role="strong">if</emphasis> (count != 20) { <emphasis role="strong">exit</emphasis>(36); }

  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
  				   &amp;count, compat_parity,
  				   <emphasis>/*edge_compat_fn=*/</emphasis> 0, <emphasis>/*arg=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (count != 10) { <emphasis role="strong">exit</emphasis>(37); }

  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
  				   &amp;count, compat_not0, <emphasis>/*edge_compat_fn=*/</emphasis> 0,
  				   <emphasis>/*arg=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (count != 0) { <emphasis role="strong">exit</emphasis>(38); }

  <emphasis>/* ------- */</emphasis> 

  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
				   &amp;count, <emphasis>/*node_compat_fn=*/</emphasis> 0, 
				   compat_parity, <emphasis>/*arg=*/</emphasis> 0);
  
  <emphasis role="strong">if</emphasis> (count != 10) { <emphasis role="strong">exit</emphasis>(39); }

  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;rc, &amp;ro, <emphasis>/*colors(4x)*/</emphasis> 0, 0, 0, 0,
				   &amp;count, <emphasis>/*node_compat_fn=*/</emphasis> 0, compat_not0,
				   <emphasis>/*arg=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (count != 2) { <emphasis role="strong">exit</emphasis>(40); }

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ro);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;rc);
  <emphasis role="strong">return</emphasis> 0;  
}

<emphasis>/* ----------------------------------------------------------- */</emphasis>

int <emphasis role="strong">main</emphasis>() {
  <emphasis role="strong">match_rings</emphasis>();
  <emphasis role="strong">match_rings_open_closed</emphasis>();
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
