<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

void <emphasis role="strong">print_vector</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link> *v, FILE *f) {
  long int i;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(v); i++) {
    <emphasis role="strong">fprintf</emphasis>(f, " %li", (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*v)[i]);
  }
  <emphasis role="strong">fprintf</emphasis>(f, "\n");
}

int <emphasis role="strong">main</emphasis>() {
  
  <link linkend='igraph_vector_t'>igraph_vector_t</link> v, v2, v3;
  int i;
  igraph_real_t *ptr;
  long int pos;

  <emphasis>/* simple init */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 0);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* vector of zeros */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 10);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* VECTOR(), igraph_vector_size */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 10);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]=10-i;
  }
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_reserve, igraph_vector_push_back */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 0);
  <emphasis role="strong"><link linkend='igraph_vector_reserve'>igraph_vector_reserve</link></emphasis>(&amp;v, 10);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;v, i);
  }

  <emphasis>/* igraph_vector_empty, igraph_vector_clear */</emphasis>
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_empty'>igraph_vector_empty</link></emphasis>(&amp;v)) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong"><link linkend='igraph_vector_clear'>igraph_vector_clear</link></emphasis>(&amp;v);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_empty'>igraph_vector_empty</link></emphasis>(&amp;v)) {
    <emphasis role="strong">return</emphasis> 2;
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_e, igraph_vector_e_ptr */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 5);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    *<emphasis role="strong"><link linkend='igraph_vector_e_ptr'>igraph_vector_e_ptr</link></emphasis>(&amp;v, i) = 100*i;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong">fprintf</emphasis>(stdout, " %li", (long int)<emphasis role="strong"><link linkend='igraph_vector_e'>igraph_vector_e</link></emphasis>(&amp;v, i));
  }
  <emphasis role="strong">fprintf</emphasis>(stdout, "\n");
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_set */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 5);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='igraph_vector_set'>igraph_vector_set</link></emphasis>(&amp;v, i, 20*i);
  }
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_null */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 0);
  <emphasis role="strong"><link linkend='igraph_vector_null'>igraph_vector_null</link></emphasis>(&amp;v);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 10);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]=i+1;
  }
  <emphasis role="strong"><link linkend='igraph_vector_null'>igraph_vector_null</link></emphasis>(&amp;v);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_tail, igraph_vector_pop_back */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 10);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]=i+1;
  }
  <emphasis role="strong">while</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_empty'>igraph_vector_empty</link></emphasis>(&amp;v)) {
    <emphasis role="strong">fprintf</emphasis>(stdout, " %li", (long int)<emphasis role="strong"><link linkend='igraph_vector_tail'>igraph_vector_tail</link></emphasis>(&amp;v));
    <emphasis role="strong">fprintf</emphasis>(stdout, " %li", (long int)<emphasis role="strong"><link linkend='igraph_vector_pop_back'>igraph_vector_pop_back</link></emphasis>(&amp;v));
  }
  <emphasis role="strong">fprintf</emphasis>(stdout, "\n");
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_init_seq, igraph_vector_order */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;v, 1, 10);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v2, 0);
  <emphasis role="strong">igraph_vector_order1</emphasis>(&amp;v, &amp;v2, 10);
  <emphasis role="strong">print_vector</emphasis>(&amp;v2, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v2);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_resize, igraph_vector_sort */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 20);  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]=10-i;
  }
  <emphasis role="strong"><link linkend='igraph_vector_resize'>igraph_vector_resize</link></emphasis>(&amp;v, 10);
  <emphasis role="strong"><link linkend='igraph_vector_sort'>igraph_vector_sort</link></emphasis>(&amp;v);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_max, igraph_vector_init_copy */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 10);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]=100-i;    
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong">fprintf</emphasis>(stdout, " %li", (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]);
  }
  <emphasis role="strong">fprintf</emphasis>(stdout, "\n");
  <emphasis role="strong">fprintf</emphasis>(stdout, " %li\n", (long int)<emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;v));

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  ptr=(igraph_real_t*) <emphasis role="strong">malloc</emphasis>(10* <emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_vector_init_copy'>igraph_vector_init_copy</link></emphasis>(&amp;v, ptr, 10);
  <emphasis role="strong">free</emphasis>(ptr);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]=100-i;
  }
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  
  <emphasis>/* igraph_vector_copy_to */</emphasis>
  ptr=(igraph_real_t*) <emphasis role="strong">malloc</emphasis>(10* <emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;v, 11, 20);
  <emphasis role="strong"><link linkend='igraph_vector_copy_to'>igraph_vector_copy_to</link></emphasis>(&amp;v, ptr);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong">fprintf</emphasis>(stdout, " %li", (long int)ptr[i]);
  }
  <emphasis role="strong">fprintf</emphasis>(stdout, "\n");
  <emphasis role="strong">free</emphasis>(ptr);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_init_seq, igraph_vector_sum, igraph_vector_prod */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;v, 1, 5);
  <emphasis role="strong">fprintf</emphasis>(stdout, " %li", (long int)<emphasis role="strong"><link linkend='igraph_vector_sum'>igraph_vector_sum</link></emphasis>(&amp;v));
  <emphasis role="strong">fprintf</emphasis>(stdout, " %li\n", (long int)<emphasis role="strong"><link linkend='igraph_vector_prod'>igraph_vector_prod</link></emphasis>(&amp;v));
  
  <emphasis>/* igraph_vector_remove_section */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_remove_section'>igraph_vector_remove_section</link></emphasis>(&amp;v, 2, 4);
  <emphasis role="strong">fprintf</emphasis>(stdout, " %li", (long int)<emphasis role="strong"><link linkend='igraph_vector_sum'>igraph_vector_sum</link></emphasis>(&amp;v));
  <emphasis role="strong">fprintf</emphasis>(stdout, " %li\n", (long int)<emphasis role="strong"><link linkend='igraph_vector_prod'>igraph_vector_prod</link></emphasis>(&amp;v));
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_remove */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;v, 1, 10);
  <emphasis role="strong"><link linkend='igraph_vector_remove'>igraph_vector_remove</link></emphasis>(&amp;v, 9);
  <emphasis role="strong"><link linkend='igraph_vector_remove'>igraph_vector_remove</link></emphasis>(&amp;v, 0);
  <emphasis role="strong"><link linkend='igraph_vector_remove'>igraph_vector_remove</link></emphasis>(&amp;v, 4);
  <emphasis role="strong">fprintf</emphasis>(stdout, " %li\n", (long int)<emphasis role="strong"><link linkend='igraph_vector_sum'>igraph_vector_sum</link></emphasis>(&amp;v));
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_move_interval */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;v, 0, 9);
  <emphasis role="strong">igraph_vector_move_interval</emphasis>(&amp;v, 5, 10, 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_sum'>igraph_vector_sum</link></emphasis>(&amp;v) != 70) {
    <emphasis role="strong">return</emphasis> 3;
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
    
  <emphasis>/* igraph_vector_isininterval */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;v, 1, 10);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_isininterval'>igraph_vector_isininterval</link></emphasis>(&amp;v, 1, 10)) {
    <emphasis role="strong">return</emphasis> 4;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_isininterval'>igraph_vector_isininterval</link></emphasis>(&amp;v, 2, 10)) {
    <emphasis role="strong">return</emphasis> 5;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_isininterval'>igraph_vector_isininterval</link></emphasis>(&amp;v, 1, 9)) {
    <emphasis role="strong">return</emphasis> 6;
  }

  <emphasis>/* igraph_vector_any_smaller */</emphasis>
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_vector_any_smaller</emphasis>(&amp;v, 1)) {
    <emphasis role="strong">return</emphasis> 7;
  }
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_vector_any_smaller</emphasis>(&amp;v, 2)) {
    <emphasis role="strong">return</emphasis> 8;
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_all_e */</emphasis>

  <emphasis>/* igraph_vector_binsearch */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;v, 0, 9);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_binsearch'>igraph_vector_binsearch</link></emphasis>(&amp;v, 0, 0)) {
      <emphasis role="strong">return</emphasis> 9;
    }
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_binsearch'>igraph_vector_binsearch</link></emphasis>(&amp;v, 10, 0)) {
    <emphasis role="strong">return</emphasis> 10;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_binsearch'>igraph_vector_binsearch</link></emphasis>(&amp;v, -1, 0)) {
    <emphasis role="strong">return</emphasis> 11;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]= 2*i;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    long int pos;
    <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_binsearch'>igraph_vector_binsearch</link></emphasis>(&amp;v, <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i], &amp;pos)) {
      <emphasis role="strong">fprintf</emphasis>(stderr, "cannot find %i\n", (int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]);
      <emphasis role="strong">return</emphasis> 12;
    }
    <emphasis role="strong">if</emphasis> (pos != i) {
      <emphasis role="strong">return</emphasis> 13;
    }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_binsearch'>igraph_vector_binsearch</link></emphasis>(&amp;v, <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]+1, &amp;pos)) {
      <emphasis role="strong">return</emphasis> 14;
    }
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* Binsearch in empty vector */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_binsearch2'>igraph_vector_binsearch2</link></emphasis>(&amp;v, 0)) {
    <emphasis role="strong">return</emphasis> 16;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_binsearch'>igraph_vector_binsearch</link></emphasis>(&amp;v, 1, &amp;pos)) {
    <emphasis role="strong">return</emphasis> 17;
  }
  <emphasis role="strong">if</emphasis> (pos != 0) {
    <emphasis role="strong">return</emphasis> 18;
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_init_real */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;v, 10, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_init_int */</emphasis>
  <emphasis role="strong">igraph_vector_init_int</emphasis>(&amp;v, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_init_real */</emphasis>
  <emphasis role="strong">igraph_vector_init_real_end</emphasis>(&amp;v, -1, 1.0, 2.0, 3.0, 4.0, 5.0, 
		       6.0, 7.0, 8.0, 9.0, 10.0, -1.0);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_init_int */</emphasis>
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* igraph_vector_permdelete */</emphasis>
  <emphasis>/* igraph_vector_remove_negidx */</emphasis>

  <emphasis>/* order2 */</emphasis>
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v, -1, 10,9,8,7,6,7,8,9,10, -1);
  <emphasis role="strong">igraph_vector_order2</emphasis>(&amp;v);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* filter_smaller, quite special.... */</emphasis>
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v, -1, 0,1,2,3,4,4,4,4,5,6,7,8, -1);
  <emphasis role="strong">igraph_vector_filter_smaller</emphasis>(&amp;v, 4);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v, -1, 1,2,3,4,4,4,4,5,6,7,8, -1);
  <emphasis role="strong">igraph_vector_filter_smaller</emphasis>(&amp;v, 0);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v, -1, 0,0,1,2,3,4,4,4,4,5,6,7,8, -1);
  <emphasis role="strong">igraph_vector_filter_smaller</emphasis>(&amp;v, 0);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis>/* rank */</emphasis>
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v, -1, 0,1,2,6,5,2,1,0, -1);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v2, 0);
  <emphasis role="strong">igraph_vector_rank</emphasis>(&amp;v, &amp;v2, 7);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  <emphasis role="strong">print_vector</emphasis>(&amp;v2, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v2);

  <emphasis>/* order */</emphasis>
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v,  -1, 1,1,2,2, -1);
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;v2, -1, 2,3,1,3, -1);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v3, 0);
  <emphasis role="strong">igraph_vector_order</emphasis>(&amp;v, &amp;v2, &amp;v3, 3);
  <emphasis role="strong">print_vector</emphasis>(&amp;v3, stdout);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v2);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v3);

  <emphasis>/* fill */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 100);
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;v, 1.234567);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i] != 1.234567) { 
      <emphasis role="strong">return</emphasis> 15;
    }
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_FINALLY_STACK_SIZE</emphasis>() != 0) <emphasis role="strong">return</emphasis> 16;

  <emphasis role="strong">return</emphasis> 0;
}
  
</programlisting>
