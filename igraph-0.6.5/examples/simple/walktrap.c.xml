<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2007-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  igraph_t g;
  igraph_matrix_t merges;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> modularity;
  long int no_of_nodes;
  long int i;
  
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 5, IGRAPH_UNDIRECTED, 
	       0,1,0,2,0,3,0,4, 1,2,1,3,1,4, 2,3,2,4, 3,4,
	       5,6,5,7,5,8,5,9, 6,7,6,8,6,9, 7,8,7,9, 8,9, 0,5, -1);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;modularity, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;merges, 0, 0);
  
  <emphasis role="strong"><link linkend='igraph_community_walktrap'>igraph_community_walktrap</link></emphasis>(&amp;g, 0 <emphasis>/* no weights */</emphasis>,
			    4 <emphasis>/* steps */</emphasis>,
			    &amp;merges, &amp;modularity, 
			    <emphasis>/* membership=*/</emphasis> 0);
  
  no_of_nodes=<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g);
  <emphasis role="strong">printf</emphasis>("Merges:\n");
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_matrix_nrow'>igraph_matrix_nrow</link></emphasis>(&amp;merges); i++) {
    <emphasis role="strong">printf</emphasis>("%2.1li + %2.li -&gt; %2.li (modularity %4.2f)\n", 
	   (long int)<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(merges, i, 0), 
	   (long int)<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(merges, i, 1), 
	   no_of_nodes+i,
	   <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(modularity)[i]);
  }
  
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* isolated vertices */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 5, IGRAPH_UNDIRECTED, -1);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_community_walktrap'>igraph_community_walktrap</link></emphasis>(&amp;g, 0 <emphasis>/* no weights */</emphasis>, 4 <emphasis>/* steps */</emphasis>, &amp;merges,
      &amp;modularity, <emphasis>/* membership = */</emphasis> 0)) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_min'>igraph_vector_min</link></emphasis>(&amp;modularity) != 0 || <emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;modularity) != 0) {
    <emphasis role="strong">return</emphasis> 2;
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;merges);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;modularity);
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
