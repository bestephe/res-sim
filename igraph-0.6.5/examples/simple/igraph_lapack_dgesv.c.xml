<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2010-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;time.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdio.h&gt;

<emphasis role="strong">#define</emphasis> DIM 10

void <emphasis role="strong">igraph_print_warning</emphasis>(<emphasis role="strong">const</emphasis> char *reason, <emphasis role="strong">const</emphasis> char *file, 
			  int line, int igraph_errno) {
  <emphasis role="strong">printf</emphasis>("Warning: %s\n", reason);
}

int <emphasis role="strong">main</emphasis>() {

  igraph_matrix_t A, B, RHS;
  int info;
  int i;

  <emphasis>/* Identity matrix, you have to start somewhere */</emphasis>

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;A, DIM, DIM);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;B, DIM, 1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, i, i) = 1.0;
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(B, i, 0) = i+1;
  }

  <emphasis role="strong"><link linkend='igraph_matrix_copy'>igraph_matrix_copy</link></emphasis>(&amp;RHS, &amp;B);
  <emphasis role="strong"><link linkend='igraph_lapack_dgesv'>igraph_lapack_dgesv</link></emphasis>(&amp;A, <emphasis>/*ipiv=*/</emphasis> 0, &amp;RHS, &amp;info);

  <emphasis role="strong">if</emphasis> (info != 0) { <emphasis role="strong">return</emphasis> 1;}
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_matrix_all_e'>igraph_matrix_all_e</link></emphasis>(&amp;B, &amp;RHS)) { <emphasis role="strong">return</emphasis> 2; }
  
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;A);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;B);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;RHS);

  <emphasis>/* Diagonal matrix */</emphasis>

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;A, DIM, DIM);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;RHS, DIM, 1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, i, i) = i+1;
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(RHS, i, 0) = i+1;
  }

  <emphasis role="strong"><link linkend='igraph_lapack_dgesv'>igraph_lapack_dgesv</link></emphasis>(&amp;A, <emphasis>/*ipiv=*/</emphasis> 0, &amp;RHS, &amp;info);

  <emphasis role="strong">if</emphasis> (info != 0) { <emphasis role="strong">return</emphasis> 3;}
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(RHS, i, 0) != 1.0) { <emphasis role="strong">return</emphasis> 4; }
  }
  
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;A);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;RHS);  

  <emphasis>/* A general matrix */</emphasis>

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42);

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;A, DIM, DIM);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;B, DIM, 1);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;RHS, DIM, 1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    int j;
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(B, i, 0) = <emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 1, 10);
    <emphasis role="strong">for</emphasis> (j=0; j&lt;DIM; j++) {
      <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, i, j) = <emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 1, 10);
    }
  }
  <emphasis role="strong"><link linkend='igraph_blas_dgemv_array'>igraph_blas_dgemv_array</link></emphasis>(<emphasis>/*transpose=*/</emphasis> 0, <emphasis>/*alpha=*/</emphasis> 1.0, <emphasis>/*a=*/</emphasis> &amp;A, 
			  <emphasis>/*x-*/</emphasis> &amp;<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(B, 0, 0), <emphasis>/*beta=*/</emphasis> 0,
			  <emphasis>/*y=*/</emphasis> &amp;<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(RHS, 0, 0));

  <emphasis role="strong"><link linkend='igraph_lapack_dgesv'>igraph_lapack_dgesv</link></emphasis>(&amp;A, <emphasis>/*ipiv=*/</emphasis> 0, &amp;RHS, &amp;info);
  <emphasis role="strong">if</emphasis> (info != 0) { <emphasis role="strong">return</emphasis> 5; }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(B, i, 0) - <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(RHS, i, 0)) &gt; 1e-13) { <emphasis role="strong">return</emphasis> 6; }
  }
  
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;A);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;B);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;RHS);

  <emphasis>/* A singular matrix */</emphasis>

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42);

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;A, DIM, DIM);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;B, DIM, 1);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;RHS, DIM, 1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    int j;
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(B, i, 0) = <emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 1, 10);
    <emphasis role="strong">for</emphasis> (j=0; j&lt;DIM; j++) {
      <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, i, j) = <emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 1, 10);
    }
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, DIM-1, i) = <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, 0, i);
  }

  <emphasis role="strong"><link linkend='igraph_blas_dgemv_array'>igraph_blas_dgemv_array</link></emphasis>(<emphasis>/*transpose=*/</emphasis> 0, <emphasis>/*alpha=*/</emphasis> 1.0, <emphasis>/*a=*/</emphasis> &amp;A, 
			  <emphasis>/*x-*/</emphasis> &amp;<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(B, 0, 0), <emphasis>/*beta=*/</emphasis> 0,
			  <emphasis>/*y=*/</emphasis> &amp;<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(RHS, 0, 0));

  <emphasis role="strong"><link linkend='igraph_set_warning_handler'>igraph_set_warning_handler</link></emphasis>(igraph_print_warning);
  <emphasis role="strong"><link linkend='igraph_lapack_dgesv'>igraph_lapack_dgesv</link></emphasis>(&amp;A, <emphasis>/*ipiv=*/</emphasis> 0, &amp;RHS, &amp;info);
  <emphasis role="strong">if</emphasis> (info != 10) {
    <emphasis role="strong">printf</emphasis>("LAPACK returned info = %d, should have been 10", info);
    <emphasis role="strong">return</emphasis> 7;
  }
  
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;A);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;B);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;RHS);
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
