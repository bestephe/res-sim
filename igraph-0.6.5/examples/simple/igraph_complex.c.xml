<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2010-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;math.h&gt;

<emphasis role="strong">#define</emphasis> ARE 4
<emphasis role="strong">#define</emphasis> AIM 5
<emphasis role="strong">#define</emphasis> BRE 6
<emphasis role="strong">#define</emphasis> BIM 2

int <emphasis role="strong">main</emphasis>() {

  igraph_complex_t a = <emphasis role="strong">igraph_complex</emphasis>(ARE, AIM);
  igraph_complex_t b = <emphasis role="strong">igraph_complex</emphasis>(BRE, BIM);
  igraph_complex_t c, d, e;
  igraph_real_t m;

  <emphasis>/* polar, mod, arg */</emphasis>
  c=<emphasis role="strong">igraph_complex_polar</emphasis>(<emphasis role="strong">igraph_complex_mod</emphasis>(a), <emphasis role="strong">igraph_complex_arg</emphasis>(a));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(a,c,1e-14)) { <emphasis role="strong">return</emphasis> 1; }
  
  <emphasis>/* add */</emphasis>
  c=<emphasis role="strong">igraph_complex_add</emphasis>(a,b);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != ARE+BRE || <emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != AIM+BIM) { <emphasis role="strong">return</emphasis> 2; }
  
  <emphasis>/* sub */</emphasis>
  c=<emphasis role="strong">igraph_complex_sub</emphasis>(a,b);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != ARE-BRE || <emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != AIM-BIM) { <emphasis role="strong">return</emphasis> 3; }

  <emphasis>/* mul */</emphasis>
  c=<emphasis role="strong">igraph_complex_mul</emphasis>(a,b);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != ARE*BRE-AIM*BIM || 
      <emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != ARE*BIM+AIM*BRE) { <emphasis role="strong">return</emphasis> 4; }
  
  <emphasis>/* div */</emphasis>
  c=<emphasis role="strong">igraph_complex_div</emphasis>(a,b);
  c=<emphasis role="strong">igraph_complex_mul</emphasis>(c,b);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(a,c,1e-14)) { <emphasis role="strong">return</emphasis> 5; }

  <emphasis>/* add_real */</emphasis>
  c=<emphasis role="strong">igraph_complex_add_real</emphasis>(a,<emphasis role="strong">IGRAPH_REAL</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != <emphasis role="strong">IGRAPH_REAL</emphasis>(a) + <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) { <emphasis role="strong">return</emphasis> 6; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != <emphasis role="strong">IGRAPH_IMAG</emphasis>(a)) { <emphasis role="strong">return</emphasis> 7; }

  <emphasis>/* add_imag */</emphasis>
  c=<emphasis role="strong">igraph_complex_add_imag</emphasis>(a,<emphasis role="strong">IGRAPH_IMAG</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != <emphasis role="strong">IGRAPH_REAL</emphasis>(a)) { <emphasis role="strong">return</emphasis> 8; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != <emphasis role="strong">IGRAPH_IMAG</emphasis>(a) + <emphasis role="strong">IGRAPH_IMAG</emphasis>(b)) { <emphasis role="strong">return</emphasis> 9; }

  <emphasis>/* sub_real */</emphasis>
  c=<emphasis role="strong">igraph_complex_sub_real</emphasis>(a,<emphasis role="strong">IGRAPH_REAL</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != <emphasis role="strong">IGRAPH_REAL</emphasis>(a) - <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) { <emphasis role="strong">return</emphasis> 10; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != <emphasis role="strong">IGRAPH_IMAG</emphasis>(a)) { <emphasis role="strong">return</emphasis> 11; }  

  <emphasis>/* sub_imag */</emphasis>
  c=<emphasis role="strong">igraph_complex_sub_imag</emphasis>(a,<emphasis role="strong">IGRAPH_IMAG</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != <emphasis role="strong">IGRAPH_REAL</emphasis>(a)) { <emphasis role="strong">return</emphasis> 12; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != <emphasis role="strong">IGRAPH_IMAG</emphasis>(a) - <emphasis role="strong">IGRAPH_IMAG</emphasis>(b)) { <emphasis role="strong">return</emphasis> 13; }

  <emphasis>/* mul_real */</emphasis>
  c=<emphasis role="strong">igraph_complex_mul_real</emphasis>(a, <emphasis role="strong">IGRAPH_REAL</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != <emphasis role="strong">IGRAPH_REAL</emphasis>(a) * <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) { <emphasis role="strong">return</emphasis> 14; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != <emphasis role="strong">IGRAPH_IMAG</emphasis>(a) * <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) { <emphasis role="strong">return</emphasis> 15; }

  <emphasis>/* mul_imag */</emphasis>
  c=<emphasis role="strong">igraph_complex_mul_imag</emphasis>(a, <emphasis role="strong">IGRAPH_REAL</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != - <emphasis role="strong">IGRAPH_IMAG</emphasis>(a) * <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) { <emphasis role="strong">return</emphasis> 14; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != <emphasis role="strong">IGRAPH_REAL</emphasis>(a) * <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) { <emphasis role="strong">return</emphasis> 15; }  

  <emphasis>/* div_real */</emphasis>
  c=<emphasis role="strong">igraph_complex_div_real</emphasis>(a, <emphasis role="strong">IGRAPH_REAL</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong">IGRAPH_REAL</emphasis>(c) - <emphasis role="strong">IGRAPH_REAL</emphasis>(a) / <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) &gt; 1e-15) { 
    <emphasis role="strong">return</emphasis> 16; 
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) - <emphasis role="strong">IGRAPH_IMAG</emphasis>(a) / <emphasis role="strong">IGRAPH_REAL</emphasis>(b)) &gt; 1e-15) { 
    <emphasis role="strong">return</emphasis> 17; 
  }

  <emphasis>/* div_imag */</emphasis>
  c=<emphasis role="strong">igraph_complex_div_imag</emphasis>(a, <emphasis role="strong">IGRAPH_IMAG</emphasis>(b));
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != <emphasis role="strong">IGRAPH_IMAG</emphasis>(a) / <emphasis role="strong">IGRAPH_IMAG</emphasis>(b)) { <emphasis role="strong">return</emphasis> 18; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != - <emphasis role="strong">IGRAPH_REAL</emphasis>(a) / <emphasis role="strong">IGRAPH_IMAG</emphasis>(b)) { <emphasis role="strong">return</emphasis> 19; }

  <emphasis>/* conj */</emphasis>
  c=<emphasis role="strong">igraph_complex_conj</emphasis>(a);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != ARE || <emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != -AIM) { <emphasis role="strong">return</emphasis> 20; }

  <emphasis>/* neg */</emphasis>
  c=<emphasis role="strong">igraph_complex_neg</emphasis>(a);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_REAL</emphasis>(c) != - <emphasis role="strong">IGRAPH_REAL</emphasis>(a) ||
      <emphasis role="strong">IGRAPH_IMAG</emphasis>(c) != - <emphasis role="strong">IGRAPH_IMAG</emphasis>(a)) { <emphasis role="strong">return</emphasis> 21; }

  <emphasis>/* inv */</emphasis>
  c=<emphasis role="strong">igraph_complex_inv</emphasis>(a);
  d=<emphasis role="strong">igraph_complex</emphasis>(1.0, 0.0);
  e=<emphasis role="strong">igraph_complex_div</emphasis>(d, a);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(c, e, 1e-14)) { <emphasis role="strong">return</emphasis> 22; }

  <emphasis>/* abs */</emphasis>
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">igraph_complex_abs</emphasis>(a) != <emphasis role="strong">igraph_complex_mod</emphasis>(a)) { <emphasis role="strong">return</emphasis> 23; }

  <emphasis>/* logabs */</emphasis>

  <emphasis>/* sqrt */</emphasis>
  c=<emphasis role="strong">igraph_complex_sqrt</emphasis>(a);
  d=<emphasis role="strong">igraph_complex_mul</emphasis>(c,c);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(a, d, 1e-14)) { <emphasis role="strong">return</emphasis> 24; }

  <emphasis>/* sqrt_real */</emphasis>
  c=<emphasis role="strong">igraph_complex_sqrt</emphasis>(<emphasis role="strong">igraph_complex</emphasis>(-1.0, 0.0));
  d=<emphasis role="strong">igraph_complex_sqrt_real</emphasis>(-1.0);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(c, d, 1e-14)) { <emphasis role="strong">return</emphasis> 25; }

  <emphasis>/* exp */</emphasis>
  c=<emphasis role="strong">igraph_complex_exp</emphasis>(<emphasis role="strong">igraph_complex</emphasis>(0.0, M_PI));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(c, <emphasis role="strong">igraph_complex</emphasis>(-1.0, 0.0), 1e-14)) { 
    <emphasis role="strong">return</emphasis> 26;
  }

  <emphasis>/* pow */</emphasis>  
  c=<emphasis role="strong">igraph_complex_pow</emphasis>(<emphasis role="strong">igraph_complex</emphasis>(M_E, 0.0), <emphasis role="strong">igraph_complex</emphasis>(0.0, M_PI));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(c, <emphasis role="strong">igraph_complex</emphasis>(-1.0, 0.0), 1e-14)) { 
    <emphasis role="strong">return</emphasis> 27;
  }

  <emphasis>/* pow_real */</emphasis>
  c=<emphasis role="strong">igraph_complex_pow_real</emphasis>(a, 2.0);
  d=<emphasis role="strong">igraph_complex_mul</emphasis>(a,a);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(c, d, 1e-12)) { <emphasis role="strong">return</emphasis> 28; }  

  <emphasis>/* log */</emphasis>
  c=<emphasis role="strong">igraph_complex_exp</emphasis>(<emphasis role="strong">igraph_complex_log</emphasis>(a));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(a, c, 1e-14)) { <emphasis role="strong">return</emphasis> 29; }

  <emphasis>/* log10 */</emphasis>
  c=<emphasis role="strong">igraph_complex_pow</emphasis>(<emphasis role="strong">igraph_complex</emphasis>(10.0, 0), <emphasis role="strong">igraph_complex_log10</emphasis>(a));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(a, c, 1e-14)) { <emphasis role="strong">return</emphasis> 30; }
  
  <emphasis>/* log_b */</emphasis>
  c=<emphasis role="strong">igraph_complex_pow</emphasis>(b, <emphasis role="strong">igraph_complex_log_b</emphasis>(a, b));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(a, c, 1e-14)) { <emphasis role="strong">return</emphasis> 31; }

  <emphasis>/* sin, cos */</emphasis>
  c=<emphasis role="strong">igraph_complex_sin</emphasis>(a);
  d=<emphasis role="strong">igraph_complex_cos</emphasis>(a);
  e=<emphasis role="strong">igraph_complex_add</emphasis>(<emphasis role="strong">igraph_complex_mul</emphasis>(c,c), <emphasis role="strong">igraph_complex_mul</emphasis>(d,d));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(e, <emphasis role="strong">igraph_complex</emphasis>(1.0, 0.0), 1e-11)) { 
    <emphasis role="strong">return</emphasis> 32;
  }

  <emphasis>/* tan */</emphasis>
  c=<emphasis role="strong">igraph_complex_tan</emphasis>(a);
  d=<emphasis role="strong">igraph_complex_div</emphasis>(<emphasis role="strong">igraph_complex_sin</emphasis>(a), <emphasis role="strong">igraph_complex_cos</emphasis>(a));
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_complex_eq_tol</emphasis>(c, d, 1e-14)) { <emphasis role="strong">return</emphasis> 33; }

  <emphasis>/* sec */</emphasis>

  <emphasis>/* csc */</emphasis>

  <emphasis>/* cot */</emphasis>

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
