<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

void <emphasis role="strong">show_results</emphasis>(igraph_t *g, <link linkend='igraph_vector_t'>igraph_vector_t</link> *mod, igraph_matrix_t *merges, FILE* f) {
  long int i;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> membership;

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;membership, 0);

  i=<emphasis role="strong"><link linkend='igraph_vector_which_max'>igraph_vector_which_max</link></emphasis>(mod);
  <emphasis role="strong">fprintf</emphasis>(f, "Modularity:  %f\n", <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*mod)[i]);
  <emphasis role="strong"><link linkend='igraph_community_to_membership'>igraph_community_to_membership</link></emphasis>(merges, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(g), i, &amp;membership, 0);
  <emphasis role="strong">printf</emphasis>("Membership: ");
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;membership); i++) {
    <emphasis role="strong">printf</emphasis>("%li ", (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(membership)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;membership);
}

int <emphasis role="strong">main</emphasis>() {
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> modularity, weights;
  igraph_matrix_t merges;
  FILE *f;

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;modularity,0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;merges,0,0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;weights,0);

  <emphasis>/* Simple unweighted graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 10, IGRAPH_UNDIRECTED, 
	       0,1,0,2,0,3,0,4, 1,2,1,3,1,4, 2,3,2,4, 3,4,
	       5,6,5,7,5,8,5,9, 6,7,6,8,6,9, 7,8,7,9, 8,9,
           0,5, -1);
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, 0, &amp;merges, &amp;modularity, <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout); 

  <emphasis>/* Same simple graph, with uniform edge weights */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_resize'>igraph_vector_resize</link></emphasis>(&amp;weights, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g));
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;weights, 2);
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, &amp;weights, &amp;merges, &amp;modularity, 
			      <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout); 
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Simple nonuniform weighted graph, with and without weights */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 6, IGRAPH_UNDIRECTED, 
	       0,1,1,2,2,3,2,4,2,5,3,4,3,5,4,5, -1);
  <emphasis role="strong"><link linkend='igraph_vector_resize'>igraph_vector_resize</link></emphasis>(&amp;weights, 8);
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;weights, 1);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(weights)[0] = 10; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(weights)[1] = 10;
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, 0, &amp;merges, &amp;modularity, <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout); 
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, &amp;weights, &amp;merges, &amp;modularity, 
			      <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout); 
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Zachary Karate club */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 0, IGRAPH_UNDIRECTED, 
	       0,  1,  0,  2,  0,  3,  0,  4,  0,  5,
	       0,  6,  0,  7,  0,  8,  0, 10,  0, 11,
	       0, 12,  0, 13,  0, 17,  0, 19,  0, 21,
	       0, 31,  1,  2,  1,  3,  1,  7,  1, 13,
	       1, 17,  1, 19,  1, 21,  1, 30,  2,  3,
	       2,  7,  2,  8,  2,  9,  2, 13,  2, 27,
	       2, 28,  2, 32,  3,  7,  3, 12,  3, 13,
	       4,  6,  4, 10,  5,  6,  5, 10,  5, 16,
	       6, 16,  8, 30,  8, 32,  8, 33,  9, 33,
	       13, 33, 14, 32, 14, 33, 15, 32, 15, 33,
	       18, 32, 18, 33, 19, 33, 20, 32, 20, 33,
	       22, 32, 22, 33, 23, 25, 23, 27, 23, 29,
	       23, 32, 23, 33, 24, 25, 24, 27, 24, 31,
	       25, 31, 26, 29, 26, 33, 27, 33, 28, 31,
	       28, 33, 29, 32, 29, 33, 30, 32, 30, 33,
	       31, 32, 31, 33, 32, 33,
	       -1);
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, 0, &amp;merges, &amp;modularity, 
			      <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout); 
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
   
  <emphasis>/* Simple disconnected graph with isolates */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 9, IGRAPH_UNDIRECTED,
	       0,  1,  0,  2,  0,  3,  1,  2,  1,  3,  2,  3,
	       4,  5,  4,  6,  4,  7,  5,  6,  5,  7,  6,  7,
	       -1);
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, 0, &amp;merges, &amp;modularity, <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout); 
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Disjoint union of two rings */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 20, IGRAPH_UNDIRECTED,
           0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,0,9,
	   10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,10,19,-1);
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, 0, &amp;merges, &amp;modularity, <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Completely empty graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 10, IGRAPH_UNDIRECTED, -1);
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, 0, &amp;merges, &amp;modularity, <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Ring graph with loop edges */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 6, IGRAPH_UNDIRECTED,
          0,1,1,2,2,3,3,4,4,5,5,0,0,0,2,2,-1);
  <emphasis role="strong"><link linkend='igraph_community_fastgreedy'>igraph_community_fastgreedy</link></emphasis>(&amp;g, 0, &amp;merges, &amp;modularity, <emphasis>/*membership=*/</emphasis> 0);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;modularity, &amp;merges, stdout);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;modularity);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;weights);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;merges);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
