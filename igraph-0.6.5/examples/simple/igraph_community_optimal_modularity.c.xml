<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2010-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  igraph_t graph;

  <link linkend='igraph_vector_t'>igraph_vector_t</link> v;
  igraph_real_t edges[] = { 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8,
			    0,10, 0,11, 0,12, 0,13, 0,17, 0,19, 0,21, 0,31,
			    1, 2, 1, 3, 1, 7, 1,13, 1,17, 1,19, 1,21, 1,30,
			    2, 3, 2, 7, 2,27, 2,28, 2,32, 2, 9, 2, 8, 2,13,
			    3, 7, 3,12, 3,13, 4, 6, 4,10, 5, 6, 5,10, 5,16,
			    6,16, 8,30, 8,32, 8,33, 9,33,13,33,14,32,14,33,
			    15,32,15,33,18,32,18,33,19,33,20,32,20,33,
			    22,32,22,33,23,25,23,27,23,32,23,33,23,29,
			    24,25,24,27,24,31,25,31,26,29,26,33,27,33,
			    28,31,28,33,29,32,29,33,30,32,30,33,31,32,31,33,
			    32,33
  };

  <link linkend='igraph_vector_t'>igraph_vector_t</link> membership;
  igraph_real_t modularity;
  igraph_bool_t simple;
  int retval;

  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;v, edges, <emphasis role="strong">sizeof</emphasis>(edges)/<emphasis role="strong">sizeof</emphasis>(double));
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;graph, &amp;v, 0, IGRAPH_UNDIRECTED);
  
  <emphasis role="strong"><link linkend='igraph_is_simple'>igraph_is_simple</link></emphasis>(&amp;graph, &amp;simple);
  <emphasis role="strong">if</emphasis> (!simple) { <emphasis role="strong">return</emphasis> 1; }

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;membership, 0);

  <emphasis role="strong"><link linkend='igraph_set_error_handler'>igraph_set_error_handler</link></emphasis>(&amp;<link linkend='igraph_error_handler_printignore'>igraph_error_handler_printignore</link>);

  <emphasis>/* Zachary karate club */</emphasis>
  retval = <emphasis role="strong"><link linkend='igraph_community_optimal_modularity'>igraph_community_optimal_modularity</link></emphasis>(&amp;graph, &amp;modularity,
    &amp;membership, <emphasis>/*verbose=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (retval == IGRAPH_UNIMPLEMENTED) { <emphasis role="strong">return</emphasis> 77; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(modularity - 0.4197896) &gt; 0.0000001) { <emphasis role="strong">return</emphasis> 2; }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;graph);

  <emphasis>/* simple graph with loop edges */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;graph, 6, IGRAPH_UNDIRECTED,
          0,1,1,2,2,3,3,4,4,5,5,0,0,0,2,2,-1);
  <emphasis role="strong"><link linkend='igraph_community_optimal_modularity'>igraph_community_optimal_modularity</link></emphasis>(&amp;graph, &amp;modularity,
    &amp;membership, <emphasis>/*verbose=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(modularity - 0.28125) &gt; 0.0000001) { <emphasis role="strong">return</emphasis> 3; }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;graph);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;membership);

  <emphasis role="strong">return</emphasis> 0;
}

</programlisting>
