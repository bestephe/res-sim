<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {

  igraph_t g;
  <emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link> v=IGRAPH_VECTOR_NULL;
  igraph_real_t edges[] = { 0,1, 1,2, 2,2, 2,3, 2,4, 3,4 };
  <link linkend='igraph_vector_t'>igraph_vector_t</link> v2, v3;
  long int i;
  igraph_vit_t vit;
  igraph_vs_t vs;
  igraph_integer_t size;

  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;v, edges, <emphasis role="strong">sizeof</emphasis>(edges)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;g, &amp;v, 0, IGRAPH_DIRECTED);

  <emphasis>/* Create iterator based on a vector (view) */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v2, 6);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[0]=0;   <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[1]=2;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[2]=4;   <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[3]=0;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[4]=2;   <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[5]=4;

  <emphasis role="strong"><link linkend='igraph_vit_create'>igraph_vit_create</link></emphasis>(&amp;g, <emphasis role="strong"><link linkend='igraph_vss_vector'>igraph_vss_vector</link></emphasis>(&amp;v2), &amp;vit);

  i=0;
  <emphasis role="strong">while</emphasis> (!<emphasis role="strong"><link linkend='IGRAPH_VIT_END'>IGRAPH_VIT_END</link></emphasis>(vit)) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='IGRAPH_VIT_GET'>IGRAPH_VIT_GET</link></emphasis>(vit) != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[i]) {
      <emphasis role="strong">return</emphasis> 1;
    }
    <emphasis role="strong"><link linkend='IGRAPH_VIT_NEXT'>IGRAPH_VIT_NEXT</link></emphasis>(vit);
    i++;
  }
  <emphasis role="strong">if</emphasis> (i != <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v2)) {
    <emphasis role="strong">return</emphasis> 2;
  }

  <emphasis role="strong"><link linkend='igraph_vit_destroy'>igraph_vit_destroy</link></emphasis>(&amp;vit);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v2);

  <emphasis>/* Create small vector iterator */</emphasis>

  <emphasis role="strong"><link linkend='igraph_vs_vector_small'>igraph_vs_vector_small</link></emphasis>(&amp;vs, 0, 2, 4, 0, 2, 4, 2, -1);
  <emphasis role="strong"><link linkend='igraph_vit_create'>igraph_vit_create</link></emphasis>(&amp;g, vs, &amp;vit);
  <emphasis role="strong"><link linkend='igraph_vs_size'>igraph_vs_size</link></emphasis>(&amp;g, &amp;vs, &amp;size);
  <emphasis role="strong">printf</emphasis>("%li ", (long int) size);
  <emphasis role="strong">for</emphasis> (; !<emphasis role="strong"><link linkend='IGRAPH_VIT_END'>IGRAPH_VIT_END</link></emphasis>(vit); <emphasis role="strong"><link linkend='IGRAPH_VIT_NEXT'>IGRAPH_VIT_NEXT</link></emphasis>(vit)) {
    <emphasis role="strong">printf</emphasis>("%li ", (long int) <emphasis role="strong"><link linkend='IGRAPH_VIT_GET'>IGRAPH_VIT_GET</link></emphasis>(vit));
  }
  <emphasis role="strong">printf</emphasis>("\n");
  
  <emphasis role="strong"><link linkend='igraph_vit_destroy'>igraph_vit_destroy</link></emphasis>(&amp;vit);
  <emphasis role="strong"><link linkend='igraph_vs_destroy'>igraph_vs_destroy</link></emphasis>(&amp;vs);

  <emphasis>/* Clean up */</emphasis>

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
