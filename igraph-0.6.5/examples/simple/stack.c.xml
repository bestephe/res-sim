<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_stack.h&gt;

int <emphasis role="strong">main</emphasis>() {

  igraph_stack_t st;
  int i;

  <emphasis>/* igraph_stack_init, igraph_stack_destroy */</emphasis>
  <emphasis role="strong"><link linkend='igraph_stack_init'>igraph_stack_init</link></emphasis>(&amp;st, 0);
  <emphasis role="strong"><link linkend='igraph_stack_destroy'>igraph_stack_destroy</link></emphasis>(&amp;st);
  <emphasis role="strong"><link linkend='igraph_stack_init'>igraph_stack_init</link></emphasis>(&amp;st, 10);
  <emphasis role="strong"><link linkend='igraph_stack_destroy'>igraph_stack_destroy</link></emphasis>(&amp;st);

  <emphasis>/* igraph_stack_reserve */</emphasis>
  <emphasis role="strong"><link linkend='igraph_stack_init'>igraph_stack_init</link></emphasis>(&amp;st, 0);
  <emphasis role="strong"><link linkend='igraph_stack_reserve'>igraph_stack_reserve</link></emphasis>(&amp;st, 10);
  <emphasis role="strong"><link linkend='igraph_stack_reserve'>igraph_stack_reserve</link></emphasis>(&amp;st, 5);

  <emphasis>/* igraph_stack_empty */</emphasis>
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_stack_empty'>igraph_stack_empty</link></emphasis>(&amp;st)) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong"><link linkend='igraph_stack_push'>igraph_stack_push</link></emphasis>(&amp;st, 1);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_stack_empty'>igraph_stack_empty</link></emphasis>(&amp;st)) {
    <emphasis role="strong">return</emphasis> 2;
  }

  <emphasis>/* igraph_stack_size */</emphasis>
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_stack_size'>igraph_stack_size</link></emphasis>(&amp;st) != 1) {
    <emphasis role="strong">return</emphasis> 3;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong"><link linkend='igraph_stack_push'>igraph_stack_push</link></emphasis>(&amp;st, i);
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_stack_size'>igraph_stack_size</link></emphasis>(&amp;st) != 11) {
    <emphasis role="strong">return</emphasis> 4;
  }

  <emphasis>/* igraph_stack_clear */</emphasis>
  <emphasis role="strong"><link linkend='igraph_stack_clear'>igraph_stack_clear</link></emphasis>(&amp;st);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_stack_empty'>igraph_stack_empty</link></emphasis>(&amp;st)) {
    <emphasis role="strong">return</emphasis> 5;
  }
  <emphasis role="strong"><link linkend='igraph_stack_push'>igraph_stack_push</link></emphasis>(&amp;st, 100);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_stack_pop'>igraph_stack_pop</link></emphasis>(&amp;st) != 100) {
    <emphasis role="strong">return</emphasis> 6;
  }
  <emphasis role="strong"><link linkend='igraph_stack_clear'>igraph_stack_clear</link></emphasis>(&amp;st);
  <emphasis role="strong"><link linkend='igraph_stack_clear'>igraph_stack_clear</link></emphasis>(&amp;st);

  <emphasis>/* igraph_stack_push, igraph_stack_pop */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;100; i++) {
    <emphasis role="strong"><link linkend='igraph_stack_push'>igraph_stack_push</link></emphasis>(&amp;st, 100-i);
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;100; i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_stack_pop'>igraph_stack_pop</link></emphasis>(&amp;st) != i+1) {
      <emphasis role="strong">return</emphasis> 7;
    }
  }
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_stack_empty'>igraph_stack_empty</link></emphasis>(&amp;st)) {
    <emphasis role="strong">return</emphasis> 8;
  }
  
  <emphasis role="strong"><link linkend='igraph_stack_destroy'>igraph_stack_destroy</link></emphasis>(&amp;st);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_FINALLY_STACK_SIZE</emphasis>() != 0) <emphasis role="strong">return</emphasis> 9;

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
