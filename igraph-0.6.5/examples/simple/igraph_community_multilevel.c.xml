<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* vim:set ts=2 sts=2 sw=2 et: */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

void <emphasis role="strong">show_results</emphasis>(igraph_t *g, <link linkend='igraph_vector_t'>igraph_vector_t</link> *membership, igraph_matrix_t *memberships, <link linkend='igraph_vector_t'>igraph_vector_t</link> *modularity, FILE* f) {
  long int i, j, no_of_nodes = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(g);

  j=<emphasis role="strong"><link linkend='igraph_vector_which_max'>igraph_vector_which_max</link></emphasis>(modularity);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(membership); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*membership)[i] != <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(*memberships, j, i)) {
      <emphasis role="strong">fprintf</emphasis>(f, "WARNING: best membership vector element %li does not match the best one in the membership matrix\n", i);
    }
  }

  <emphasis role="strong">fprintf</emphasis>(f, "Modularities:\n");
  <emphasis role="strong">igraph_vector_print</emphasis>(modularity);

  <emphasis role="strong">for</emphasis> (i=0; i &lt; <emphasis role="strong"><link linkend='igraph_matrix_nrow'>igraph_matrix_nrow</link></emphasis>(memberships); i++) {
    <emphasis role="strong">for</emphasis> (j=0; j &lt; no_of_nodes; j++) {
      <emphasis role="strong">fprintf</emphasis>(f, "%ld ", (long int)<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(*memberships, i, j));
    }
    <emphasis role="strong">fprintf</emphasis>(f, "\n");
  }

  <emphasis role="strong">fprintf</emphasis>(f, "\n");
}

int <emphasis role="strong">main</emphasis>() {
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> modularity, membership, edges;
  igraph_matrix_t memberships;
  int i, j, k;
  FILE *f;

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;modularity,0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;membership,0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;memberships,0,0);

  <emphasis>/* Unweighted test graph from the paper of Blondel et al */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 16, IGRAPH_UNDIRECTED,
      0, 2, 0, 3, 0, 4, 0, 5,
      1, 2, 1, 4, 1, 7,
      2, 4, 2, 5, 2, 6,
      3, 7,
      4, 10,
      5, 7, 5, 11,
      6, 7, 6, 11,
      8, 9, 8, 10, 8, 11, 8, 14, 8, 15,
      9, 12, 9, 14,
      10, 11, 10, 12, 10, 13, 10, 14,
      11, 13,
      -1);
  <emphasis role="strong"><link linkend='igraph_community_multilevel'>igraph_community_multilevel</link></emphasis>(&amp;g, 0, &amp;membership, &amp;memberships, &amp;modularity);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;membership, &amp;memberships, &amp;modularity, stdout);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Ring of 30 cliques */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;edges,0);
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; 30; i++) {
    <emphasis role="strong">for</emphasis> (j = 0; j &lt; 5; j++) {
      <emphasis role="strong">for</emphasis> (k = j+1; k &lt; 5; k++) {
        <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;edges, i*5+j);
        <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;edges, i*5+k);
      }
    }
  }
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; 30; i++) {
    <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;edges, i*5 % 150);
    <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;edges, (i*5+6) % 150);
  }
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;g, &amp;edges, 150, 0);
  <emphasis role="strong"><link linkend='igraph_community_multilevel'>igraph_community_multilevel</link></emphasis>(&amp;g, 0, &amp;membership, &amp;memberships, &amp;modularity);
  <emphasis role="strong">show_results</emphasis>(&amp;g, &amp;membership, &amp;memberships, &amp;modularity, stdout);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;modularity);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;membership);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;edges);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;memberships);

<emphasis role="strong">#ifdef</emphasis> __APPLE__
  <emphasis role="strong">return</emphasis> 0;
<emphasis role="strong">#else</emphasis>
  <emphasis role="strong">return</emphasis> 77;
<emphasis role="strong">#endif</emphasis>
}
</programlisting>
