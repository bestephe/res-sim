<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/*</emphasis>
<emphasis>  Test suite for stochastic imitation via roulette wheel selection.</emphasis>
<emphasis>  Copyright (C) 2011 Minh Van Nguyen </emphasis>&lt;nguyenminh2@gmail.com&gt;

<emphasis>  This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>  it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>  the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>  (at your option) any later version.</emphasis>

<emphasis>  This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>  but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>  GNU General Public License for more details.</emphasis>

<emphasis>  You should have received a copy of the GNU General Public License</emphasis>
<emphasis>  along with this program; if not, write to the Free Software</emphasis>
<emphasis>  Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA</emphasis>
<emphasis>  02110-1301 USA</emphasis>
<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdio.h&gt;
<emphasis role="strong">#include</emphasis> &lt;time.h&gt;

<emphasis role="strong">#define</emphasis> <emphasis role="strong">R_INTEGER</emphasis>(a,b) (<emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), (a), (b)))

<emphasis>/* test parameters structure */</emphasis>
<emphasis role="strong">typedef</emphasis> <emphasis role="strong">struct</emphasis> {
  igraph_t *graph;
  igraph_integer_t vertex;
  igraph_bool_t islocal;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> *quantities;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> *strategies;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> *known_strats;
  igraph_neimode_t mode;
  int retval;
} strategy_test_t;

<emphasis>/* Error tests. That is, we expect error codes to be returned from such tests.</emphasis>
<emphasis> */</emphasis>
int <emphasis role="strong">error_tests</emphasis>() {
  igraph_t g, gzero, h;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> quant, quantzero, strat, stratzero;
  int i, n, nvert, ret;
  strategy_test_t *test;

  <emphasis>/* nonempty graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, <emphasis>/*nvert=*/</emphasis> 0, IGRAPH_UNDIRECTED, 0,1, 1,2, 2,0, -1);
  <emphasis role="strong"><link linkend='igraph_empty'>igraph_empty</link></emphasis>(&amp;h, 0, 0);         <emphasis>/* empty graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;quant, 1);  <emphasis>/* quantities vector */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;strat, 2);  <emphasis>/* strategies vector */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;gzero, <emphasis>/*nvert=*/</emphasis> 0, IGRAPH_UNDIRECTED,
               0,3, 0,4, 1,2, 1,4, 1,5, 2,3, 2,4, 3,4, -1);
  nvert = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;gzero);
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;stratzero, nvert, 1.0, 0.0, 1.0, 2.0, 0.0, 3.0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;quantzero, nvert);  <emphasis>/* vector of zeros */</emphasis>

  <emphasis>/* test parameters */</emphasis>
  <emphasis>/*graph--vert--islocal--quantities--strategies--known_strats--mode--retval*/</emphasis>
  <emphasis>/* null pointer for graph */</emphasis>
  strategy_test_t null_graph = {NULL, 0, 1, NULL, NULL, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* null pointer for quantities vector */</emphasis>
  strategy_test_t null_quant = {&amp;g, 0, 1, NULL, NULL, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* null pointer for strategies vector */</emphasis>
  strategy_test_t null_strat = {&amp;g, 0, 1, &amp;quant, NULL, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* empty graph */</emphasis>
  strategy_test_t empty_graph = {&amp;h, 0, 1, &amp;quant, &amp;strat, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* length of quantities vector different from number of vertices */</emphasis>
  strategy_test_t qdiff_length = {&amp;g, 0, 1, &amp;quant, &amp;strat, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* length of strategies vector different from number of vertices */</emphasis>
  strategy_test_t sdiff_length = {&amp;g, 0, 1, &amp;quant, &amp;strat, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* quantities vector contains all zeros */</emphasis>
  strategy_test_t zero_quant = {&amp;gzero, 4, 1, &amp;quantzero, &amp;stratzero, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  strategy_test_t *all_checks[] = {<emphasis>/* 1 */</emphasis> &amp;null_graph,
                                   <emphasis>/* 2 */</emphasis> &amp;null_quant,
                                   <emphasis>/* 3 */</emphasis> &amp;null_strat,
                                   <emphasis>/* 4 */</emphasis> &amp;empty_graph,
                                   <emphasis>/* 5 */</emphasis> &amp;qdiff_length,
                                   <emphasis>/* 6 */</emphasis> &amp;sdiff_length,
                                   <emphasis>/* 7 */</emphasis> &amp;zero_quant};

  <emphasis>/* Run the error tests. We expect error to be raised for each test. */</emphasis>
  <emphasis role="strong"><link linkend='igraph_set_error_handler'>igraph_set_error_handler</link></emphasis>(<link linkend='igraph_error_handler_ignore'>igraph_error_handler_ignore</link>);
  n = 7;
  i = 0;
  <emphasis role="strong">while</emphasis> (i &lt; n) {
    test = all_checks[i];
    ret = <emphasis role="strong"><link linkend='igraph_roulette_wheel_imitation'>igraph_roulette_wheel_imitation</link></emphasis>(test-&gt;graph, test-&gt;vertex,
                                          test-&gt;islocal, test-&gt;quantities,
                                          test-&gt;strategies, test-&gt;mode);
    <emphasis role="strong">if</emphasis> (ret != test-&gt;retval) {
      <emphasis role="strong">printf</emphasis>("Error test no. %d failed.\n", (int)(i + 1));
      <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
    }
    i++;
  }
  <emphasis>/* clean up */</emphasis>
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;gzero);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;h);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quant);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quantzero);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;strat);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratzero);

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}

<emphasis>/* A game on a graph with 5 vertices and 7 edges. Use roulette wheel selection</emphasis>
<emphasis> * to update strategies. This example also illustrates how a choice of</emphasis>
<emphasis> * perspective (whether local or global) could affect the range of</emphasis>
<emphasis> * possible strategies a vertex could adopt.</emphasis>
<emphasis> */</emphasis>
int <emphasis role="strong">roulette_test</emphasis>() {
  igraph_t g;
  igraph_bool_t success;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> *known, quant, strat, stratcopy;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> known0, known1, known2, known3, known4, known5;
  int i, k, n, nvert, ret;;
  strategy_test_t *test;

  <emphasis>/* the game network */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, <emphasis>/*nvert=*/</emphasis> 0, IGRAPH_UNDIRECTED,
               0,3, 0,4, 1,2, 1,4, 1,5, 2,3, 2,4, 3,4, -1);
  nvert = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g);
  <emphasis>/* strategies vector; the strategy space is {0, 1, 2, 3} */</emphasis>
  <emphasis>/* V[i] is strategy of vertex i */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;strat, nvert, 1.0, 0.0, 1.0, 2.0, 0.0, 3.0);
  <emphasis>/* quantities vector; V[i] is quantity of vertex i */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;quant, nvert, 0.56, 0.13, 0.26, 0.73, 0.67, 0.82);
  <emphasis>/* possible strategies each vertex can adopt */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;known0, <emphasis>/*n=*/</emphasis> 3, 0.0, 1.0, 2.0);       <emphasis>/* local */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;known1, <emphasis>/*n=*/</emphasis> 3, 0.0, 1.0, 3.0);       <emphasis>/* local */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;known2, <emphasis>/*n=*/</emphasis> 3, 0.0, 1.0, 2.0);       <emphasis>/* local */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;known3, <emphasis>/*n=*/</emphasis> 3, 0.0, 1.0, 2.0);       <emphasis>/* local */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;known4, <emphasis>/*n=*/</emphasis> 3, 0.0, 1.0, 2.0);       <emphasis>/* local */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;known5, <emphasis>/*n=*/</emphasis> 4, 0.0, 1.0, 2.0, 3.0);  <emphasis>/* global */</emphasis>

  <emphasis>/* test parameters */</emphasis>
  <emphasis>/*graph--vert--islocal--quantities--strategies--known_strats--mode-retval*/</emphasis>
  strategy_test_t game0 = {&amp;g, 0, 1, &amp;quant, NULL, &amp;known0, IGRAPH_ALL, IGRAPH_SUCCESS};
  strategy_test_t game1 = {&amp;g, 1, 1, &amp;quant, NULL, &amp;known1, IGRAPH_ALL, IGRAPH_SUCCESS};
  strategy_test_t game2 = {&amp;g, 2, 1, &amp;quant, NULL, &amp;known2, IGRAPH_ALL, IGRAPH_SUCCESS};
  strategy_test_t game3 = {&amp;g, 3, 1, &amp;quant, NULL, &amp;known3, IGRAPH_ALL, IGRAPH_SUCCESS};
  strategy_test_t game4 = {&amp;g, 4, 1, &amp;quant, NULL, &amp;known4, IGRAPH_ALL, IGRAPH_SUCCESS};
  strategy_test_t game5 = {&amp;g, 5, 0, &amp;quant, NULL, &amp;known5, IGRAPH_ALL, IGRAPH_SUCCESS};
  strategy_test_t *all_checks[] = {<emphasis>/* 1 */</emphasis> &amp;game0,
                                   <emphasis>/* 2 */</emphasis> &amp;game1,
                                   <emphasis>/* 3 */</emphasis> &amp;game2,
                                   <emphasis>/* 4 */</emphasis> &amp;game3,
                                   <emphasis>/* 5 */</emphasis> &amp;game4,
                                   <emphasis>/* 6 */</emphasis> &amp;game5};

  <emphasis>/* play game */</emphasis>
  n = 6;
  i = 0;
  <emphasis role="strong">while</emphasis> (i &lt; n) {
    test = all_checks[i];
    <emphasis role="strong"><link linkend='igraph_vector_copy'>igraph_vector_copy</link></emphasis>(&amp;stratcopy, &amp;strat);
    ret = <emphasis role="strong"><link linkend='igraph_roulette_wheel_imitation'>igraph_roulette_wheel_imitation</link></emphasis>(test-&gt;graph, test-&gt;vertex,
                                          test-&gt;islocal, test-&gt;quantities,
                                          &amp;stratcopy, test-&gt;mode);
    <emphasis role="strong">if</emphasis> (ret != test-&gt;retval) {
      <emphasis role="strong">printf</emphasis>("Test no. %d failed.\n", i + 1);
      <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
    }
    <emphasis>/* If the revised strategy s matches one of the candidate strategies, */</emphasis>
    <emphasis>/* then success. If s doesn't match any of the possible strategies, then */</emphasis>
    <emphasis>/* failure. Default to failure. */</emphasis>
    success = 0;
    known = test-&gt;known_strats;
    <emphasis role="strong">for</emphasis> (k = 0; k &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(known); k++) {
      <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*known)[k] == <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(stratcopy)[test-&gt;vertex]) {
        success = 1;
        <emphasis role="strong">break</emphasis>;
      }
    }
    <emphasis role="strong">if</emphasis> (!success) {
      <emphasis role="strong">printf</emphasis>("Roulette wheel imitation failed for vertex %d.\n",
             (int)test-&gt;vertex);
      <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
    }
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratcopy);
    i++;
  }
  <emphasis>/* game finished; pack up */</emphasis>
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;known0);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;known1);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;known2);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;known3);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;known4);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;known5);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quant);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;strat);

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}

<emphasis>/* It is possible for a vertex to retain its current strategy. This can</emphasis>
<emphasis> * happen both in the local and global perspectives.</emphasis>
<emphasis> */</emphasis>
int <emphasis role="strong">retain_strategy_test</emphasis>() {
  igraph_t g;
  igraph_integer_t max, min, v;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> quant, strat, stratcp;
  int i, ntry, nvert;

  <emphasis>/* the game network */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, <emphasis>/*nvert=*/</emphasis> 0, IGRAPH_UNDIRECTED,
               0,3, 0,4, 1,2, 1,4, 1,5, 2,3, 2,4, 3,4, -1);
  nvert = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g);
  <emphasis>/* strategies vector; the strategy space is {0, 1, 2, 3} */</emphasis>
  <emphasis>/* V[i] is strategy of vertex i */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;strat, nvert, 1.0, 0.0, 1.0, 2.0, 0.0, 3.0);
  <emphasis>/* quantities vector; V[i] is quantity of vertex i */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;quant, nvert, 0.56, 0.13, 0.26, 0.73, 0.67, 0.82);

  <emphasis>/* random vertex */</emphasis>
  min = 0;
  max = 5;
  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), <emphasis role="strong">time</emphasis>(0));
  v = <emphasis role="strong">R_INTEGER</emphasis>(min, max);  <emphasis>/* min &lt;= v &lt;= max */</emphasis>
  <emphasis>/* Ensure that it is possible for v to retain its current strategy. We */</emphasis>
  <emphasis>/* will try to do this at most ntry times. As there are at most 6 vertices */</emphasis>
  <emphasis>/* to choose from, it shouldn't take long before we encounter a strategy */</emphasis>
  <emphasis>/* revision round where v retains its current strategy. */</emphasis>
  <emphasis>/* With local perspective. */</emphasis>
  i = 0;
  ntry = 100;
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;stratcp, 0);
  <emphasis role="strong">do</emphasis> {
    i++;
    <emphasis role="strong">if</emphasis> (i &gt; ntry)
      <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;  <emphasis>/* ideally this should never happen */</emphasis>
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratcp);
    <emphasis role="strong"><link linkend='igraph_vector_copy'>igraph_vector_copy</link></emphasis>(&amp;stratcp, &amp;strat);
    <emphasis role="strong"><link linkend='igraph_roulette_wheel_imitation'>igraph_roulette_wheel_imitation</link></emphasis>(&amp;g, v, <emphasis>/*is local?*/</emphasis> 1, &amp;quant, &amp;stratcp,
                                    IGRAPH_ALL);
  }
  <emphasis role="strong">while</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(stratcp)[v] != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(strat)[v]);
  <emphasis>/* If we get to this point, we know that there was an update round */</emphasis>
  <emphasis>/* i &lt;= ntry as a result of which v retains its current strategy. */</emphasis>
  <emphasis>/* Now try again, but this time with the global perspective. */</emphasis>
  i = 0;
  <emphasis role="strong">do</emphasis> {
    i++;
    <emphasis role="strong">if</emphasis> (i &gt; ntry)
      <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;  <emphasis>/* ideally this should never happen */</emphasis>
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratcp);
    <emphasis role="strong"><link linkend='igraph_vector_copy'>igraph_vector_copy</link></emphasis>(&amp;stratcp, &amp;strat);
    <emphasis role="strong"><link linkend='igraph_roulette_wheel_imitation'>igraph_roulette_wheel_imitation</link></emphasis>(&amp;g, v, <emphasis>/*is local?*/</emphasis> 0, &amp;quant, &amp;stratcp,
                                    IGRAPH_ALL);
  }
  <emphasis role="strong">while</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(stratcp)[v] != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(strat)[v]);
  <emphasis>/* nothing further to do, but housekeeping */</emphasis>
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quant);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;strat);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratcp);

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}

int <emphasis role="strong">main</emphasis>() {
  int ret;

  ret = <emphasis role="strong">error_tests</emphasis>();
  <emphasis role="strong">if</emphasis> (ret)
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  ret = <emphasis role="strong">roulette_test</emphasis>();
  <emphasis role="strong">if</emphasis> (ret)
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  ret = <emphasis role="strong">retain_strategy_test</emphasis>();
  <emphasis role="strong">if</emphasis> (ret)
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}
</programlisting>
