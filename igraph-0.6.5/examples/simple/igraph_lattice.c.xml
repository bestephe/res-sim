<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

<emphasis role="strong">typedef</emphasis> <emphasis role="strong">struct</emphasis> {
  int dim;
  int m;
  int nei;
  igraph_bool_t directed, mutual, circular;
  igraph_real_t *dimedges;
} lat_test_t;

<emphasis role="strong">#define</emphasis> <emphasis role="strong">LAT_TEST</emphasis>(id, d, m, ne, di, mu, ci, ...) \
  igraph_real_t lat_ ## id ## _edges[] = { __VA_ARGS__ } ; \
  lat_test_t lat_ ## id = { d, m, ne, di, mu, ci, lat_ ## id ## _edges }

<emphasis>/*----------------d--m--ne-di-mu-ci-dimedges------------------------*/</emphasis>
<emphasis role="strong">LAT_TEST</emphasis>(u_0,     0, 0, 1, 0, 0, 0,  -1 );
<emphasis role="strong">LAT_TEST</emphasis>(u_01,    1, 0, 1, 0, 0, 0,  0 );
<emphasis role="strong">LAT_TEST</emphasis>(u_02,    2, 0, 1, 0, 0, 0,  0, 1 );
<emphasis role="strong">LAT_TEST</emphasis>(u_03,    2, 0, 1, 0, 0, 0,  1, 0 );

<emphasis role="strong">LAT_TEST</emphasis>(d_0,     0, 0, 1, 1, 0, 0,  -1 );
<emphasis role="strong">LAT_TEST</emphasis>(d_01,    1, 0, 1, 1, 0, 0,  0 );
<emphasis role="strong">LAT_TEST</emphasis>(d_02,    2, 0, 1, 1, 0, 0,  0, 1 );
<emphasis role="strong">LAT_TEST</emphasis>(d_03,    2, 0, 1, 1, 0, 0,  1, 0 );

<emphasis role="strong">LAT_TEST</emphasis>(u_1,     1, 0, 1, 0, 0, 0,  1 );
<emphasis role="strong">LAT_TEST</emphasis>(u_1x1,   2, 0, 1, 0, 0, 0,  1, 1 );
<emphasis role="strong">LAT_TEST</emphasis>(u_2,     1, 1, 1, 0, 0, 0,  2, 0,1 );
<emphasis role="strong">LAT_TEST</emphasis>(u_2x1,   2, 1, 1, 0, 0, 0,  2,1, 0,1 );
<emphasis role="strong">LAT_TEST</emphasis>(u_2x2,   2, 4, 1, 0, 0, 0,  2,2, 0,1, 0,2, 1,3, 2,3 );

<emphasis role="strong">LAT_TEST</emphasis>(uc_1,    1, 0, 1, 0, 0, 1,  1 );
<emphasis role="strong">LAT_TEST</emphasis>(uc_1x1,  2, 0, 1, 0, 0, 1,  1, 1 );
<emphasis role="strong">LAT_TEST</emphasis>(uc_2,    1, 1, 1, 0, 0, 1,  2, 0,1 );
<emphasis role="strong">LAT_TEST</emphasis>(uc_2x1,  2, 1, 1, 0, 0, 1,  2,1, 0,1 );
<emphasis role="strong">LAT_TEST</emphasis>(uc_2x2,  2, 4, 1, 0, 0, 1,  2,2, 0,1, 0,2, 1,3, 2,3 );

<emphasis role="strong">LAT_TEST</emphasis>(dc_1,    1, 0, 1, 1, 0, 1,  1 );
<emphasis role="strong">LAT_TEST</emphasis>(dc_1x1,  2, 0, 1, 1, 0, 1,  1, 1 );
<emphasis role="strong">LAT_TEST</emphasis>(dc_2,    1, 2, 1, 1, 0, 1,  2, 0,1, 1,0 );
<emphasis role="strong">LAT_TEST</emphasis>(dc_2x1,  2, 2, 1, 1, 0, 1,  2,1, 0,1, 1,0 );
<emphasis role="strong">LAT_TEST</emphasis>(dc_2x2,  2, 8, 1, 1, 0, 1,  2,2, 0,1, 0,2, 1,3, 2,3, 
	                             1,0, 2,0, 3,1, 3,2, );

<emphasis role="strong">LAT_TEST</emphasis>(d_1,     1, 0, 1, 1, 0, 0,  1 );
<emphasis role="strong">LAT_TEST</emphasis>(d_1x1,   2, 0, 1, 1, 0, 0,  1, 1 );
<emphasis role="strong">LAT_TEST</emphasis>(d_2,     1, 1, 1, 1, 0, 0,  2, 0,1 );
<emphasis role="strong">LAT_TEST</emphasis>(d_2x1,   2, 1, 1, 1, 0, 0,  2,1, 0,1 );
<emphasis role="strong">LAT_TEST</emphasis>(d_2x2,   2, 4, 1, 1, 0, 0,  2,2, 0,1, 0,2, 1,3, 2,3 );

<emphasis role="strong">LAT_TEST</emphasis>(dmc_1,   1, 0, 1, 1, 0, 1,  1 );
<emphasis role="strong">LAT_TEST</emphasis>(dmc_1x1, 2, 0, 1, 1, 0, 1,  1, 1 );
<emphasis role="strong">LAT_TEST</emphasis>(dmc_2,   1, 2, 1, 1, 0, 1,  2, 0,1, 1,0 );
<emphasis role="strong">LAT_TEST</emphasis>(dmc_2x1, 2, 2, 1, 1, 0, 1,  2,1, 0,1, 1,0 );
<emphasis role="strong">LAT_TEST</emphasis>(dmc_2x2, 2, 4, 1, 1, 0, 1,  2,2, 0,1, 0,2, 1,3, 2,3, 
				     1,0, 3,2, );
<emphasis>/*----------------d--m--ne-di-mu-ci-dimedges------------------------*/</emphasis>

<emphasis>/* </emphasis><emphasis role="strong">TODO:</emphasis><emphasis> add more */</emphasis>

lat_test_t *all_checks[] = { <emphasis>/*  1 */</emphasis> &amp;lat_u_0,   <emphasis>/*  2 */</emphasis> &amp;lat_u_01,
			     <emphasis>/*  3 */</emphasis> &amp;lat_u_02,  <emphasis>/*  4 */</emphasis> &amp;lat_u_03,
			     <emphasis>/*  5 */</emphasis> &amp;lat_d_0,   <emphasis>/*  6 */</emphasis> &amp;lat_d_01,
			     <emphasis>/*  7 */</emphasis> &amp;lat_d_02,  <emphasis>/*  8 */</emphasis> &amp;lat_d_03,
			     <emphasis>/*  9 */</emphasis> &amp;lat_u_1,   <emphasis>/* 10 */</emphasis> &amp;lat_u_1x1,
			     <emphasis>/* 11 */</emphasis> &amp;lat_u_2,   <emphasis>/* 12 */</emphasis> &amp;lat_u_2x1,
			     <emphasis>/* 13 */</emphasis> &amp;lat_u_2x2, <emphasis>/* 14 */</emphasis> &amp;lat_u_1,
			     <emphasis>/* 15 */</emphasis> &amp;lat_u_1x1, <emphasis>/* 16 */</emphasis> &amp;lat_u_2,
			     <emphasis>/* 17 */</emphasis> &amp;lat_u_2x1, <emphasis>/* 18 */</emphasis> &amp;lat_uc_2x2,
			     <emphasis>/* 19 */</emphasis> &amp;lat_dc_1,  <emphasis>/* 20 */</emphasis> &amp;lat_dc_1x1,
			     <emphasis>/* 21 */</emphasis> &amp;lat_dc_2,  <emphasis>/* 22 */</emphasis> &amp;lat_dc_2x1,
			     <emphasis>/* 23 */</emphasis> &amp;lat_dc_2x2,<emphasis>/* 24 */</emphasis> &amp;lat_d_1,
			     <emphasis>/* 25 */</emphasis> &amp;lat_d_1x1, <emphasis>/* 26 */</emphasis> &amp;lat_d_2,
			     <emphasis>/* 27 */</emphasis> &amp;lat_d_2x1, <emphasis>/* 28 */</emphasis> &amp;lat_d_2x2,
			     <emphasis>/* 29 */</emphasis> &amp;lat_dc_2x2,<emphasis>/* 30 */</emphasis> &amp;lat_d_1,
			     <emphasis>/* 31 */</emphasis> &amp;lat_d_1x1, <emphasis>/* 32 */</emphasis> &amp;lat_d_2,
			     <emphasis>/* 33 */</emphasis> &amp;lat_d_2x1, <emphasis>/* 34 */</emphasis> &amp;lat_d_2x2,
			     0 };

int <emphasis role="strong">check_lattice_properties</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *lattice,
			     <emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link> *dim, 
			     igraph_bool_t directed, 
			     igraph_bool_t mutual, 
			     igraph_bool_t circular) {
  igraph_bool_t res;

  <emphasis>/* Connected */</emphasis>
  <emphasis role="strong"><link linkend='igraph_is_connected'>igraph_is_connected</link></emphasis>(lattice, &amp;res, IGRAPH_WEAK); 
  <emphasis role="strong">if</emphasis> (!res) {
    <emphasis role="strong">printf</emphasis>("Not connected\n");
    <emphasis role="strong">return</emphasis> 1;
  }

  <emphasis>/* Simple */</emphasis>
  <emphasis role="strong"><link linkend='igraph_is_simple'>igraph_is_simple</link></emphasis>(lattice, &amp;res); 
  <emphasis role="strong">if</emphasis> (!res) {
    <emphasis role="strong">printf</emphasis>("Not simple\n");
    <emphasis role="strong">return</emphasis> 2;
  }

  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">check_lattice</emphasis>(<emphasis role="strong">const</emphasis> lat_test_t *test) {
  igraph_t graph, othergraph;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> otheredges;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> dimvector;
  igraph_bool_t iso;
  int ret;  
    
  <emphasis>/* Create lattice */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;dimvector, test-&gt;dimedges, test-&gt;dim);
  <emphasis role="strong"><link linkend='igraph_lattice'>igraph_lattice</link></emphasis>(&amp;graph, &amp;dimvector, test-&gt;nei, test-&gt;directed,
		 test-&gt;mutual, test-&gt;circular);

  <emphasis>/* Check its properties */</emphasis>
  <emphasis role="strong">if</emphasis> (ret=<emphasis role="strong">check_lattice_properties</emphasis>(&amp;graph, &amp;dimvector, test-&gt;directed, 
				   test-&gt;mutual, test-&gt;circular)) {
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;graph);
    <emphasis role="strong">printf</emphasis>("Lattice properties are not satisfied\n");
    <emphasis role="strong">return</emphasis> ret;
  }
  
  <emphasis>/* Check that it is isomorphic to the stored graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;otheredges, test-&gt;dimedges+test-&gt;dim, test-&gt;m * 2);
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;othergraph, &amp;otheredges, <emphasis role="strong"><link linkend='igraph_vector_prod'>igraph_vector_prod</link></emphasis>(&amp;dimvector),
		test-&gt;directed);
  <emphasis role="strong"><link linkend='igraph_isomorphic'>igraph_isomorphic</link></emphasis>(&amp;graph, &amp;othergraph, &amp;iso);
  <emphasis role="strong">if</emphasis> (!iso) {
    <emphasis role="strong">printf</emphasis>("--\n");
    <emphasis role="strong"><link linkend='igraph_write_graph_edgelist'>igraph_write_graph_edgelist</link></emphasis>(&amp;graph, stdout);
    <emphasis role="strong">printf</emphasis>("--\n");
    <emphasis role="strong"><link linkend='igraph_write_graph_edgelist'>igraph_write_graph_edgelist</link></emphasis>(&amp;othergraph, stdout);
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;graph);
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;othergraph);
    <emphasis role="strong">return</emphasis> 50;    
  }  

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;graph);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;othergraph);
  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {
  int i, ret;

  i=0;
  <emphasis role="strong">while</emphasis> (all_checks[i]) {
    <emphasis role="strong">if</emphasis> ((ret=<emphasis role="strong">check_lattice</emphasis>(all_checks[i]))) { 
      <emphasis role="strong">printf</emphasis>("Check no #%d failed.\n", (int) (i+1));
      <emphasis role="strong">return</emphasis> ret;
    }
    i++;
  }

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
