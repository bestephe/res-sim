<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2007-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> "igraph.h"

<emphasis role="strong">#include</emphasis> &lt;math.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> v, weights;
  long int i;
  igraph_real_t value;
  <link linkend='igraph_arpack_options_t'>igraph_arpack_options_t</link> options;
  
  <emphasis role="strong"><link linkend='igraph_star'>igraph_star</link></emphasis>(&amp;g, 100, IGRAPH_STAR_UNDIRECTED, 0);

  <emphasis role="strong"><link linkend='igraph_arpack_options_init'>igraph_arpack_options_init</link></emphasis>(&amp;options);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 0);
  <emphasis role="strong"><link linkend='igraph_eigenvector_centrality'>igraph_eigenvector_centrality</link></emphasis>(&amp;g, &amp;v, &amp;value, <emphasis>/*directed=*/</emphasis> 0, 
				<emphasis>/*scale=*/</emphasis>0, <emphasis>/*weights=*/</emphasis>0, 
				&amp;options);

  <emphasis role="strong">if</emphasis> (options.info != 0) {
    <emphasis role="strong">return</emphasis> 1;
  }

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong">printf</emphasis>(" %.3f", <emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]));
  }
  <emphasis role="strong">printf</emphasis>("\n");
  
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Special cases: check for empty graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_empty'>igraph_empty</link></emphasis>(&amp;g, 10, 0);
  <emphasis role="strong"><link linkend='igraph_eigenvector_centrality'>igraph_eigenvector_centrality</link></emphasis>(&amp;g, &amp;v, &amp;value, 0, 0, 0, &amp;options);
  <emphasis role="strong">if</emphasis> (value != 0.0) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong">printf</emphasis>(" %.2f", <emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]));
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Special cases: check for full graph, zero weights */</emphasis>
  <emphasis role="strong"><link linkend='igraph_full'>igraph_full</link></emphasis>(&amp;g, 10, 0, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;weights, 45);
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;weights, 0);
  <emphasis role="strong"><link linkend='igraph_eigenvector_centrality'>igraph_eigenvector_centrality</link></emphasis>(&amp;g, &amp;v, &amp;value, 0, 0, &amp;weights, &amp;options);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;weights);
  <emphasis role="strong">if</emphasis> (value != 0.0) {
    <emphasis role="strong">return</emphasis> 2;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong">printf</emphasis>(" %.2f", <emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]));
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
