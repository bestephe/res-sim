<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2010-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;time.h&gt;

<emphasis role="strong">#define</emphasis> DIM 10

igraph_bool_t <emphasis role="strong">check_ev</emphasis>(<emphasis role="strong">const</emphasis> igraph_matrix_t *A, 
		       <emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link> *values,
		       <emphasis role="strong">const</emphasis> igraph_matrix_t *vectors, igraph_real_t tol) {
  <link linkend='igraph_vector_t'>igraph_vector_t</link> v, y;
  int i, j;
  int m=<emphasis role="strong"><link linkend='igraph_matrix_ncol'>igraph_matrix_ncol</link></emphasis>(vectors);
  int n=<emphasis role="strong"><link linkend='igraph_matrix_nrow'>igraph_matrix_nrow</link></emphasis>(A);
  
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_matrix_ncol'>igraph_matrix_ncol</link></emphasis>(A) != n)       { <emphasis role="strong">return</emphasis> 1; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(values) != m)  { <emphasis role="strong">return</emphasis> 1; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_matrix_nrow'>igraph_matrix_nrow</link></emphasis>(vectors) != n) { <emphasis role="strong">return</emphasis> 1; }

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;y, n);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;m; i++) {
    <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;v, &amp;<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(*vectors, 0, i), n);
    <emphasis role="strong"><link linkend='igraph_vector_update'>igraph_vector_update</link></emphasis>(&amp;y, &amp;v);
    <emphasis role="strong"><link linkend='igraph_blas_dgemv'>igraph_blas_dgemv</link></emphasis>(<emphasis>/*transpose=*/</emphasis> 0, <emphasis>/*alpha=*/</emphasis> 1.0, A, &amp;v, 
		      <emphasis>/*beta=*/</emphasis> -<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*values)[i], &amp;y);
    <emphasis role="strong">for</emphasis> (j=0; j&lt;n; j++) {
      <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(y)[i]) &gt; tol) {
	<emphasis role="strong">printf</emphasis>("Matrix:\n"); <emphasis role="strong">igraph_matrix_print</emphasis>(A);
	<emphasis role="strong">printf</emphasis>("lambda= %g\n", <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*values)[i]);
	<emphasis role="strong">printf</emphasis>("v= "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;v);
	<emphasis role="strong">printf</emphasis>("residual: "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;y);
	<emphasis role="strong">return</emphasis> 1; 
      }
    }
  }
  
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;y);
  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {

  igraph_matrix_t A;
  igraph_matrix_t vectors, vectors2;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> values, values2;
  int i, j;
  int il, iu;
  igraph_real_t vl, vu;
  
  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42);
  
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;A, DIM, DIM);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors, 0, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values, 0);

  <emphasis>/* All eigenvalues and eigenvectors */</emphasis>

  <emphasis role="strong">for</emphasis> (i=0; i&lt;DIM; i++) {
    <emphasis role="strong">for</emphasis> (j=i; j&lt;DIM; j++) {
      <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, i, j) = <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(A, j, i) = 
	<emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 1, 10);
    }
  }
  
  <emphasis role="strong"><link linkend='igraph_lapack_dsyevr'>igraph_lapack_dsyevr</link></emphasis>(&amp;A, IGRAPH_LAPACK_DSYEV_ALL, <emphasis>/*vl=*/</emphasis> 0, <emphasis>/*vu=*/</emphasis> 0,
		       <emphasis>/*vestimate=*/</emphasis> 0, <emphasis>/*il=*/</emphasis> 0, <emphasis>/*iu=*/</emphasis> 0, 
		       <emphasis>/*abstol=*/</emphasis> 1e-10, &amp;values, &amp;vectors, <emphasis>/*support=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;values) != DIM) { <emphasis role="strong">return</emphasis> 1; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_matrix_nrow'>igraph_matrix_nrow</link></emphasis>(&amp;vectors) != DIM || 
      <emphasis role="strong"><link linkend='igraph_matrix_ncol'>igraph_matrix_ncol</link></emphasis>(&amp;vectors) != DIM) { <emphasis role="strong">return</emphasis> 2; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">check_ev</emphasis>(&amp;A, &amp;values, &amp;vectors, <emphasis>/*tol=*/</emphasis> 1e-8)) { <emphasis role="strong">return</emphasis> 3; }

  <emphasis>/* Only a subset */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors2, 0, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values2, 0);

  il=2; iu=5;
  <emphasis role="strong"><link linkend='igraph_lapack_dsyevr'>igraph_lapack_dsyevr</link></emphasis>(&amp;A, IGRAPH_LAPACK_DSYEV_SELECT, <emphasis>/*vl=*/</emphasis> 0, <emphasis>/*vu=*/</emphasis> 0,
		       <emphasis>/*vestimate=*/</emphasis> 0, <emphasis>/*il=*/</emphasis> il, <emphasis>/*iu=*/</emphasis> iu, 
		       <emphasis>/*abstol=*/</emphasis> 1e-10, &amp;values2, &amp;vectors2, 
		       <emphasis>/*support=*/</emphasis> 0);
  
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;values2) != iu-il+1) { <emphasis role="strong">return</emphasis> 4; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_matrix_nrow'>igraph_matrix_nrow</link></emphasis>(&amp;vectors2) != DIM ||
      <emphasis role="strong"><link linkend='igraph_matrix_ncol'>igraph_matrix_ncol</link></emphasis>(&amp;vectors2) != iu-il+1) { <emphasis role="strong">return</emphasis> 5; }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;iu-il+1; i++) {
    igraph_real_t m1=1.0;

    <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[il+i-1] - <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values2)[i]) &gt; 1e-8) {
      <emphasis role="strong">printf</emphasis>("Full:   "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values);
      <emphasis role="strong">printf</emphasis>("Subset: "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values2);
      <emphasis role="strong">return</emphasis> 6;
    }

    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, 0, il+i-1) * <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors2, 0, i) &lt; 0) {
      m1=-1.0;
    } <emphasis role="strong">else</emphasis> { 
      m1=1.0;
    }

    <emphasis role="strong">for</emphasis> (j=0; j&lt;DIM; j++) {
      <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, j, il+i-1) - 
	       m1 * <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors2, j, i)) &gt; 1e-8) {
	<emphasis role="strong">printf</emphasis>("Full:\n"); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
	<emphasis role="strong">printf</emphasis>("Subset:\n"); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors2);
	<emphasis role="strong">return</emphasis> 7;
      }
    }
  }

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values2);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors2);
  
  <emphasis>/* Subset based on an interval */</emphasis>

  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;vectors2, 0, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;values2, 0);

  il=2; iu=5;
  vl = (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[il-1] + <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[il-2]) / 2.0;   
  vu = (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[iu] + <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[iu-1]) / 2.0;

  <emphasis role="strong"><link linkend='igraph_lapack_dsyevr'>igraph_lapack_dsyevr</link></emphasis>(&amp;A, IGRAPH_LAPACK_DSYEV_INTERVAL, vl, vu, 
		       <emphasis>/*vestimate=*/</emphasis> iu-il+1, <emphasis>/*il=*/</emphasis> 0, <emphasis>/*iu=*/</emphasis> 0, 
		       <emphasis>/*abstol=*/</emphasis> 1e-10, &amp;values2, &amp;vectors2, 
		       <emphasis>/*support=*/</emphasis> 0);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;values2) != iu-il+1) { <emphasis role="strong">return</emphasis> 4; }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_matrix_nrow'>igraph_matrix_nrow</link></emphasis>(&amp;vectors2) != DIM ||
      <emphasis role="strong"><link linkend='igraph_matrix_ncol'>igraph_matrix_ncol</link></emphasis>(&amp;vectors2) != iu-il+1) { <emphasis role="strong">return</emphasis> 5; }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;iu-il+1; i++) {
    igraph_real_t m1=1.0;

    <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[il+i-1] - <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values2)[i]) &gt; 1e-8) {
      <emphasis role="strong">printf</emphasis>("Full:   "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values);
      <emphasis role="strong">printf</emphasis>("Subset: "); <emphasis role="strong">igraph_vector_print</emphasis>(&amp;values2);
      <emphasis role="strong">return</emphasis> 6;
    }

    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, 0, il+i-1) * <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors2, 0, i) &lt; 0) {
      m1=-1.0;
    } <emphasis role="strong">else</emphasis> { 
      m1=1.0;
    }

    <emphasis role="strong">for</emphasis> (j=0; j&lt;DIM; j++) {
      <emphasis role="strong">if</emphasis> (<emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, j, il+i-1) - 
	       m1 * <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors2, j, i)) &gt; 1e-8) {
	<emphasis role="strong">printf</emphasis>("Full:\n"); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors);
	<emphasis role="strong">printf</emphasis>("Subset:\n"); <emphasis role="strong">igraph_matrix_print</emphasis>(&amp;vectors2);
	<emphasis role="strong">return</emphasis> 7;
      }
    }
  }  

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values2);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors2);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;values);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;vectors);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;A);

  <emphasis role="strong">return</emphasis> 0;
}

</programlisting>
