<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2009-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

igraph_bool_t <emphasis role="strong">bfs_callback</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *graph,
			   igraph_integer_t vid, 
			   igraph_integer_t pred, 
			   igraph_integer_t succ,
			   igraph_integer_t rank,
			   igraph_integer_t dist,
			   void *extra) {
  <emphasis role="strong">printf</emphasis>(" %li", (long int) vid);
  <emphasis role="strong">return</emphasis> 0;
}		   

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t graph, ring;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> order, rank, father, pred, succ, dist;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> restricted;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> roots;
  long int i;
  
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ring, 10, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis> 1);
  <emphasis role="strong"><link linkend='igraph_disjoint_union'>igraph_disjoint_union</link></emphasis>(&amp;graph, &amp;ring, &amp;ring);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring);
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;order, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;rank, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;father, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;pred, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;succ, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;dist, 0);
  
  <emphasis role="strong"><link linkend='igraph_bfs'>igraph_bfs</link></emphasis>(&amp;graph, <emphasis>/*root=*/</emphasis>0, <emphasis>/*roots=*/</emphasis> 0, <emphasis>/*neimode=*/</emphasis> IGRAPH_OUT, 
	     <emphasis>/*unreachable=*/</emphasis> 1, <emphasis>/*restricted=*/</emphasis> 0,
	     &amp;order, &amp;rank, &amp;father, &amp;pred, &amp;succ, &amp;dist, 
	     <emphasis>/*callback=*/</emphasis> 0, <emphasis>/*extra=*/</emphasis> 0);
  
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;order);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;rank);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;father);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;pred);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;succ);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;dist);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;order);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;rank);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;father);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;pred);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;succ);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;dist);

  <emphasis>/* Test the callback */</emphasis>

  <emphasis role="strong"><link linkend='igraph_bfs'>igraph_bfs</link></emphasis>(&amp;graph, <emphasis>/*root=*/</emphasis> 0, <emphasis>/*roots=*/</emphasis> 0, <emphasis>/*neimode=*/</emphasis> IGRAPH_OUT, 
	     <emphasis>/*unreachable=*/</emphasis> 1, <emphasis>/*restricted=*/</emphasis> 0,
	     0, 0, 0, 0, 0, 0, &amp;bfs_callback, 0);
  <emphasis role="strong">printf</emphasis>("\n");
  
  <emphasis>/* Test different roots */</emphasis>

  <emphasis role="strong"><link linkend='igraph_bfs'>igraph_bfs</link></emphasis>(&amp;graph, <emphasis>/*root=*/</emphasis> 2, <emphasis>/*roots=*/</emphasis> 0, <emphasis>/*neimode=*/</emphasis> IGRAPH_OUT, 
	     <emphasis>/*unreachable=*/</emphasis> 1, <emphasis>/*restricted=*/</emphasis> 0,
	     0, 0, 0, 0, 0, 0, &amp;bfs_callback, 0);
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis>/* Test restricted */</emphasis>

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;restricted, 0);
  <emphasis role="strong">for</emphasis> (i=5; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;graph); i++) {
    <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;restricted, i);
  }
  <emphasis role="strong"><link linkend='igraph_bfs'>igraph_bfs</link></emphasis>(&amp;graph, <emphasis>/*root=*/</emphasis> 5, <emphasis>/*roots=*/</emphasis> 0, <emphasis>/*neimode=*/</emphasis> IGRAPH_OUT, 
	     <emphasis>/*unreachable=*/</emphasis> 1, &amp;restricted,
	     0, 0, 0, 0, 0, 0, &amp;bfs_callback, 0);
  <emphasis role="strong">printf</emphasis>("\n");  

  <emphasis>/* Root not in restricted set */</emphasis>

  <emphasis role="strong"><link linkend='igraph_bfs'>igraph_bfs</link></emphasis>(&amp;graph, <emphasis>/*root=*/</emphasis> 4, <emphasis>/*roots=*/</emphasis> 0, <emphasis>/*neimode=*/</emphasis> IGRAPH_OUT, 
	     <emphasis>/*unreachable=*/</emphasis> 1, &amp;restricted,
	     0, 0, 0, 0, 0, 0, &amp;bfs_callback, 0);
  <emphasis role="strong">printf</emphasis>("\n");  

  <emphasis role="strong"><link linkend='igraph_bfs'>igraph_bfs</link></emphasis>(&amp;graph, <emphasis>/*root=*/</emphasis> 3, <emphasis>/*roots=*/</emphasis> 0, <emphasis>/*neimode=*/</emphasis> IGRAPH_OUT, 
	     <emphasis>/*unreachable=*/</emphasis> 0, &amp;restricted,
	     0, 0, 0, 0, 0, 0, &amp;bfs_callback, 0);
  <emphasis role="strong">printf</emphasis>("\n");  

  <emphasis>/* Multiple root vertices */</emphasis>

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;roots, 3);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(roots)[0]=3; 
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(roots)[1]=4;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(roots)[2]=6;
  <emphasis role="strong"><link linkend='igraph_bfs'>igraph_bfs</link></emphasis>(&amp;graph, <emphasis>/*root=*/</emphasis> -1, &amp;roots, <emphasis>/*neimode=*/</emphasis> IGRAPH_OUT, 
	     <emphasis>/*unreachable=*/</emphasis> 0, &amp;restricted,
	     0, 0, 0, 0, 0, 0, &amp;bfs_callback, 0);
  <emphasis role="strong">printf</emphasis>("\n");    

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;roots);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;restricted);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;graph);
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
