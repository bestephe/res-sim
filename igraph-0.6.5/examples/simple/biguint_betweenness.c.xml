<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2009-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

int <emphasis role="strong">check</emphasis>(<emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link> *v1, <emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link> *v2, int code) {
  <link linkend='igraph_vector_t'>igraph_vector_t</link> v;
  long int i, n=<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(v1);
  igraph_real_t m;

  <emphasis role="strong"><link linkend='igraph_vector_copy'>igraph_vector_copy</link></emphasis>(&amp;v, v1);
  <emphasis role="strong"><link linkend='igraph_vector_sub'>igraph_vector_sub</link></emphasis>(&amp;v, v2);
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;n; i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i] = <emphasis role="strong">fabs</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i]);
  }
  
  <emphasis role="strong">if</emphasis> ( (m=<emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;v)) &gt; 0.01) { 
    <emphasis role="strong">printf</emphasis>("Difference: %g\n", m);
    <emphasis role="strong">exit</emphasis>(code); 
  }

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> bet, bet2, weights, edges;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> bbet, bbet2;
  
  igraph_real_t nontriv[] = { 0, 19, 0, 16, 0, 20, 1, 19, 2, 5, 3, 7, 3, 8, 
			      4, 15, 4, 11, 5, 8, 5, 19, 6, 7, 6, 10, 6, 8, 
			      6, 9, 7, 20, 9, 10, 9, 20, 10, 19, 
			      11, 12, 11, 20, 12, 15, 13, 15, 
			      14, 18, 14, 16, 14, 17, 15, 16, 17, 18 };
  
  igraph_real_t nontriv_weights[] = { 0.5249, 1, 0.1934, 0.6274, 0.5249, 
				      0.0029, 0.3831, 0.05, 0.6274, 0.3831, 
				      0.5249, 0.0587, 0.0579, 0.0562, 0.0562, 
				      0.1934, 0.6274, 0.6274, 0.6274, 0.0418, 
				      0.6274, 0.3511, 0.3511, 0.1486, 1, 1, 
				      0.0711, 0.2409 };

  igraph_real_t nontriv_res[] = { 20, 0, 0, 0, 0, 19, 80, 85, 32, 0, 10, 
				  75, 70, 0, 36, 81, 60, 0, 19, 19, 86 };

  <emphasis>/*******************************************************/</emphasis>

  <emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(<emphasis>/* graph= */</emphasis>    &amp;g,
		       <emphasis>/* n= */</emphasis>        1000,
		       <emphasis>/* power= */</emphasis>    1,
		       <emphasis>/* m= */</emphasis>        3,
		       <emphasis>/* outseq= */</emphasis>   0,
		       <emphasis>/* outpref= */</emphasis>  0,
		       <emphasis>/* A= */</emphasis>        1,
		       <emphasis>/* directed= */</emphasis> 0, 
		       <emphasis>/* algo= */</emphasis>     IGRAPH_BARABASI_BAG,
		       <emphasis>/* start_from= */</emphasis> 0);
  
  <emphasis role="strong"><link linkend='igraph_simplify'>igraph_simplify</link></emphasis>(&amp;g, <emphasis>/* multiple= */</emphasis> 1, <emphasis>/* loops= */</emphasis> 1, <emphasis>/*edge_comb=*/</emphasis> 0);
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bet, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bbet, 0);
  
  <emphasis role="strong"><link linkend='igraph_betweenness_estimate'>igraph_betweenness_estimate</link></emphasis>(<emphasis>/* graph=     */</emphasis> &amp;g,
			      <emphasis>/* res=       */</emphasis> &amp;bet,
			      <emphasis>/* vids=      */</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			      <emphasis>/* directed = */</emphasis> 0,
			      <emphasis>/* cutoff=    */</emphasis> 2,
			      <emphasis>/* weights=   */</emphasis> 0, 
			      <emphasis>/* nobigint=  */</emphasis> 1);

  <emphasis role="strong"><link linkend='igraph_betweenness_estimate'>igraph_betweenness_estimate</link></emphasis>(<emphasis>/* graph=     */</emphasis> &amp;g,
			      <emphasis>/* res=       */</emphasis> &amp;bbet,
			      <emphasis>/* vids=      */</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			      <emphasis>/* directed = */</emphasis> 0,
			      <emphasis>/* cutoff=    */</emphasis> 2,
			      <emphasis>/* weights=   */</emphasis> 0, 
			      <emphasis>/* nobigint=  */</emphasis> 0);  

  <emphasis role="strong">check</emphasis>(&amp;bet, &amp;bbet, 10);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bet);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bbet);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/*******************************************************/</emphasis>

  <emphasis role="strong"><link linkend='igraph_tree'>igraph_tree</link></emphasis>(&amp;g, 20000, 10, IGRAPH_TREE_UNDIRECTED);
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bet, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bbet, 0);
  
  <emphasis role="strong"><link linkend='igraph_betweenness_estimate'>igraph_betweenness_estimate</link></emphasis>(<emphasis>/* graph=     */</emphasis> &amp;g,
			      <emphasis>/* res=       */</emphasis> &amp;bet,
			      <emphasis>/* vids=      */</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			      <emphasis>/* directed = */</emphasis> 0,
			      <emphasis>/* cutoff=    */</emphasis> 3,
			      <emphasis>/* weights=   */</emphasis> 0, 
			      <emphasis>/* nobigint=  */</emphasis> 1);

  <emphasis role="strong"><link linkend='igraph_betweenness_estimate'>igraph_betweenness_estimate</link></emphasis>(<emphasis>/* graph=     */</emphasis> &amp;g,
			      <emphasis>/* res=       */</emphasis> &amp;bbet,
			      <emphasis>/* vids=      */</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			      <emphasis>/* directed = */</emphasis> 0,
			      <emphasis>/* cutoff=    */</emphasis> 3,
			      <emphasis>/* weights=   */</emphasis> 0, 
			      <emphasis>/* nobigint=  */</emphasis> 0);

  <emphasis role="strong">check</emphasis>(&amp;bet, &amp;bbet, 20);

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bet2, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bbet2, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;weights, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g));
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;weights, 1.0);
  
  <emphasis role="strong"><link linkend='igraph_betweenness_estimate'>igraph_betweenness_estimate</link></emphasis>(<emphasis>/* graph=     */</emphasis> &amp;g,
			      <emphasis>/* res=       */</emphasis> &amp;bet2,
			      <emphasis>/* vids=      */</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			      <emphasis>/* directed = */</emphasis> 0,
			      <emphasis>/* cutoff=    */</emphasis> 3,
			      <emphasis>/* weights=   */</emphasis> &amp;weights, 
			      <emphasis>/* nobigint=  */</emphasis> 1);

  <emphasis role="strong"><link linkend='igraph_betweenness_estimate'>igraph_betweenness_estimate</link></emphasis>(<emphasis>/* graph=     */</emphasis> &amp;g,
			      <emphasis>/* res=       */</emphasis> &amp;bbet2,
			      <emphasis>/* vids=      */</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			      <emphasis>/* directed = */</emphasis> 0,
			      <emphasis>/* cutoff=    */</emphasis> 3,
			      <emphasis>/* weights=   */</emphasis> &amp;weights, 
			      <emphasis>/* nobigint=  */</emphasis> 0);

  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_all_e'>igraph_vector_all_e</link></emphasis>(&amp;bet, &amp;bet2)) {
    <emphasis role="strong">return</emphasis> 1;
  }

<emphasis>/*   if (!igraph_vector_all_e(&amp;bbet, &amp;bbet2)) { */</emphasis>
<emphasis>/*     return 2; */</emphasis>
<emphasis>/*   } */</emphasis>

  <emphasis role="strong">check</emphasis>(&amp;bet, &amp;bbet, 30);
  <emphasis role="strong">check</emphasis>(&amp;bet2, &amp;bbet2, 40);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bet);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bet2);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bbet);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bbet2);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;weights);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Non-trivial weighted graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;edges, nontriv, <emphasis role="strong">sizeof</emphasis>(nontriv)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;g, &amp;edges, 0, <emphasis>/* directed= */</emphasis> 0);
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;weights, nontriv_weights, 
		     <emphasis role="strong">sizeof</emphasis>(nontriv_weights)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bet, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;bbet, 0);

  <emphasis role="strong"><link linkend='igraph_betweenness'>igraph_betweenness</link></emphasis>(<emphasis>/*graph=*/</emphasis> &amp;g, <emphasis>/*res=*/</emphasis> &amp;bet, <emphasis>/*vids=*/</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), 
		     <emphasis>/*directed=*/</emphasis>0, <emphasis>/*weights=*/</emphasis> &amp;weights, <emphasis>/*nobigint=*/</emphasis> 1);

  <emphasis role="strong"><link linkend='igraph_betweenness'>igraph_betweenness</link></emphasis>(<emphasis>/*graph=*/</emphasis> &amp;g, <emphasis>/*res=*/</emphasis> &amp;bbet, <emphasis>/*vids=*/</emphasis> <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), 
		     <emphasis>/*directed=*/</emphasis>0, <emphasis>/*weights=*/</emphasis> &amp;weights, <emphasis>/*nobigint=*/</emphasis> 0);

  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;bet2, nontriv_res, 
		     <emphasis role="strong">sizeof</emphasis>(nontriv_res)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));

  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_all_e'>igraph_vector_all_e</link></emphasis>(&amp;bet, &amp;bet2)) {
    <emphasis role="strong">return</emphasis> 2;
  }

  <emphasis role="strong">check</emphasis>(&amp;bet, &amp;bbet, 50);
  
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bet);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;bbet);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_FINALLY_STACK_SIZE</emphasis>() != 0) <emphasis role="strong">return</emphasis> 3;

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
