<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* vim:set ts=2 sw=2 sts=2 et: */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

void <emphasis role="strong">check_nrgeo</emphasis>(igraph_t *graph, igraph_vs_t vs,
                 igraph_vector_ptr_t* paths,
                 <link linkend='igraph_vector_t'>igraph_vector_t</link>* nrgeo) {
  long int i, n;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> nrgeo2, *path;
  igraph_vit_t vit;

  n = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(graph);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;nrgeo2, n);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(nrgeo) != n) {
    <emphasis role="strong">printf</emphasis>("nrgeo vector length must be %ld, was %ld", n,
        <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(nrgeo));
    <emphasis role="strong">return</emphasis>;
  }

  n = <emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(paths);
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; n; i++) {
    path = <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*paths)[i];
    <emphasis role="strong">if</emphasis> (path == 0) {
      <emphasis role="strong">printf</emphasis>("Null path found in result vector at index %ld\n", i);
      <emphasis role="strong">return</emphasis>;
    }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(path) == 0) {
      <emphasis role="strong">printf</emphasis>("Empty path found in result vector at index %ld\n", i);
      <emphasis role="strong">return</emphasis>;
    }
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(nrgeo2)[(long int)<emphasis role="strong"><link linkend='igraph_vector_tail'>igraph_vector_tail</link></emphasis>(path)] += 1;
  }

  <emphasis role="strong"><link linkend='igraph_vit_create'>igraph_vit_create</link></emphasis>(graph, vs, &amp;vit);
  <emphasis role="strong">for</emphasis> (<emphasis role="strong"><link linkend='IGRAPH_VIT_RESET'>IGRAPH_VIT_RESET</link></emphasis>(vit); !<emphasis role="strong"><link linkend='IGRAPH_VIT_END'>IGRAPH_VIT_END</link></emphasis>(vit); <emphasis role="strong"><link linkend='IGRAPH_VIT_NEXT'>IGRAPH_VIT_NEXT</link></emphasis>(vit)) {
    long int node = <emphasis role="strong"><link linkend='IGRAPH_VIT_GET'>IGRAPH_VIT_GET</link></emphasis>(vit);
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*nrgeo)[node] - <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(nrgeo2)[node]) {
      <emphasis role="strong">printf</emphasis>("nrgeo[%ld] invalid, observed = %ld, expected = %ld\n",
          node, (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*nrgeo)[node], (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(nrgeo2)[node]);
    }
  }
  <emphasis role="strong"><link linkend='igraph_vit_destroy'>igraph_vit_destroy</link></emphasis>(&amp;vit);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;nrgeo2);
}

int <emphasis role="strong">main</emphasis>() {

  igraph_t g;
  igraph_vector_ptr_t res;
  long int i;
  igraph_real_t weights[] = { 1, 2, 3, 4, 5, 1, 1, 1, 1, 1 }; 
  igraph_real_t weights2[] = { 0,2,1, 0,5,2, 1,1,0, 2,2,8, 1,1,3, 1,1,4, 2,1 };
  igraph_real_t dim[] = { 4, 4 };

  <link linkend='igraph_vector_t'>igraph_vector_t</link> weights_vec, dim_vec, nrgeo;
  igraph_vs_t vs;

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;nrgeo, 0);

  <emphasis>/* Simple ring graph without weights */</emphasis>

  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;g, 10, IGRAPH_UNDIRECTED, 0, 1);
  
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;res, 5);
  <emphasis role="strong"><link linkend='igraph_vs_vector_small'>igraph_vs_vector_small</link></emphasis>(&amp;vs, 1, 3, 4, 5, 2, 1,  -1);
  
  <emphasis role="strong"><link linkend='igraph_get_all_shortest_paths_dijkstra'>igraph_get_all_shortest_paths_dijkstra</link></emphasis>(&amp;g, <emphasis>/*res=*/</emphasis> &amp;res, 
				     <emphasis>/*nrgeo=*/</emphasis> &amp;nrgeo, <emphasis>/*from=*/</emphasis> 0, <emphasis>/*to=*/</emphasis> vs, 
				     <emphasis>/*weights=*/</emphasis> 0, <emphasis>/*mode=*/</emphasis> IGRAPH_OUT);
  <emphasis role="strong">check_nrgeo</emphasis>(&amp;g, vs, &amp;res, &amp;nrgeo);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(&amp;res); i++) {
    <emphasis role="strong">igraph_vector_print</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong">free</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i] = 0;
  }

  <emphasis>/* Same ring, but with weights */</emphasis>

  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;weights_vec, weights, <emphasis role="strong">sizeof</emphasis>(weights)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_get_all_shortest_paths_dijkstra'>igraph_get_all_shortest_paths_dijkstra</link></emphasis>(&amp;g, <emphasis>/*res=*/</emphasis> &amp;res, 
				     <emphasis>/*nrgeo=*/</emphasis> &amp;nrgeo, <emphasis>/*from=*/</emphasis> 0, <emphasis>/*to=*/</emphasis> vs, 
				     <emphasis>/*weights=*/</emphasis> &amp;weights_vec, <emphasis>/*mode=*/</emphasis> IGRAPH_OUT);
  <emphasis role="strong">check_nrgeo</emphasis>(&amp;g, vs, &amp;res, &amp;nrgeo);
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(&amp;res); i++) {
    <emphasis role="strong">igraph_vector_print</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong">free</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i] = 0;
  }

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* More complicated example */</emphasis>

  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 10, IGRAPH_DIRECTED, 
	       0,1, 0,2, 0,3,    1,2, 1,4, 1,5,
	       2,3, 2,6,         3,2, 3,6,
	       4,5, 4,7,         5,6, 5,8, 5,9,
	       7,5, 7,8,         8,9,
	       5,2,
	       2,1,
	       -1);
  
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;weights_vec, weights2, <emphasis role="strong">sizeof</emphasis>(weights2)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_get_all_shortest_paths_dijkstra'>igraph_get_all_shortest_paths_dijkstra</link></emphasis>(&amp;g, <emphasis>/*res=*/</emphasis> &amp;res, 
				     <emphasis>/*nrgeo=*/</emphasis> &amp;nrgeo, <emphasis>/*from=*/</emphasis> 0, <emphasis>/*to=*/</emphasis> vs, 
				     <emphasis>/*weights=*/</emphasis> &amp;weights_vec, <emphasis>/*mode=*/</emphasis> IGRAPH_OUT);

  <emphasis role="strong">check_nrgeo</emphasis>(&amp;g, vs, &amp;res, &amp;nrgeo);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(&amp;res); i++) {
    <emphasis role="strong">igraph_vector_print</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong">free</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i]);
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(res)[i] = 0;
  }

  <emphasis role="strong"><link linkend='igraph_vs_destroy'>igraph_vs_destroy</link></emphasis>(&amp;vs);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Regular lattice with some heavyweight edges */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;dim_vec, dim, <emphasis role="strong">sizeof</emphasis>(dim)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_lattice'>igraph_lattice</link></emphasis>(&amp;g, &amp;dim_vec, 1, 0, 0, 0);
  <emphasis role="strong"><link linkend='igraph_vs_vector_small'>igraph_vs_vector_small</link></emphasis>(&amp;vs, 3, 12, 15, -1);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;weights_vec, 24);
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;weights_vec, 1);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(weights_vec)[2] = 100; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(weights_vec)[8] = 100; <emphasis>/* 1--&gt;2, 4--&gt;8 */</emphasis>
  <emphasis role="strong"><link linkend='igraph_get_all_shortest_paths_dijkstra'>igraph_get_all_shortest_paths_dijkstra</link></emphasis>(&amp;g, <emphasis>/*res=*/</emphasis> 0,
				     <emphasis>/*nrgeo=*/</emphasis> &amp;nrgeo, <emphasis>/*from=*/</emphasis> 0, <emphasis>/*to=*/</emphasis> vs, 
				     <emphasis>/*weights=*/</emphasis> &amp;weights_vec, <emphasis>/*mode=*/</emphasis> IGRAPH_OUT);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;weights_vec);
  <emphasis role="strong"><link linkend='igraph_vs_destroy'>igraph_vs_destroy</link></emphasis>(&amp;vs);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">printf</emphasis>("%ld ", (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(nrgeo)[3]);
  <emphasis role="strong">printf</emphasis>("%ld ", (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(nrgeo)[12]);
  <emphasis role="strong">printf</emphasis>("%ld\n", (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(nrgeo)[15]);

  <emphasis role="strong"><link linkend='igraph_vector_ptr_destroy'>igraph_vector_ptr_destroy</link></emphasis>(&amp;res);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;nrgeo);

  <emphasis role="strong">if</emphasis> (!IGRAPH_FINALLY_STACK_EMPTY) <emphasis role="strong">return</emphasis> 1;

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
