<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;stdio.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_types_internal.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  igraph_trie_t trie;
  long int id;
  int i;
  char *str;

  <emphasis>/* init */</emphasis>
  <emphasis role="strong">igraph_trie_init</emphasis>(&amp;trie, 0);

  <emphasis>/* add and get values */</emphasis>
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hello", &amp;id);  <emphasis role="strong">printf</emphasis>("hello: %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hepp", &amp;id);   <emphasis role="strong">printf</emphasis>("hepp:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "alma", &amp;id);   <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "also", &amp;id);   <emphasis role="strong">printf</emphasis>("also:  %li\n", id);

  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hello", &amp;id);  <emphasis role="strong">printf</emphasis>("hello: %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hepp", &amp;id);   <emphasis role="strong">printf</emphasis>("hepp:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "alma", &amp;id);   <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "also", &amp;id);   <emphasis role="strong">printf</emphasis>("also:  %li\n", id);

  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "a", &amp;id);      <emphasis role="strong">printf</emphasis>("a:     %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "axon", &amp;id);   <emphasis role="strong">printf</emphasis>("axon:  %li\n", id);

  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hello", &amp;id);  <emphasis role="strong">printf</emphasis>("hello: %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hepp", &amp;id);   <emphasis role="strong">printf</emphasis>("hepp:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "alma", &amp;id);   <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "also", &amp;id);   <emphasis role="strong">printf</emphasis>("also:  %li\n", id);

  <emphasis>/* check for existence */</emphasis>
  <emphasis role="strong">igraph_trie_check</emphasis>(&amp;trie, "head", &amp;id); <emphasis role="strong">printf</emphasis>("head:  %li\n", id);
  <emphasis role="strong">igraph_trie_check</emphasis>(&amp;trie, "alma", &amp;id); <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);
   
  <emphasis>/* destroy */</emphasis>
  <emphasis role="strong">igraph_trie_destroy</emphasis>(&amp;trie);

  <emphasis>/* the same with index */</emphasis>
  <emphasis role="strong">igraph_trie_init</emphasis>(&amp;trie, 1);

  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hello", &amp;id);  <emphasis role="strong">printf</emphasis>("hello: %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hepp", &amp;id);   <emphasis role="strong">printf</emphasis>("hepp:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "alma", &amp;id);   <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "also", &amp;id);   <emphasis role="strong">printf</emphasis>("also:  %li\n", id);

  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hello", &amp;id);  <emphasis role="strong">printf</emphasis>("hello: %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hepp", &amp;id);   <emphasis role="strong">printf</emphasis>("hepp:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "alma", &amp;id);   <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "also", &amp;id);   <emphasis role="strong">printf</emphasis>("also:  %li\n", id);

  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "a", &amp;id);      <emphasis role="strong">printf</emphasis>("a:     %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "axon", &amp;id);   <emphasis role="strong">printf</emphasis>("axon:  %li\n", id);

  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hello", &amp;id);  <emphasis role="strong">printf</emphasis>("hello: %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "hepp", &amp;id);   <emphasis role="strong">printf</emphasis>("hepp:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "alma", &amp;id);   <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);
  <emphasis role="strong">igraph_trie_get</emphasis>(&amp;trie, "also", &amp;id);   <emphasis role="strong">printf</emphasis>("also:  %li\n", id);

  <emphasis>/* check for existence */</emphasis>
  <emphasis role="strong">igraph_trie_check</emphasis>(&amp;trie, "head", &amp;id); <emphasis role="strong">printf</emphasis>("head:  %li\n", id);
  <emphasis role="strong">igraph_trie_check</emphasis>(&amp;trie, "alma", &amp;id); <emphasis role="strong">printf</emphasis>("alma:  %li\n", id);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_trie_size</emphasis>(&amp;trie); i++) {
    <emphasis role="strong">igraph_trie_idx</emphasis>(&amp;trie, i, &amp;str);
    <emphasis role="strong">printf</emphasis>("%d: %s\n", i, str);
  }
  <emphasis role="strong">igraph_trie_destroy</emphasis>(&amp;trie);

  <emphasis role="strong">if</emphasis> (!IGRAPH_FINALLY_STACK_EMPTY) <emphasis role="strong">return</emphasis> 1;
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
