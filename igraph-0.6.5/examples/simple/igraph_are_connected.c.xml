<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/*</emphasis>
<emphasis>  Test suite for whether two vertices are connected by an edge.</emphasis>
<emphasis>  Copyright (C) 2011 Minh Van Nguyen </emphasis>&lt;nguyenminh2@gmail.com&gt;

<emphasis>  This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>  it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>  the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>  (at your option) any later version.</emphasis>

<emphasis>  This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>  but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>  GNU General Public License for more details.</emphasis>

<emphasis>  You should have received a copy of the GNU General Public License</emphasis>
<emphasis>  along with this program; if not, write to the Free Software</emphasis>
<emphasis>  Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA</emphasis>
<emphasis>  02110-1301 USA</emphasis>
<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdio.h&gt;
<emphasis role="strong">#include</emphasis> &lt;time.h&gt;

<emphasis role="strong">#define</emphasis> <emphasis role="strong">R_INTEGER</emphasis>(a,b) (<emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), (a), (b)))

<emphasis>/* Crash the library function here. We expect error codes to be returned here.</emphasis>
<emphasis> */</emphasis>
int <emphasis role="strong">error_test</emphasis>() {
  igraph_t g;
  igraph_bool_t connected;
  igraph_integer_t nvert, u, v;
  int ret;

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), <emphasis role="strong">time</emphasis>(0));
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, <emphasis>/*nvert*/</emphasis> 0, IGRAPH_UNDIRECTED, 0,1, 1,2, 2,0, -1);
  nvert = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g);
  u = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(-100*nvert, 100*nvert);
  v = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(nvert, 100*nvert);

  <emphasis role="strong"><link linkend='igraph_set_error_handler'>igraph_set_error_handler</link></emphasis>(<link linkend='igraph_error_handler_ignore'>igraph_error_handler_ignore</link>);
  ret = <emphasis role="strong"><link linkend='igraph_are_connected'>igraph_are_connected</link></emphasis>(&amp;g, u, v, &amp;connected);
  <emphasis role="strong">if</emphasis> (ret != IGRAPH_EINVVID) {
    <emphasis role="strong">printf</emphasis>("Error test failed.\n");
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}

<emphasis>/* Testing for two vertices being connected by an edge in various graphs.</emphasis>
<emphasis> */</emphasis>
int <emphasis role="strong">connected_test</emphasis>() {
  igraph_t gcomplete, gempty;
  igraph_bool_t connected;
  igraph_integer_t nvert, u, v;

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), <emphasis role="strong">time</emphasis>(0));

  <emphasis>/* A complete graph on n vertices. Any two distinct vertices are connected */</emphasis>
  <emphasis>/* by an edge. Hence we expect the test to return true for any given pair */</emphasis>
  <emphasis>/* of distinct vertices. */</emphasis>
  nvert = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(2, 100);
  <emphasis role="strong"><link linkend='igraph_full'>igraph_full</link></emphasis>(&amp;gcomplete, nvert, IGRAPH_UNDIRECTED, IGRAPH_NO_LOOPS);
  u = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(0, nvert - 1);
  <emphasis role="strong">do</emphasis> {
    v = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(0, nvert - 1);
  } <emphasis role="strong">while</emphasis> (v == u);
  <emphasis role="strong"><link linkend='igraph_are_connected'>igraph_are_connected</link></emphasis>(&amp;gcomplete, u, v, &amp;connected);
  <emphasis role="strong">if</emphasis> (!connected) {
    <emphasis role="strong">printf</emphasis>("Expected connected = true, but received connected = false.\n");
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;gcomplete);

  <emphasis>/* A graph with n vertices, but no edges. Any two distinct vertices are */</emphasis>
  <emphasis>/* not joined by an edge. Thus we expect the test to return false for any */</emphasis>
  <emphasis>/* given pair of distinct vertices. */</emphasis>
  nvert = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(2, 100);
  <emphasis role="strong"><link linkend='igraph_empty'>igraph_empty</link></emphasis>(&amp;gempty, nvert, IGRAPH_DIRECTED);
  u = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(0, nvert - 1);
  <emphasis role="strong">do</emphasis> {
    v = (igraph_integer_t)<emphasis role="strong">R_INTEGER</emphasis>(0, nvert - 1);
  } <emphasis role="strong">while</emphasis> (v == u);
  <emphasis role="strong"><link linkend='igraph_are_connected'>igraph_are_connected</link></emphasis>(&amp;gempty, u, v, &amp;connected);
  <emphasis role="strong">if</emphasis> (connected) {
    <emphasis role="strong">printf</emphasis>("Expected connected = false, but received connected = true.\n");
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;gempty);

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}

int <emphasis role="strong">main</emphasis>() {
  int ret;

  ret = <emphasis role="strong">error_test</emphasis>();
  <emphasis role="strong">if</emphasis> (ret)
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  ret = <emphasis role="strong">connected_test</emphasis>();
  <emphasis role="strong">if</emphasis> (ret)
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}
</programlisting>
