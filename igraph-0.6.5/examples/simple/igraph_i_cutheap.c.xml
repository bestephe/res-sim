<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_types_internal.h&gt;

void <emphasis role="strong">print_vector</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link> *v, FILE *f) {
  long int i;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(v); i++) {
    <emphasis role="strong">fprintf</emphasis>(f, " %li", (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*v)[i]);
  }
  <emphasis role="strong">fprintf</emphasis>(f, "\n");
}

int <emphasis role="strong">main</emphasis>() {
  igraph_i_cutheap_t ch;
  long int i;
  
  <emphasis role="strong">igraph_i_cutheap_init</emphasis>(&amp;ch, 10);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong">igraph_i_cutheap_update</emphasis>(&amp;ch, i, i);
  }
<emphasis>/*   print_vector(&amp;ch.heap, stdout); */</emphasis>
<emphasis>/*   print_vector(&amp;ch.index, stdout); */</emphasis>
<emphasis>/*   print_vector(&amp;ch.hptr, stdout); */</emphasis>
  <emphasis role="strong">while</emphasis> (!<emphasis role="strong">igraph_i_cutheap_empty</emphasis>(&amp;ch)) {
    long int idx=<emphasis role="strong">igraph_i_cutheap_popmax</emphasis>(&amp;ch);
    <emphasis role="strong">printf</emphasis>("%li ", idx);
<emphasis>/*     print_vector(&amp;ch.heap, stdout); */</emphasis>
<emphasis>/*     print_vector(&amp;ch.index, stdout); */</emphasis>
<emphasis>/*     print_vector(&amp;ch.hptr, stdout); */</emphasis>
<emphasis>/*     printf("------------\n"); */</emphasis>
  }
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis role="strong">igraph_i_cutheap_destroy</emphasis>(&amp;ch);

  <emphasis role="strong">if</emphasis> (!IGRAPH_FINALLY_STACK_EMPTY) <emphasis role="strong">return</emphasis> 1;
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
