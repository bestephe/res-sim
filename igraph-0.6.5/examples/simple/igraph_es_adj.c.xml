<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>

<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

void <emphasis role="strong">igraph_vector_print</emphasis>(<emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link> *v) {
  long int i;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(v); i++) {
    <emphasis role="strong">printf</emphasis>("%li ", (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*v)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");
}

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t g;
  <emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link> v=IGRAPH_VECTOR_NULL;
  igraph_real_t edges1[] = { 0,1, 1,2, 2,2, 2,3, 2,4, 3,4 };
  <link linkend='igraph_vector_t'>igraph_vector_t</link> was;
  igraph_integer_t size;
  igraph_es_t it;
  long int i;
  
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;v, edges1, <emphasis role="strong">sizeof</emphasis>(edges1)/<emphasis role="strong">sizeof</emphasis>(igraph_real_t));
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;was, 0);

  <emphasis>/******************************************/</emphasis>
  <emphasis>/* Directed graph                         */</emphasis>
  <emphasis>/******************************************/</emphasis>
 
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;g, &amp;v, 0, IGRAPH_DIRECTED);
  
  <emphasis>/* Simple test, all neighbors */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;=<emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='igraph_vector_clear'>igraph_vector_clear</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_es_adj</emphasis>(&amp;g, &amp;it, i, IGRAPH_ALL);
    <emphasis role="strong"><link linkend='igraph_es_size'>igraph_es_size</link></emphasis>(&amp;g, &amp;it, &amp;size);
    <emphasis role="strong">printf</emphasis>("%ld\n", (long)size);
    <emphasis role="strong">while</emphasis> (!<emphasis role="strong">igraph_es_end</emphasis>(&amp;g, &amp;it)) {
      <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;was, <emphasis role="strong">igraph_es_adj_vertex</emphasis>(&amp;g, &amp;it));
      <emphasis role="strong">igraph_es_next</emphasis>(&amp;g, &amp;it);
    }
    <emphasis role="strong"><link linkend='igraph_es_destroy'>igraph_es_destroy</link></emphasis>(&amp;it);
    <emphasis role="strong"><link linkend='igraph_vector_sort'>igraph_vector_sort</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_vector_print</emphasis>(&amp;was);
  }

  <emphasis>/* Simple test, outgoing neighbors */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;=<emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='igraph_vector_clear'>igraph_vector_clear</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_es_adj</emphasis>(&amp;g, &amp;it, i, IGRAPH_OUT);
    <emphasis role="strong"><link linkend='igraph_es_size'>igraph_es_size</link></emphasis>(&amp;g, &amp;it, &amp;size);
    <emphasis role="strong">printf</emphasis>("%ld\n", (long)size);
    <emphasis role="strong">while</emphasis> (!<emphasis role="strong">igraph_es_end</emphasis>(&amp;g, &amp;it)) {
      <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;was, <emphasis role="strong">igraph_es_adj_vertex</emphasis>(&amp;g, &amp;it));
      <emphasis role="strong">igraph_es_next</emphasis>(&amp;g, &amp;it);
    }
    <emphasis role="strong"><link linkend='igraph_es_destroy'>igraph_es_destroy</link></emphasis>(&amp;it);
    <emphasis role="strong"><link linkend='igraph_vector_sort'>igraph_vector_sort</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_vector_print</emphasis>(&amp;was);
  }


  <emphasis>/* Simple test, incoming neighbors */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;=<emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='igraph_vector_clear'>igraph_vector_clear</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_es_adj</emphasis>(&amp;g, &amp;it, i, IGRAPH_IN);
    <emphasis role="strong"><link linkend='igraph_es_size'>igraph_es_size</link></emphasis>(&amp;g, &amp;it, &amp;size);
    <emphasis role="strong">printf</emphasis>("%ld\n", (long)size);
    <emphasis role="strong">while</emphasis> (!<emphasis role="strong">igraph_es_end</emphasis>(&amp;g, &amp;it)) {
      <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;was, <emphasis role="strong">igraph_es_adj_vertex</emphasis>(&amp;g, &amp;it));
      <emphasis role="strong">igraph_es_next</emphasis>(&amp;g, &amp;it);
    }
    <emphasis role="strong"><link linkend='igraph_es_destroy'>igraph_es_destroy</link></emphasis>(&amp;it);
    <emphasis role="strong"><link linkend='igraph_vector_sort'>igraph_vector_sort</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_vector_print</emphasis>(&amp;was);
  }
		       
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/******************************************/</emphasis>
  <emphasis>/* Undirected graph                       */</emphasis>
  <emphasis>/******************************************/</emphasis>

  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;g, &amp;v, 0, IGRAPH_UNDIRECTED);

  <emphasis>/* Simple test, all neighbors */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;=<emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;v); i++) {
    <emphasis role="strong"><link linkend='igraph_vector_clear'>igraph_vector_clear</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_es_adj</emphasis>(&amp;g, &amp;it, i, IGRAPH_ALL);
    <emphasis role="strong"><link linkend='igraph_es_size'>igraph_es_size</link></emphasis>(&amp;g, &amp;it, &amp;size);
    <emphasis role="strong">printf</emphasis>("%ld\n", (long)size);
    <emphasis role="strong">while</emphasis> (!<emphasis role="strong">igraph_es_end</emphasis>(&amp;g, &amp;it)) {
      <emphasis role="strong"><link linkend='igraph_vector_push_back'>igraph_vector_push_back</link></emphasis>(&amp;was, <emphasis role="strong">igraph_es_adj_vertex</emphasis>(&amp;g, &amp;it));
      <emphasis role="strong">igraph_es_next</emphasis>(&amp;g, &amp;it);
    }
    <emphasis role="strong"><link linkend='igraph_es_destroy'>igraph_es_destroy</link></emphasis>(&amp;it);
    <emphasis role="strong"><link linkend='igraph_vector_sort'>igraph_vector_sort</link></emphasis>(&amp;was);
    <emphasis role="strong">igraph_vector_print</emphasis>(&amp;was);
  }

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;was);
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
