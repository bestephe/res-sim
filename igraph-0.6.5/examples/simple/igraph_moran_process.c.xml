<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/*</emphasis>
<emphasis>  Test suite for the Moran process in a network setting.</emphasis>
<emphasis>  Copyright (C) 2011 Minh Van Nguyen </emphasis>&lt;nguyenminh2@gmail.com&gt;

<emphasis>  This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>  it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>  the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>  (at your option) any later version.</emphasis>

<emphasis>  This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>  but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>  GNU General Public License for more details.</emphasis>

<emphasis>  You should have received a copy of the GNU General Public License</emphasis>
<emphasis>  along with this program; if not, write to the Free Software</emphasis>
<emphasis>  Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA</emphasis>
<emphasis>  02110-1301 USA</emphasis>
<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;assert.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdio.h&gt;

<emphasis>/* test parameters structure */</emphasis>
<emphasis role="strong">typedef</emphasis> <emphasis role="strong">struct</emphasis> {
  igraph_t *graph;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> *weights;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> *quantities;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> *strategies;
  igraph_neimode_t mode;
  int retval;
} strategy_test_t;

<emphasis>/* Error tests, i.e. we expect errors to be raised for each test.</emphasis>
<emphasis> */</emphasis>
int <emphasis role="strong">error_tests</emphasis>() {
  igraph_t g, gzero, h;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> quant, quantnvert, quantzero;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> strat, stratnvert, stratzero;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> wgt, wgtnedge, wgtzero;
  int i, n, nvert, ret;
  strategy_test_t *test;

  <emphasis role="strong"><link linkend='igraph_empty'>igraph_empty</link></emphasis>(&amp;h, 0, 0);  <emphasis>/* empty graph */</emphasis>
  <emphasis>/* nonempty graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, <emphasis>/*nvert=*/</emphasis> 0, IGRAPH_UNDIRECTED, 0,1, 1,2, 2,0, -1);
  nvert = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g);
  <emphasis>/* weights vectors */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;wgt, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;wgtnedge, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g));
  <emphasis>/* quantities vectors */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;quant, 1);
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;quantnvert, nvert, 0.1, 0.2, 0.3);
  <emphasis>/* strategies vectors */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;strat, 2);
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;stratnvert, nvert, 0.0, 1.0, 2.0);

  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;gzero, <emphasis>/*nvert=*/</emphasis> 0, IGRAPH_UNDIRECTED,
               0,3, 0,4, 1,2, 1,4, 1,5, 2,3, 2,4, 3,4, -1);
  nvert = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;gzero);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;quantzero, nvert);                <emphasis>/* vector of zeros */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;stratzero, nvert);                <emphasis>/* vector of zeros */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;wgtzero, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;gzero));  <emphasis>/* vector of zeros */</emphasis>
  <emphasis>/* igraph_vector_init_real(&amp;stratzero, nvert, 1.0, 0.0, 1.0, 2.0, 0.0, 3.0); */</emphasis>

  <emphasis>/* test parameters */</emphasis>
  <emphasis>/*------graph--weights--quantities--strategies--mode--retval------*/</emphasis>
  <emphasis>/* null pointer for graph */</emphasis>
  strategy_test_t null_graph = {NULL, NULL, NULL, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* null pointer for weights vector */</emphasis>
  strategy_test_t null_wgt = {&amp;g, NULL, &amp;quantnvert, &amp;stratnvert, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* null pointer for quantities vector */</emphasis>
  strategy_test_t null_quant = {&amp;g, &amp;wgt, NULL, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* null pointer for strategies vector */</emphasis>
  strategy_test_t null_strat = {&amp;g, &amp;wgt, &amp;quant, NULL, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* empty graph */</emphasis>
  strategy_test_t empty_graph = {&amp;h, &amp;wgt, &amp;quant, &amp;strat, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* length of quantities vector different from number of vertices */</emphasis>
  strategy_test_t qdiff_length = {&amp;g, &amp;wgtnedge, &amp;quant, &amp;strat, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* length of strategies vector different from number of vertices */</emphasis>
  strategy_test_t sdiff_length = {&amp;g, &amp;wgtnedge, &amp;quantnvert, &amp;strat, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* length of weights vector different from number of edges */</emphasis>
  strategy_test_t wdiff_length = {&amp;g, &amp;wgt, &amp;quantnvert, &amp;stratnvert, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* weights vector contains all zeros */</emphasis>
  strategy_test_t zero_wgt = {&amp;g, &amp;wgtnedge, &amp;quantnvert, &amp;stratnvert, IGRAPH_ALL, IGRAPH_EINVAL};
  <emphasis>/* quantities vector contains all zeros */</emphasis>
  strategy_test_t zero_quant = {&amp;gzero, &amp;wgtzero, &amp;quantzero, &amp;stratzero, IGRAPH_ALL, IGRAPH_EINVAL};
  strategy_test_t *all_checks[] = {<emphasis>/* 1 */</emphasis>  &amp;null_graph,
                                   <emphasis>/* 2 */</emphasis>  &amp;null_quant,
                                   <emphasis>/* 3 */</emphasis>  &amp;null_strat,
                                   <emphasis>/* 4 */</emphasis>  &amp;null_wgt,
                                   <emphasis>/* 5 */</emphasis>  &amp;empty_graph,
                                   <emphasis>/* 6 */</emphasis>  &amp;qdiff_length,
                                   <emphasis>/* 7 */</emphasis>  &amp;sdiff_length,
                                   <emphasis>/* 8 */</emphasis>  &amp;wdiff_length,
                                   <emphasis>/* 9 */</emphasis>  &amp;zero_quant,
                                   <emphasis>/* 10 */</emphasis> &amp;zero_wgt};

  <emphasis>/* Run the error tests. We expect error to be raised for each test. */</emphasis>
  <emphasis role="strong"><link linkend='igraph_set_error_handler'>igraph_set_error_handler</link></emphasis>(<link linkend='igraph_error_handler_ignore'>igraph_error_handler_ignore</link>);
  n = 10;
  i = 0;
  <emphasis role="strong">while</emphasis> (i &lt; n) {
    test = all_checks[i];
    ret = <emphasis role="strong"><link linkend='igraph_moran_process'>igraph_moran_process</link></emphasis>(test-&gt;graph, test-&gt;weights, test-&gt;quantities,
                               test-&gt;strategies, test-&gt;mode);
    <emphasis role="strong">if</emphasis> (ret != test-&gt;retval) {
      <emphasis role="strong">printf</emphasis>("Error test no. %d failed.\n", (int)(i + 1));
      <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
    }
    i++;
  }
  <emphasis>/* clean up */</emphasis>
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;gzero);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;h);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quant);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quantnvert);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quantzero);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;strat);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratnvert);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratzero);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;wgt);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;wgtnedge);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;wgtzero);

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}

<emphasis>/* One iteration of the Moran process on a simple digraph.</emphasis>
<emphasis> */</emphasis>
int <emphasis role="strong">moran_one_test</emphasis>() {
  igraph_t g;
  igraph_integer_t u = -1;  <emphasis>/* vertex chosen for reproduction */</emphasis>
  igraph_integer_t v = -1;  <emphasis>/* clone of u */</emphasis>
  igraph_integer_t nedge, nvert;
  igraph_real_t q = 0.0;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> quant, quantcp;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> strat, stratcp;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> wgt;
  long int i;

  <emphasis>/* graph representing the game network; quantities and strategies vectors */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, <emphasis>/*nvert*/</emphasis> 0, IGRAPH_DIRECTED,
               0,1, 0,4, 1,2, 1,4, 2,1, 3,2, 4,0, 4,3, -1);
  nvert = <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g);
  nedge = <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g);
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;quant, nvert, 0.77, 0.83, 0.64, 0.81, 0.05);
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;strat, nvert, 2.0, 0.0, 0.0, 1.0, 2.0);
  <emphasis>/* Set the edge weights. Here we assume the following correspondence */</emphasis>
  <emphasis>/* between edge IDs and directed edges: */</emphasis>
  <emphasis>/* edge 0: 0 -&gt; 1 */</emphasis>
  <emphasis>/* edge 1: 0 -&gt; 4 */</emphasis>
  <emphasis>/* edge 2: 1 -&gt; 2 */</emphasis>
  <emphasis>/* edge 3: 1 -&gt; 4 */</emphasis>
  <emphasis>/* edge 4: 2 -&gt; 1 */</emphasis>
  <emphasis>/* edge 5: 3 -&gt; 2 */</emphasis>
  <emphasis>/* edge 6: 4 -&gt; 0 */</emphasis>
  <emphasis>/* edge 7: 4 -&gt; 3 */</emphasis>
  <emphasis role="strong">igraph_vector_init_real</emphasis>(&amp;wgt, nedge, 1.9, 0.8, 6.2, 2.4, 1.1, 5.2, 7.3, 8.8);

  <emphasis>/* play game */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_copy'>igraph_vector_copy</link></emphasis>(&amp;quantcp, &amp;quant);
  <emphasis role="strong"><link linkend='igraph_vector_copy'>igraph_vector_copy</link></emphasis>(&amp;stratcp, &amp;strat);
  <emphasis role="strong"><link linkend='igraph_moran_process'>igraph_moran_process</link></emphasis>(&amp;g, &amp;wgt, &amp;quantcp, &amp;stratcp, IGRAPH_OUT);

  <emphasis>/* Determine which vertex was chosen for death. The original quantities */</emphasis>
  <emphasis>/* vector contain unique values, i.e. no duplicates. Thus we compare the */</emphasis>
  <emphasis>/* updated quantities with the original one. */</emphasis>
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;quant); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(quant)[i] != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(quantcp)[i]) {
      <emphasis>/* found the new clone vertex */</emphasis>
      v = (igraph_integer_t)i;
      q = (igraph_real_t)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(quantcp)[i];
      <emphasis role="strong">break</emphasis>;
    }
  }
  <emphasis role="strong">assert</emphasis>(v &gt;= 0);
  <emphasis role="strong">assert</emphasis>(q != 0.0);

  <emphasis>/* Now we know that v is a clone of some vertex. Determine the vertex that */</emphasis>
  <emphasis>/* v is a clone of. */</emphasis>
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;quant); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(quant)[i] == q) {
      <emphasis>/* found the vertex chosen for reproduction */</emphasis>
      u = (igraph_integer_t)i;
      <emphasis role="strong">break</emphasis>;
    }
  }
  <emphasis role="strong">assert</emphasis>(u &gt;= 0);

  <emphasis>/* check that v is indeed a clone of u */</emphasis>
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(quant)[u] != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(quantcp)[v])
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(strat)[u] != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(stratcp)[v])
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quant);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;quantcp);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;strat);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;stratcp);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;wgt);

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}

int <emphasis role="strong">main</emphasis>() {
  int ret;

  ret = <emphasis role="strong">error_tests</emphasis>();
  <emphasis role="strong">if</emphasis> (ret)
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;
  ret = <emphasis role="strong">moran_one_test</emphasis>();
  <emphasis role="strong">if</emphasis> (ret)
    <emphasis role="strong">return</emphasis> IGRAPH_FAILURE;

  <emphasis role="strong">return</emphasis> IGRAPH_SUCCESS;
}
</programlisting>
