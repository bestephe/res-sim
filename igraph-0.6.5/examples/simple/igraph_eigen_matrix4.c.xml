<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2011-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

<emphasis role="strong">#define</emphasis> <emphasis role="strong">DUMP</emphasis>() <emphasis role="strong">do</emphasis> {				\
    <emphasis role="strong">igraph_vector_complex_print</emphasis>(&amp;values);	\
    <emphasis role="strong">igraph_vector_complex_print</emphasis>(&amp;values2);	\
  } <emphasis role="strong">while</emphasis>(0)

int <emphasis role="strong">main</emphasis>() {
  
  <emphasis role="strong">const</emphasis> int nodes=10, skip=3;
  igraph_matrix_t mat2;
  igraph_vector_complex_t values, values2;
  igraph_matrix_complex_t vectors, vectors2;
  igraph_eigen_which_t which;
  int i;

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;mat2, nodes, nodes);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;nodes; i++) {
    int j;
    <emphasis role="strong">for</emphasis> (j=0; j&lt;nodes; j++) {
      <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(mat2, i, j) = <emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 1, 10);
    }
  }

  <emphasis role="strong">igraph_vector_complex_init</emphasis>(&amp;values, 0);
  <emphasis role="strong">igraph_matrix_complex_init</emphasis>(&amp;vectors, 0, 0);
  which.pos=IGRAPH_EIGEN_LI;
  which.howmany=nodes;
  <emphasis role="strong">igraph_eigen_matrix</emphasis>(&amp;mat2, <emphasis>/*sparsemat=*/</emphasis> 0, <emphasis>/*fun=*/</emphasis> 0, nodes, 
		      <emphasis>/*extra=*/</emphasis> 0, IGRAPH_EIGEN_LAPACK, &amp;which,
		      <emphasis>/*options=*/</emphasis> 0, <emphasis>/*storage=*/</emphasis> 0, &amp;values, &amp;vectors);
  
  <emphasis role="strong">igraph_vector_complex_init</emphasis>(&amp;values2, 0);
  <emphasis role="strong">igraph_matrix_complex_init</emphasis>(&amp;vectors2, 0, 0);
  which.pos=IGRAPH_EIGEN_SI;
  which.howmany=nodes;
  <emphasis role="strong">igraph_eigen_matrix</emphasis>(&amp;mat2, <emphasis>/*sparsemat=*/</emphasis> 0, <emphasis>/*fun=*/</emphasis> 0, nodes, 
		      <emphasis>/*extra=*/</emphasis> 0, IGRAPH_EIGEN_LAPACK, &amp;which, 
		      <emphasis>/*options=*/</emphasis> 0, <emphasis>/*storage=*/</emphasis> 0, &amp;values2, &amp;vectors2);

  <emphasis role="strong">igraph_vector_complex_print</emphasis>(&amp;values);
  <emphasis role="strong">igraph_vector_complex_print</emphasis>(&amp;values2);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;nodes; i++) { 
    int j;
    igraph_real_t d=
      <emphasis role="strong">igraph_complex_abs</emphasis>(<emphasis role="strong">igraph_complex_sub</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values)[i],
					    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(values2)[nodes-i-1]));
    <emphasis role="strong">if</emphasis> (d &gt; 1e-15) { <emphasis role="strong">DUMP</emphasis>(); <emphasis role="strong">return</emphasis> 2; }
    <emphasis role="strong">for</emphasis> (j=0; j&lt;nodes; j++) { 
      igraph_real_t d=
	<emphasis role="strong">igraph_complex_abs</emphasis>(<emphasis role="strong">igraph_complex_sub</emphasis>(<emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors, j, i), 
					      <emphasis role="strong"><link linkend='MATRIX'>MATRIX</link></emphasis>(vectors2, j,
						     nodes-i-1)));
      <emphasis role="strong">if</emphasis> (d &gt; 1e-15) { <emphasis role="strong">DUMP</emphasis>(); <emphasis role="strong">return</emphasis> 3; }
    }
  }

  <emphasis role="strong">igraph_vector_complex_destroy</emphasis>(&amp;values);
  <emphasis role="strong">igraph_matrix_complex_destroy</emphasis>(&amp;vectors);
  <emphasis role="strong">igraph_vector_complex_destroy</emphasis>(&amp;values2);
  <emphasis role="strong">igraph_matrix_complex_destroy</emphasis>(&amp;vectors2);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;mat2);
  
  <emphasis role="strong">return</emphasis> 0;
}
  
  
</programlisting>
