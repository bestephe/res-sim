<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* vim:set ts=2 sw=2 sts=2 et: */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2007-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> membership, weights, initial;
  igraph_vector_bool_t fixed;
  igraph_bool_t ok;
  long int i, j;
  long int no_of_nodes;

  <emphasis>/* Zachary Karate club -- this is just a quick smoke test */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 0, IGRAPH_UNDIRECTED, 
               0,  1,  0,  2,  0,  3,  0,  4,  0,  5,
               0,  6,  0,  7,  0,  8,  0, 10,  0, 11,
               0, 12,  0, 13,  0, 17,  0, 19,  0, 21,
               0, 31,  1,  2,  1,  3,  1,  7,  1, 13,
               1, 17,  1, 19,  1, 21,  1, 30,  2,  3,
               2,  7,  2,  8,  2,  9,  2, 13,  2, 27,
               2, 28,  2, 32,  3,  7,  3, 12,  3, 13,
               4,  6,  4, 10,  5,  6,  5, 10,  5, 16,
               6, 16,  8, 30,  8, 32,  8, 33,  9, 33,
               13, 33, 14, 32, 14, 33, 15, 32, 15, 33,
               18, 32, 18, 33, 19, 33, 20, 32, 20, 33,
               22, 32, 22, 33, 23, 25, 23, 27, 23, 29,
               23, 32, 23, 33, 24, 25, 24, 27, 24, 31,
               25, 31, 26, 29, 26, 33, 27, 33, 28, 31,
               28, 33, 29, 32, 29, 33, 30, 32, 30, 33,
               31, 32, 31, 33, 32, 33,
               -1);  
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;membership, 0);
  <emphasis role="strong"><link linkend='igraph_community_label_propagation'>igraph_community_label_propagation</link></emphasis>(&amp;g, &amp;membership, 0, 0, 0, 
				     <emphasis>/*modularity=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vector_max'>igraph_vector_max</link></emphasis>(&amp;membership) &gt; 3) {
    <emphasis role="strong">printf</emphasis>("Resulting graph had more than four clusters:\n");
    <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++)
      <emphasis role="strong">printf</emphasis>("%li ", (long)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(membership)[i]);
    <emphasis role="strong">printf</emphasis>("\n");
    <emphasis role="strong">return</emphasis> 1;
  }

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
  <emphasis>/* Simple star graph to test weights */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 0, IGRAPH_UNDIRECTED, 
               0,  1,  0,  2,  0,  3,  0,  4,  0,  5,
               2,  3,  2,  4,  3,  4,  3,  5,  4,  5,  -1);
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;weights, -1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1);
  <emphasis role="strong">igraph_vector_init_int_end</emphasis>(&amp;initial, -1, 0, 0, 1, 1, 1, 1, -1);
  <emphasis role="strong">igraph_vector_bool_init</emphasis>(&amp;fixed, 6);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(fixed)[3] = 1;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(fixed)[4] = 1;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(fixed)[5] = 1;
  <emphasis role="strong"><link linkend='igraph_community_label_propagation'>igraph_community_label_propagation</link></emphasis>(&amp;g, &amp;membership, &amp;weights,
				     &amp;initial, &amp;fixed, <emphasis>/*modularity=*/</emphasis> 0);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++)
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(membership)[i] != (i &lt; 2 ? 0 : 1)) <emphasis role="strong">return</emphasis> 3;
  <emphasis role="strong"><link linkend='igraph_community_label_propagation'>igraph_community_label_propagation</link></emphasis>(&amp;g, &amp;membership, 0,
				     &amp;initial, &amp;fixed, <emphasis>/*modularity=*/</emphasis> 0);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++)
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(membership)[i] != 0) <emphasis role="strong">return</emphasis> 4;

  <emphasis>/* Check whether it works with no fixed vertices at all</emphasis>
<emphasis>   * while an initial configuration is given -- see bug</emphasis>
<emphasis>   * #570902 in Launchpad. This is a simple smoke test only. */</emphasis>
  <emphasis role="strong"><link linkend='igraph_community_label_propagation'>igraph_community_label_propagation</link></emphasis>(&amp;g, &amp;membership, &amp;weights,
				     &amp;initial, 0, <emphasis>/*modularity=*/</emphasis> 0);

  <emphasis role="strong">igraph_vector_bool_destroy</emphasis>(&amp;fixed);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;weights);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;initial);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;membership);

  <emphasis role="strong">return</emphasis> 0;
}

</programlisting>
