<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;igraph_dqueue.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  igraph_dqueue_t q;
  int i;

  <emphasis>/* igraph_dqueue_init, igraph_dqueue_destroy, igraph_dqueue_empty */</emphasis>
  <emphasis role="strong"><link linkend='igraph_dqueue_init'>igraph_dqueue_init</link></emphasis>(&amp;q, 5);
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_dqueue_empty'>igraph_dqueue_empty</link></emphasis>(&amp;q)) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong"><link linkend='igraph_dqueue_destroy'>igraph_dqueue_destroy</link></emphasis>(&amp;q);

  <emphasis>/* igraph_dqueue_push, igraph_dqueue_pop */</emphasis>
  <emphasis role="strong"><link linkend='igraph_dqueue_init'>igraph_dqueue_init</link></emphasis>(&amp;q, 4);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 1);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 2);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 3);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 4);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_pop'>igraph_dqueue_pop</link></emphasis>(&amp;q) != 1) {
    <emphasis role="strong">return</emphasis> 2;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_pop'>igraph_dqueue_pop</link></emphasis>(&amp;q) != 2) {
    <emphasis role="strong">return</emphasis> 3;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_pop'>igraph_dqueue_pop</link></emphasis>(&amp;q) != 3) {
    <emphasis role="strong">return</emphasis> 4;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_pop'>igraph_dqueue_pop</link></emphasis>(&amp;q) != 4) {
    <emphasis role="strong">return</emphasis> 5;
  }
  <emphasis role="strong"><link linkend='igraph_dqueue_destroy'>igraph_dqueue_destroy</link></emphasis>(&amp;q);

  <emphasis>/* igraph_dqueue_clear, igraph_dqueue_size */</emphasis>
  <emphasis role="strong"><link linkend='igraph_dqueue_init'>igraph_dqueue_init</link></emphasis>(&amp;q, 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_size'>igraph_dqueue_size</link></emphasis>(&amp;q) != 0) {
    <emphasis role="strong">return</emphasis> 6;
  }
  <emphasis role="strong"><link linkend='igraph_dqueue_clear'>igraph_dqueue_clear</link></emphasis>(&amp;q);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_size'>igraph_dqueue_size</link></emphasis>(&amp;q) != 0) {
    <emphasis role="strong">return</emphasis> 7;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, i);
  }
  <emphasis role="strong"><link linkend='igraph_dqueue_clear'>igraph_dqueue_clear</link></emphasis>(&amp;q);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_size'>igraph_dqueue_size</link></emphasis>(&amp;q) != 0) {
    <emphasis role="strong">return</emphasis> 8;
  }
  <emphasis role="strong"><link linkend='igraph_dqueue_destroy'>igraph_dqueue_destroy</link></emphasis>(&amp;q);

  <emphasis>/* </emphasis><emphasis role="strong">TODO:</emphasis><emphasis> igraph_dqueue_full */</emphasis>

  <emphasis>/* igraph_dqueue_head, igraph_dqueue_back, igraph_dqueue_pop_back */</emphasis>
  <emphasis role="strong"><link linkend='igraph_dqueue_init'>igraph_dqueue_init</link></emphasis>(&amp;q, 0);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, i);
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;10; i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_head'>igraph_dqueue_head</link></emphasis>(&amp;q) != 0) {
      <emphasis role="strong">return</emphasis> 9;
    }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_back'>igraph_dqueue_back</link></emphasis>(&amp;q) != 9-i) {
      <emphasis role="strong">return</emphasis> 10;
    }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_dqueue_pop_back'>igraph_dqueue_pop_back</link></emphasis>(&amp;q) != 9-i) {
      <emphasis role="strong">return</emphasis> 11;
    }
  }
  <emphasis role="strong"><link linkend='igraph_dqueue_destroy'>igraph_dqueue_destroy</link></emphasis>(&amp;q);

  <emphasis>/* print */</emphasis>
  <emphasis role="strong"><link linkend='igraph_dqueue_init'>igraph_dqueue_init</link></emphasis>(&amp;q, 4);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 1);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 2);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 3);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 4);
  <emphasis role="strong"><link linkend='igraph_dqueue_pop'>igraph_dqueue_pop</link></emphasis>(&amp;q);
  <emphasis role="strong"><link linkend='igraph_dqueue_pop'>igraph_dqueue_pop</link></emphasis>(&amp;q);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 5);
  <emphasis role="strong"><link linkend='igraph_dqueue_push'>igraph_dqueue_push</link></emphasis>(&amp;q, 6);
  <emphasis role="strong">igraph_dqueue_print</emphasis>(&amp;q);

  <emphasis role="strong"><link linkend='igraph_dqueue_clear'>igraph_dqueue_clear</link></emphasis>(&amp;q);
  <emphasis role="strong">igraph_dqueue_print</emphasis>(&amp;q);
  
  <emphasis role="strong"><link linkend='igraph_dqueue_destroy'>igraph_dqueue_destroy</link></emphasis>(&amp;q);  

  <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_FINALLY_STACK_SIZE</emphasis>() != 0) <emphasis role="strong">return</emphasis> 12;  

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
