<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2007-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">igraph_vector_between</emphasis>(<emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link>* v, <emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link>* lo,
		<emphasis role="strong">const</emphasis> <link linkend='igraph_vector_t'>igraph_vector_t</link>* hi) {
	<emphasis role="strong">return</emphasis> <emphasis role="strong"><link linkend='igraph_vector_all_le'>igraph_vector_all_le</link></emphasis>(lo, v) &amp;&amp; <emphasis role="strong"><link linkend='igraph_vector_all_ge'>igraph_vector_all_ge</link></emphasis>(hi, v);
}

void <emphasis role="strong">test_unweighted</emphasis>() {
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> edges, eb;
  long int i;
  long int no_of_edges;

  <emphasis>/* Zachary Karate club */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 0, IGRAPH_UNDIRECTED, 
	       0,  1,  0,  2,  0,  3,  0,  4,  0,  5,
	       0,  6,  0,  7,  0,  8,  0, 10,  0, 11,
	       0, 12,  0, 13,  0, 17,  0, 19,  0, 21,
	       0, 31,  1,  2,  1,  3,  1,  7,  1, 13,
	       1, 17,  1, 19,  1, 21,  1, 30,  2,  3,
	       2,  7,  2,  8,  2,  9,  2, 13,  2, 27,
	       2, 28,  2, 32,  3,  7,  3, 12,  3, 13,
	       4,  6,  4, 10,  5,  6,  5, 10,  5, 16,
	       6, 16,  8, 30,  8, 32,  8, 33,  9, 33,
	       13, 33, 14, 32, 14, 33, 15, 32, 15, 33,
	       18, 32, 18, 33, 19, 33, 20, 32, 20, 33,
	       22, 32, 22, 33, 23, 25, 23, 27, 23, 29,
	       23, 32, 23, 33, 24, 25, 24, 27, 24, 31,
	       25, 31, 26, 29, 26, 33, 27, 33, 28, 31,
	       28, 33, 29, 32, 29, 33, 30, 32, 30, 33,
	       31, 32, 31, 33, 32, 33,
	       -1);  
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;edges, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;eb, 0);
  <emphasis role="strong"><link linkend='igraph_community_edge_betweenness'>igraph_community_edge_betweenness</link></emphasis>(&amp;g, &amp;edges, &amp;eb, 0 <emphasis>/*merges */</emphasis>,
				    0 <emphasis>/*bridges */</emphasis>, <emphasis>/*modularity=*/</emphasis> 0,
				    <emphasis>/*membership=*/</emphasis> 0,
				    IGRAPH_UNDIRECTED,
				    <emphasis>/*weights=*/</emphasis> 0);
  
  no_of_edges=<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;no_of_edges; i++) {
    <emphasis role="strong">printf</emphasis>("%li ", (long int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(edges)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;no_of_edges; i++) {
    <emphasis role="strong">printf</emphasis>("%.2f ", <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(eb)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis>/* Try it once again without storage space for edges */</emphasis>
  <emphasis role="strong"><link linkend='igraph_community_edge_betweenness'>igraph_community_edge_betweenness</link></emphasis>(&amp;g, 0, &amp;eb, 0 <emphasis>/*merges */</emphasis>,
				    0 <emphasis>/*bridges */</emphasis>, <emphasis>/*modularity=*/</emphasis> 0,
				    <emphasis>/*membership=*/</emphasis> 0,
				    IGRAPH_UNDIRECTED,
				    <emphasis>/*weights=*/</emphasis> 0);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;no_of_edges; i++) {
    <emphasis role="strong">printf</emphasis>("%.2f ", <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(eb)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;eb);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;edges);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
}

<emphasis role="strong">#define</emphasis> EPS 1e-4

void <emphasis role="strong">test_weighted</emphasis>() {
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> edges, eb, weights;
  long int i;
  long int no_of_edges;
  igraph_real_t weights_array[] = { 4, 1, 3, 2, 5, 8, 6, 7 };

  igraph_real_t edges_array1[] = { 2, 3, 0, 1, 4, 7, 5, 6 };
  igraph_real_t edges_array2[] = { 2, 3, 6, 5, 0, 1, 4, 7 };
  igraph_real_t eb_array1_lo[] = { 4, 5, 3+1/3.0-EPS, 4, 2.5, 4, 1, 1 };
  igraph_real_t eb_array1_hi[] = { 4, 5, 3+1/3.0+EPS, 4, 2.5, 4, 1, 1 };
  igraph_real_t eb_array2_lo[] = { 4, 5, 3+1/3.0-EPS, 6, 1.5, 2, 1, 1 };
  igraph_real_t eb_array2_hi[] = { 4, 5, 3+1/3.0+EPS, 6, 1.5, 2, 1, 1 };

  <link linkend='igraph_vector_t'>igraph_vector_t</link> edges_sol1, edges_sol2, eb_sol1_lo, eb_sol1_hi, eb_sol2_lo, eb_sol2_hi;

  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;edges_sol1, edges_array1, 
		     <emphasis role="strong">sizeof</emphasis>(edges_array1)/<emphasis role="strong">sizeof</emphasis>(double));
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;edges_sol2, edges_array2, 
		     <emphasis role="strong">sizeof</emphasis>(edges_array2)/<emphasis role="strong">sizeof</emphasis>(double));
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;eb_sol1_lo, eb_array1_lo, <emphasis role="strong">sizeof</emphasis>(eb_array1_lo)/<emphasis role="strong">sizeof</emphasis>(double));
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;eb_sol2_lo, eb_array2_lo, <emphasis role="strong">sizeof</emphasis>(eb_array2_lo)/<emphasis role="strong">sizeof</emphasis>(double));
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;eb_sol1_hi, eb_array1_hi, <emphasis role="strong">sizeof</emphasis>(eb_array1_hi)/<emphasis role="strong">sizeof</emphasis>(double));
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;eb_sol2_hi, eb_array2_hi, <emphasis role="strong">sizeof</emphasis>(eb_array2_hi)/<emphasis role="strong">sizeof</emphasis>(double));

  <emphasis>/* Small graph as follows: A--B--C--A, A--D--E--A, B--D, C--E */</emphasis>
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 0, IGRAPH_UNDIRECTED, 
      0, 1, 0, 2, 0, 3, 0, 4, 1, 2, 1, 3, 2, 4, 3, 4, -1);
  <emphasis role="strong"><link linkend='igraph_vector_view'>igraph_vector_view</link></emphasis>(&amp;weights, weights_array, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g));

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;edges, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;eb, 0);
  <emphasis role="strong"><link linkend='igraph_community_edge_betweenness'>igraph_community_edge_betweenness</link></emphasis>(&amp;g, &amp;edges, &amp;eb, 0 <emphasis>/*merges */</emphasis>,
				    0 <emphasis>/*bridges */</emphasis>, <emphasis>/*modularity=*/</emphasis> 0,
				    <emphasis>/*membership=*/</emphasis> 0,
				    IGRAPH_UNDIRECTED,
				    &amp;weights);
  
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_vector_all_e'>igraph_vector_all_e</link></emphasis>(&amp;edges_sol1, &amp;edges) &amp;&amp; 
      !<emphasis role="strong"><link linkend='igraph_vector_all_e'>igraph_vector_all_e</link></emphasis>(&amp;edges_sol2, &amp;edges)) {
    <emphasis role="strong">printf</emphasis>("Error, edges vector was: \n");
	<emphasis role="strong">igraph_vector_print</emphasis>(&amp;edges);
    <emphasis role="strong">exit</emphasis>(2);
  }
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_vector_between</emphasis>(&amp;eb, &amp;eb_sol1_lo, &amp;eb_sol1_hi) &amp;&amp;
      !<emphasis role="strong">igraph_vector_between</emphasis>(&amp;eb, &amp;eb_sol2_lo, &amp;eb_sol2_hi)) {
    <emphasis role="strong">printf</emphasis>("Error, eb vector was: \n");
	<emphasis role="strong">igraph_vector_print</emphasis>(&amp;eb);
    <emphasis role="strong">exit</emphasis>(2);
  }

  <emphasis>/* Try it once again without storage space for edges */</emphasis>
  <emphasis role="strong"><link linkend='igraph_community_edge_betweenness'>igraph_community_edge_betweenness</link></emphasis>(&amp;g, 0, &amp;eb, 0 <emphasis>/*merges */</emphasis>,
				    0 <emphasis>/*bridges */</emphasis>, <emphasis>/*modularity=*/</emphasis> 0,
				    <emphasis>/*membership=*/</emphasis> 0,
				    IGRAPH_UNDIRECTED,
				    &amp;weights);

  <emphasis role="strong">if</emphasis> (!<emphasis role="strong">igraph_vector_between</emphasis>(&amp;eb, &amp;eb_sol1_lo, &amp;eb_sol1_hi) &amp;&amp;
      !<emphasis role="strong">igraph_vector_between</emphasis>(&amp;eb, &amp;eb_sol2_lo, &amp;eb_sol2_hi)) {
    <emphasis role="strong">printf</emphasis>("Error, eb vector was: \n");
	<emphasis role="strong">igraph_vector_print</emphasis>(&amp;eb);
    <emphasis role="strong">exit</emphasis>(2);
  }

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;eb);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;edges);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
}

int <emphasis role="strong">main</emphasis>() {
  <emphasis role="strong">test_unweighted</emphasis>();
  <emphasis role="strong">test_weighted</emphasis>();
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
