<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2010-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

<emphasis role="strong">#define</emphasis> NODES 1000
<emphasis role="strong">#define</emphasis> CLIQUE_SIZE 10
<emphasis role="strong">#define</emphasis> NO_CLIQUES 10
<emphasis role="strong">#define</emphasis> <emphasis role="strong">INT</emphasis>(a) (<emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 0, (a)))

int <emphasis role="strong">permutation</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link> *vec) {
  int i, r, tmp;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;CLIQUE_SIZE; i++) {
    r=<emphasis role="strong">INT</emphasis>(NODES-1);
    tmp=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*vec)[i];
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*vec)[i]=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*vec)[r];
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*vec)[r]=tmp;
  }
  <emphasis role="strong">return</emphasis> 0;
}

void <emphasis role="strong">print_and_destroy_cliques</emphasis>(igraph_vector_ptr_t *cliques) {
  int i;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(cliques); i++) {
    <link linkend='igraph_vector_t'>igraph_vector_t</link> *v=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*cliques)[i];
    <emphasis role="strong">igraph_vector_print</emphasis>(v);
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(v);
    <emphasis role="strong"><link linkend='igraph_free'>igraph_free</link></emphasis>(v);
  }
}

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t g, g2, cli;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> perm;
  igraph_vector_ptr_t cliques;
  int i;

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42);
  
  <emphasis>/* Create a graph that has a random component, plus a number of </emphasis>
<emphasis>     relatively small cliques */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;perm, 0, NODES-1);
  <emphasis role="strong"><link linkend='igraph_erdos_renyi_game'>igraph_erdos_renyi_game</link></emphasis>(&amp;g, IGRAPH_ERDOS_RENYI_GNM, NODES, NODES, 
        <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*loops=*/</emphasis> 0);
  <emphasis role="strong"><link linkend='igraph_full'>igraph_full</link></emphasis>(&amp;cli, CLIQUE_SIZE, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*loops=*/</emphasis> 0);

  <emphasis role="strong">for</emphasis> (i=0; i&lt;NO_CLIQUES; i++) {
    <emphasis>/* Permute vertices of g */</emphasis>
    <emphasis role="strong">permutation</emphasis>(&amp;perm);
    <emphasis role="strong"><link linkend='igraph_permute_vertices'>igraph_permute_vertices</link></emphasis>(&amp;g, &amp;g2, &amp;perm);
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
    g=g2;
    
    <emphasis>/* Add a clique */</emphasis>
    <emphasis role="strong"><link linkend='igraph_union'>igraph_union</link></emphasis>(&amp;g2, &amp;g, &amp;cli);
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
    g=g2;
  }
  <emphasis role="strong"><link linkend='igraph_simplify'>igraph_simplify</link></emphasis>(&amp;g, <emphasis>/*multiple=*/</emphasis> 1, <emphasis>/*loop=*/</emphasis> 0, <emphasis>/*edge_comb=*/</emphasis> 0);
  
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;perm);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;cli);
  
  <emphasis>/* Find the maximal cliques */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;cliques, 0);
  <emphasis role="strong"><link linkend='igraph_maximal_cliques'>igraph_maximal_cliques</link></emphasis>(&amp;g, &amp;cliques, <emphasis>/*min_size=*/</emphasis> 3,
       <emphasis>/*max_size=*/</emphasis> 0 <emphasis>/*no limit*/</emphasis>);
  
  <emphasis>/* Print and destroy them */</emphasis>

  <emphasis role="strong">print_and_destroy_cliques</emphasis>(&amp;cliques);
  
  <emphasis>/* Clean up */</emphasis>

  <emphasis role="strong"><link linkend='igraph_vector_ptr_destroy'>igraph_vector_ptr_destroy</link></emphasis>(&amp;cliques);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Build a triangle with a loop (thanks to Emmanuel Navarro) */</emphasis>

  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 3, IGRAPH_UNDIRECTED, 0, 1, 1, 2, 2, 0, 0, 0, -1);

  <emphasis>/* Find the maximal cliques */</emphasis>

  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;cliques, 0);
  <emphasis role="strong"><link linkend='igraph_maximal_cliques'>igraph_maximal_cliques</link></emphasis>(&amp;g, &amp;cliques, <emphasis>/*min_size=*/</emphasis> 3,
    <emphasis>/*max_size=*/</emphasis> 0 <emphasis>/*no limit*/</emphasis>);

  <emphasis>/* Print and destroy them */</emphasis>

  <emphasis role="strong">print_and_destroy_cliques</emphasis>(&amp;cliques);
  
  <emphasis>/* Clean up */</emphasis>

  <emphasis role="strong"><link linkend='igraph_vector_ptr_destroy'>igraph_vector_ptr_destroy</link></emphasis>(&amp;cliques);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
