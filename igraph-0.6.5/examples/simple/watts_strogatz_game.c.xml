<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph R library.</emphasis>
<emphasis>   Copyright (C) 2011-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdio.h&gt;

<emphasis role="strong">#define</emphasis> N 1000

igraph_bool_t <emphasis role="strong">has_loops</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *graph) {
  int i, n=<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(graph);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;n; i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong">IGRAPH_FROM</emphasis>(graph, i) == <emphasis role="strong">IGRAPH_TO</emphasis>(graph, i)) { <emphasis role="strong">return</emphasis> 1; }
  }
  <emphasis role="strong">return</emphasis> 0;
}

igraph_bool_t <emphasis role="strong">has_multiple</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *graph) {
  igraph_bool_t res;
  <emphasis role="strong"><link linkend='igraph_has_multiple'>igraph_has_multiple</link></emphasis>(graph, &amp;res);
  <emphasis role="strong">return</emphasis> res;
}

<emphasis role="strong">#define</emphasis> <emphasis role="strong">ERR</emphasis>() <emphasis role="strong">do</emphasis> {				\
  <emphasis role="strong">printf</emphasis>("Seed: %d\n", seed);			\
  <emphasis role="strong"><link linkend='igraph_write_graph_edgelist'>igraph_write_graph_edgelist</link></emphasis>(&amp;ws, stdout);	\
  } <emphasis role="strong">while</emphasis> (0)

<emphasis role="strong">#define</emphasis> <emphasis role="strong">SEED</emphasis>() <emphasis role="strong">do</emphasis> {							\
    seed=<emphasis role="strong"><link linkend='igraph_rng_get_integer'>igraph_rng_get_integer</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 1, 10000);		\
    <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), seed);				\
  } <emphasis role="strong">while</emphasis> (0)

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t ws;
  igraph_bool_t sim, seen_loops, seen_multiple;
  int i, seed=1305473657;

  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), seed);
  
  <emphasis>/* No loops, no multiple edges */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;N; i++) {
    <emphasis role="strong">SEED</emphasis>();
    <emphasis role="strong"><link linkend='igraph_watts_strogatz_game'>igraph_watts_strogatz_game</link></emphasis>(&amp;ws, <emphasis>/*dim=*/</emphasis> 1, <emphasis>/*size=*/</emphasis> 5, <emphasis>/*nei=*/</emphasis> 1,
			       <emphasis>/*p=*/</emphasis> 0.5, <emphasis>/*loops=*/</emphasis> 0, <emphasis>/*multiple=*/</emphasis> 0);
    <emphasis role="strong"><link linkend='igraph_is_simple'>igraph_is_simple</link></emphasis>(&amp;ws, &amp;sim); <emphasis role="strong">if</emphasis> (!sim) { <emphasis role="strong">ERR</emphasis>(); <emphasis role="strong">return</emphasis> 1; }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong">has_loops</emphasis>(&amp;ws)) { <emphasis role="strong">ERR</emphasis>(); <emphasis role="strong">return</emphasis> 1; }
    <emphasis role="strong">if</emphasis> (<emphasis role="strong">has_multiple</emphasis>(&amp;ws)) { <emphasis role="strong">ERR</emphasis>(); <emphasis role="strong">return</emphasis> 2; }
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ws);
  }

  <emphasis>/* No loops, multiple edges possible */</emphasis>
  seen_multiple=0;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;N; i++) {
    <emphasis role="strong">SEED</emphasis>();
    <emphasis role="strong"><link linkend='igraph_watts_strogatz_game'>igraph_watts_strogatz_game</link></emphasis>(&amp;ws, <emphasis>/*dim=*/</emphasis> 1, <emphasis>/*size=*/</emphasis> 5, <emphasis>/*nei=*/</emphasis> 1,
			       <emphasis>/*p=*/</emphasis> 0.5, <emphasis>/*loops=*/</emphasis> 0, <emphasis>/*multiple=*/</emphasis> 1);
    <emphasis role="strong">if</emphasis> (<emphasis role="strong">has_loops</emphasis>(&amp;ws)) { <emphasis role="strong">ERR</emphasis>(); <emphasis role="strong">return</emphasis> 3; }
    seen_multiple = seen_multiple || <emphasis role="strong">has_multiple</emphasis>(&amp;ws);
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ws);
  }  
  <emphasis>/* This might actually happen */</emphasis>
  <emphasis>/* if (!seen_multiple) { return 4; } */</emphasis>

  <emphasis>/* Loops possible, no multiple edges */</emphasis>
  seen_loops=0;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;N; i++) {
    <emphasis role="strong">SEED</emphasis>();
    <emphasis role="strong"><link linkend='igraph_watts_strogatz_game'>igraph_watts_strogatz_game</link></emphasis>(&amp;ws, <emphasis>/*dim=*/</emphasis> 1, <emphasis>/*size=*/</emphasis> 5, <emphasis>/*nei=*/</emphasis> 1,
			       <emphasis>/*p=*/</emphasis> 0.5, <emphasis>/*loops=*/</emphasis> 1, <emphasis>/*multiple=*/</emphasis> 0);
    <emphasis role="strong">if</emphasis> (<emphasis role="strong">has_multiple</emphasis>(&amp;ws)) { <emphasis role="strong">return</emphasis> 5; }
    seen_loops = seen_loops || <emphasis role="strong">has_loops</emphasis>(&amp;ws);
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ws);
  }
  <emphasis>/* This might actually happen */</emphasis>
  <emphasis>/* if (!seen_loops) { return 6; } */</emphasis>
  
  <emphasis>/* Both loops and multiple edges are possible */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;N; i++) {
    <emphasis role="strong">SEED</emphasis>();
    <emphasis role="strong"><link linkend='igraph_watts_strogatz_game'>igraph_watts_strogatz_game</link></emphasis>(&amp;ws, <emphasis>/*dim=*/</emphasis> 1, <emphasis>/*size=*/</emphasis> 5, <emphasis>/*nei=*/</emphasis> 1,
			       <emphasis>/*p=*/</emphasis> 0.5, <emphasis>/*loops=*/</emphasis> 1, <emphasis>/*multiple=*/</emphasis> 1);
    seen_loops = seen_loops || <emphasis role="strong">has_loops</emphasis>(&amp;ws);
    seen_multiple = seen_multiple || <emphasis role="strong">has_multiple</emphasis>(&amp;ws);
    <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ws);
  }
  <emphasis>/* This might actually happen */</emphasis>
  <emphasis>/* if (!seen_loops) { return 7; } */</emphasis>
  <emphasis>/* if (!seen_multiple) { return 8; }   */</emphasis>

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
