<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2010-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">print_and_destroy</emphasis>(igraph_real_t value, 
		      igraph_vector_ptr_t *partitions, 
		      igraph_vector_ptr_t *cuts) {
  long int i, n=<emphasis role="strong"><link linkend='igraph_vector_ptr_size'>igraph_vector_ptr_size</link></emphasis>(partitions);
  <emphasis role="strong">printf</emphasis>("Value: %g\n", value);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;n; i++) {
    <link linkend='igraph_vector_t'>igraph_vector_t</link> *vec=<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*partitions)[i];
    <link linkend='igraph_vector_t'>igraph_vector_t</link> *vec2=cuts ? <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*cuts)[i] : 0;
    <emphasis role="strong">printf</emphasis>("Partition: "); <emphasis role="strong">igraph_vector_print</emphasis>(vec);
    <emphasis role="strong">if</emphasis> (vec2) { <emphasis role="strong">printf</emphasis>("Cut: "); <emphasis role="strong">igraph_vector_print</emphasis>(vec2); }
    <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(vec);
    <emphasis role="strong">if</emphasis> (vec2) { <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(vec2); }
    <emphasis role="strong"><link linkend='igraph_free'>igraph_free</link></emphasis>(vec);
    <emphasis role="strong">if</emphasis> (vec2) { <emphasis role="strong"><link linkend='igraph_free'>igraph_free</link></emphasis>(vec2); }
  }  
  <emphasis role="strong"><link linkend='igraph_vector_ptr_destroy'>igraph_vector_ptr_destroy</link></emphasis>(partitions);
  <emphasis role="strong">if</emphasis> (cuts) { <emphasis role="strong"><link linkend='igraph_vector_ptr_destroy'>igraph_vector_ptr_destroy</link></emphasis>(cuts); }
  
  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {

  igraph_t g;
  igraph_vector_ptr_t partitions;
  igraph_vector_ptr_t cuts;
  igraph_real_t value;
  
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 5, IGRAPH_DIRECTED,
  	       0,1, 1,2, 2,3, 3,4,
  	       -1);
  
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;partitions, 0);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;cuts, 0);
  <emphasis role="strong"><link linkend='igraph_all_st_mincuts'>igraph_all_st_mincuts</link></emphasis>(&amp;g, &amp;value, &amp;cuts, &amp;partitions,
  			<emphasis>/*source=*/</emphasis> 0, <emphasis>/*target=*/</emphasis> 4,
  			<emphasis>/*capacity=*/</emphasis> 0);
  
  <emphasis role="strong">print_and_destroy</emphasis>(value, &amp;partitions, &amp;cuts);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* ---------------------------------------------------------------- */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 6, IGRAPH_DIRECTED, 0,1, 1,2, 1,3, 2,4, 3,4, 4,5, -1);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;partitions, 0);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;cuts, 0);
  <emphasis role="strong"><link linkend='igraph_all_st_mincuts'>igraph_all_st_mincuts</link></emphasis>(&amp;g, &amp;value, &amp;cuts, &amp;partitions,
  			<emphasis>/*source=*/</emphasis> 0, <emphasis>/*target=*/</emphasis> 5, <emphasis>/*capacity=*/</emphasis> 0);

  <emphasis role="strong">print_and_destroy</emphasis>(value, &amp;partitions, &amp;cuts);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* ---------------------------------------------------------------- */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 6, IGRAPH_DIRECTED, 0,1, 1,2, 1,3, 2,4, 3,4, 4,5, -1);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;partitions, 0);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;cuts, 0);
  <emphasis role="strong"><link linkend='igraph_all_st_mincuts'>igraph_all_st_mincuts</link></emphasis>(&amp;g, &amp;value, &amp;cuts, &amp;partitions,
  			<emphasis>/*source=*/</emphasis> 0, <emphasis>/*target=*/</emphasis> 4, <emphasis>/*capacity=*/</emphasis> 0);

  <emphasis role="strong">print_and_destroy</emphasis>(value, &amp;partitions, &amp;cuts);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* ---------------------------------------------------------------- */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_small'>igraph_small</link></emphasis>(&amp;g, 9, IGRAPH_DIRECTED, 0,1, 0,2, 1,3, 2,3,
	       1,4,4,2, 1,5,5,2, 1,6,6,2, 1,7,7,2, 1,8,8,2,
	       -1);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;partitions, 0);
  <emphasis role="strong"><link linkend='igraph_vector_ptr_init'>igraph_vector_ptr_init</link></emphasis>(&amp;cuts, 0);
  <emphasis role="strong"><link linkend='igraph_all_st_mincuts'>igraph_all_st_mincuts</link></emphasis>(&amp;g, &amp;value, &amp;cuts, &amp;partitions,
  			<emphasis>/*source=*/</emphasis> 0, <emphasis>/*target=*/</emphasis> 3, <emphasis>/*capacity=*/</emphasis> 0);

  <emphasis role="strong">print_and_destroy</emphasis>(value, &amp;partitions, &amp;cuts);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

 
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
