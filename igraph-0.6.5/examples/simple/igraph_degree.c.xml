<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

void <emphasis role="strong">print_vector</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link> *v, FILE *f) {
  long int i;
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(v); i++) {
    <emphasis role="strong">fprintf</emphasis>(f, " %li", (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(*v)[i]);
  }
  <emphasis role="strong">fprintf</emphasis>(f, "\n");
}

int <emphasis role="strong">main</emphasis>() {

  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> v, seq;
  int ret;
  igraph_integer_t mdeg, nedges;
  long int i;
  long int ndeg;

  <emphasis>/* Create graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 8);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[0]=0; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[1]=1;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[2]=1; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[3]=2;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[4]=2; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[5]=3;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[6]=2; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[7]=2;
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;g, &amp;v, 0, IGRAPH_DIRECTED);
  
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, IGRAPH_NO_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, IGRAPH_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_IN, IGRAPH_NO_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_IN, IGRAPH_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_NO_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis role="strong"><link linkend='igraph_set_error_handler'>igraph_set_error_handler</link></emphasis>(<link linkend='igraph_error_handler_ignore'>igraph_error_handler_ignore</link>);

  <emphasis>/* Consistency check of the handshaking lemma. */</emphasis>
  <emphasis>/* If d is the sum of all vertex degrees, then d = 2|E|. */</emphasis>
  ndeg = 0;
  nedges = <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g);
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    ndeg += (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i];
  }
  <emphasis role="strong">if</emphasis> (ndeg != 2*nedges) {
    <emphasis role="strong">return</emphasis> 1;
  }
  
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
  <emphasis role="strong"><link linkend='igraph_vector_resize'>igraph_vector_resize</link></emphasis>(&amp;v, 8);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[0]=0; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[1]=1;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[2]=1; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[3]=2;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[4]=2; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[5]=3;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[6]=2; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[7]=2;
  <emphasis role="strong"><link linkend='igraph_create'>igraph_create</link></emphasis>(&amp;g, &amp;v, 0, IGRAPH_UNDIRECTED);

  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, IGRAPH_NO_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, IGRAPH_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_IN, IGRAPH_NO_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_IN, IGRAPH_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);
  
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_NO_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis>/* Consistency check of the handshaking lemma. */</emphasis>
  <emphasis>/* If d is the sum of all vertex degrees, then d = 2|E|. */</emphasis>
  ndeg = 0;
  nedges = <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g);
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    ndeg += (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i];
  }
  <emphasis role="strong">if</emphasis> (ndeg != 2*nedges) {
    <emphasis role="strong">return</emphasis> 2;
  }

  <emphasis>/* Degree of the same vertex multiple times */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;seq, 3);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(seq)[0]=2; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(seq)[1]=0; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(seq)[2]=2;
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_vector'>igraph_vss_vector</link></emphasis>(&amp;seq), IGRAPH_ALL, IGRAPH_LOOPS);
  <emphasis role="strong">print_vector</emphasis>(&amp;v, stdout);

  <emphasis>/* Errors */</emphasis>
  ret=<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_vector'>igraph_vss_vector</link></emphasis>(&amp;seq), (igraph_neimode_t)0, 
		    IGRAPH_LOOPS);
  <emphasis role="strong">if</emphasis> (ret != IGRAPH_EINVMODE) {
    <emphasis role="strong">return</emphasis> 3;
  }

  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(seq)[0]=4;
  ret=<emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_vector'>igraph_vss_vector</link></emphasis>(&amp;seq), IGRAPH_ALL, IGRAPH_LOOPS);
  <emphasis role="strong">if</emphasis> (ret != IGRAPH_EINVVID) {
    <emphasis role="strong">return</emphasis> 4;
  }  

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;seq);

  <emphasis>/* Maximum degree */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;g, 10, 0 <emphasis>/*undirected*/</emphasis>, 0 <emphasis>/*undirected*/</emphasis>, 0<emphasis>/*uncircular*/</emphasis>);
  <emphasis role="strong"><link linkend='igraph_maxdegree'>igraph_maxdegree</link></emphasis>(&amp;g, &amp;mdeg, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  <emphasis role="strong">if</emphasis> (mdeg != 2) { 
    <emphasis role="strong">return</emphasis> 5;
  }
  <emphasis>/* Consistency check of the handshaking lemma. */</emphasis>
  <emphasis>/* If d is the sum of all vertex degrees, then d = 2|E|. */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  ndeg = 0;
  nedges = <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g);
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    ndeg += (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i];
  }
  <emphasis role="strong">if</emphasis> (ndeg != 2*nedges) {
    <emphasis role="strong">return</emphasis> 6;
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
  <emphasis role="strong"><link linkend='igraph_full'>igraph_full</link></emphasis>(&amp;g, 10, 0 <emphasis>/*undirected*/</emphasis>, 0<emphasis>/*no loops*/</emphasis>);
  <emphasis role="strong"><link linkend='igraph_maxdegree'>igraph_maxdegree</link></emphasis>(&amp;g, &amp;mdeg, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  <emphasis role="strong">if</emphasis> (mdeg != 9) {
    <emphasis role="strong">return</emphasis> 7;
  }
  <emphasis>/* Consistency check of the handshaking lemma. */</emphasis>
  <emphasis>/* If d is the sum of all vertex degrees, then d = 2|E|. */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  ndeg = 0;
  nedges = <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g);
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    ndeg += (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i];
  }
  <emphasis role="strong">if</emphasis> (ndeg != 2*nedges) {
    <emphasis role="strong">return</emphasis> 8;
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_star'>igraph_star</link></emphasis>(&amp;g, 10, IGRAPH_STAR_OUT, 0);
  <emphasis role="strong"><link linkend='igraph_maxdegree'>igraph_maxdegree</link></emphasis>(&amp;g, &amp;mdeg, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, IGRAPH_LOOPS);
  <emphasis role="strong">if</emphasis> (mdeg != 9) {
    <emphasis role="strong">return</emphasis> 9;
  }
  <emphasis role="strong"><link linkend='igraph_maxdegree'>igraph_maxdegree</link></emphasis>(&amp;g, &amp;mdeg, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_IN, IGRAPH_LOOPS);
  <emphasis role="strong">if</emphasis> (mdeg != 1) {
    <emphasis role="strong">return</emphasis> 10;
  }
  <emphasis role="strong"><link linkend='igraph_maxdegree'>igraph_maxdegree</link></emphasis>(&amp;g, &amp;mdeg, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  <emphasis role="strong">if</emphasis> (mdeg != 9) {
    <emphasis role="strong">return</emphasis> 11;
  }
  <emphasis>/* Consistency check of the handshaking lemma. */</emphasis>
  <emphasis>/* If d is the sum of all vertex degrees, then d = 2|E|. */</emphasis>
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_ALL, IGRAPH_LOOPS);
  ndeg = 0;
  nedges = <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g);
  <emphasis role="strong">for</emphasis> (i = 0; i &lt; <emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(&amp;v); i++) {
    ndeg += (long int) <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i];
  }
  <emphasis role="strong">if</emphasis> (ndeg != 2*nedges) {
    <emphasis role="strong">return</emphasis> 12;
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
