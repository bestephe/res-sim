<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2009-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdio.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;
<emphasis role="strong">#include</emphasis> &lt;time.h&gt;

int <emphasis role="strong">random_permutation</emphasis>(<link linkend='igraph_vector_t'>igraph_vector_t</link> *vec) {
  <emphasis>/* We just do size(vec) * 2 swaps */</emphasis>
  long int one, two, tmp, i, n=<emphasis role="strong"><link linkend='igraph_vector_size'>igraph_vector_size</link></emphasis>(vec);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;2*n; i++) {
    one= (double)<emphasis role="strong">rand</emphasis>() / RAND_MAX * n;
    two= (double)<emphasis role="strong">rand</emphasis>() / RAND_MAX * n;
    tmp=one; one=two; two=tmp;
  }
  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t ring1, ring2;
  igraph_vector_int_t color1, color2;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> perm;
  igraph_bool_t iso;
  igraph_integer_t count;
  long int i;

  <emphasis role="strong">srand</emphasis>(<emphasis role="strong">time</emphasis>(0));

  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ring1, 100, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis>1);
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;perm, 0, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;ring1)-1);
  <emphasis role="strong">random_permutation</emphasis>(&amp;perm);
  <emphasis role="strong"><link linkend='igraph_permute_vertices'>igraph_permute_vertices</link></emphasis>(&amp;ring1, &amp;ring2, &amp;perm);
  
  <emphasis>/* Without colors */</emphasis>
  <emphasis role="strong"><link linkend='igraph_isomorphic'>igraph_isomorphic</link></emphasis>(&amp;ring1, &amp;ring2, &amp;iso);
  <emphasis role="strong">if</emphasis> (!iso) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Without color failed.\n");
    <emphasis role="strong">return</emphasis> 1;
  }

  <emphasis>/* Without colors, number of isomorphisms */</emphasis>
  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, 0, 0, &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 200) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count without colors failed, expected %li, got %li.\n",
	    (long int) 200, (long int) count);
    <emphasis role="strong">return</emphasis> 2;
  }

  <emphasis>/* Everything has the same colors */</emphasis>
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color1, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;ring1));
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color2, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;ring2));
  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;ring1, &amp;ring2, &amp;color1, &amp;color2, 0, 0, &amp;iso, 0, 0, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (!iso) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Single color failed.\n");
    <emphasis role="strong">return</emphasis> 3;
  }
  
  <emphasis>/* Two colors, just counting */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color1); i+=2) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i]   = <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i] = 0;
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i+1] = <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i] = 1;
  }
  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, &amp;color1, &amp;color2, 0, 0, &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 100) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with two colors failed, expected %li, got %li.\n",
	    (long int) 100, (long int) count);
    <emphasis role="strong">return</emphasis> 4;
  }

  <emphasis>/* Separate colors for each vertex */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color1); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i]   = <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i] = i;
  }
  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, &amp;color1, &amp;color2, 0, 0, &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 1) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with separate colors failed, expected %li, got %li.\n",
	    (long int) 1, (long int) count);
    <emphasis role="strong">return</emphasis> 5;
  }

  <emphasis>/* Try a negative result */</emphasis>
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color1, 0);
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color2, 0); 
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[0]=1;
  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;ring1, &amp;ring2, &amp;color1, &amp;color2, 0, 0, &amp;iso, 0, 0, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (iso) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Negative test failed.\n");
    <emphasis role="strong">return</emphasis> 6;
  }

  <emphasis>/* Another negative, same color distribution, different topology */</emphasis>
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color1, 0);
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color2, 0); 
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[0]=1;  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[1]=1;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[0]=1;  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[2]=1;
  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;ring1, &amp;ring2, &amp;color1, &amp;color2, 0, 0, &amp;iso, 0, 0, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (iso) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Second negative test failed.\n");
    <emphasis role="strong">return</emphasis> 7;
  }  
  
  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color1);
  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color2);

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;perm);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring2);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring1);

  <emphasis>/* ---------------------------------------------------------------- */</emphasis>
  <emphasis>/* SUBGRAPH ISOMORPHISM                                             */</emphasis>
  <emphasis>/* ---------------------------------------------------------------- */</emphasis>

  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ring1, 100, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis>0);
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ring2, 80 , <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis>0);

  <emphasis>/* One color */</emphasis>
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color1, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;ring1));
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color2, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;ring2));
  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, &amp;color1, &amp;color2, 0, 0, 
				   &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 42) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with one color failed, expected %li, got %li.\n",
	    (long int) 42, (long int) count);
    <emphasis role="strong">return</emphasis> 31;
  }

  <emphasis>/* Two colors */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color1); i+=2) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i]   = 0;
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i+1] = 1;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color2); i+=2) {  
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i]   = 0;
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i+1] = 1;
  }
  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, &amp;color1, &amp;color2, 0, 0, 
				   &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 21) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with two colors failed, expected %li, got %li.\n",
	    (long int) 21, (long int) count);
    <emphasis role="strong">return</emphasis> 32;
  }

  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color1);
  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color2);

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring1);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring2);

  <emphasis>/* ---------------------------------------------------------------- */</emphasis>
  <emphasis>/* EDGE COLORING, GRAPH ISOMORPHISM                                 */</emphasis>
  <emphasis>/* ---------------------------------------------------------------- */</emphasis>

  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ring1, 100, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis> 1);
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;perm, 0, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;ring1)-1);
  <emphasis role="strong">random_permutation</emphasis>(&amp;perm);
  <emphasis role="strong"><link linkend='igraph_permute_vertices'>igraph_permute_vertices</link></emphasis>(&amp;ring1, &amp;ring2, &amp;perm);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;perm);

  <emphasis>/* Everything has the same color */</emphasis>
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color1, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;ring1));
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color2, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;ring2));
  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, &amp;color1, &amp;color2, &amp;iso, 0, 0, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (!iso) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Single edge-color failed.\n");
    <emphasis role="strong">return</emphasis> 41;
  }

  <emphasis>/* Two colors, just counting */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color1); i+=2) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i]   = <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i] = 0;
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i+1] = <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i] = 1;
  }
  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, &amp;color1, &amp;color2, &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 100) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with two edge colors failed, expected %li, got %li.\n",
	    (long int) 100, (long int) count);
    <emphasis role="strong">return</emphasis> 42;
  }

  <emphasis>/* Separate colors for each edge */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color1); i++) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i]   = <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i] = i;
  }
  <emphasis role="strong"><link linkend='igraph_count_isomorphisms_vf2'>igraph_count_isomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, &amp;color1, &amp;color2, &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 1) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with separate edge colors failed, expected %li, got %li.\n",
	    (long int) 1, (long int) count);
    <emphasis role="strong">return</emphasis> 43;
  }  

  <emphasis>/* Try a negative result */</emphasis>
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color1, 0);
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color2, 0); 
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[0]=1;
  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, &amp;color1, &amp;color2, &amp;iso, 0, 0, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (iso) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Negative edge test failed.\n");
    <emphasis role="strong">return</emphasis> 44;
  }

  <emphasis>/* Another negative, same color distribution, different topology */</emphasis>
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color1, 0);
  <emphasis role="strong">igraph_vector_int_fill</emphasis>(&amp;color2, 0); 
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[0]=1;  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[1]=1;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[0]=1;  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[2]=1;
  <emphasis role="strong"><link linkend='igraph_isomorphic_vf2'>igraph_isomorphic_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, &amp;color1, &amp;color2, &amp;iso, 0, 0, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (iso) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Second negative edge test failed.\n");
    <emphasis role="strong">return</emphasis> 45;
  }    

  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color1);
  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color2);

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring1);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring2);

  <emphasis>/* ---------------------------------------------------------------- */</emphasis>
  <emphasis>/* EDGE COLORED SUBGRAPH ISOMORPHISM                                */</emphasis>
  <emphasis>/* ---------------------------------------------------------------- */</emphasis>

  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ring1, 100, <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis>0);
  <emphasis role="strong"><link linkend='igraph_ring'>igraph_ring</link></emphasis>(&amp;ring2, 80 , <emphasis>/*directed=*/</emphasis> 0, <emphasis>/*mutual=*/</emphasis> 0, <emphasis>/*circular=*/</emphasis>0);

  <emphasis>/* One color */</emphasis>
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color1, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;ring1));
  <emphasis role="strong">igraph_vector_int_init</emphasis>(&amp;color2, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;ring2));
  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, &amp;color1, &amp;color2,
				   &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 42) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with one edge color failed, expected %li, got %li.\n",
	    (long int) 42, (long int) count);
    <emphasis role="strong">return</emphasis> 51;
  }

  <emphasis>/* Two colors */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color1)-1; i+=2) {
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i]   = 0;
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color1)[i+1] = 1;
  }
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong">igraph_vector_int_size</emphasis>(&amp;color2)-1; i+=2) {  
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i]   = 0;
    <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(color2)[i+1] = 1;
  }
  <emphasis role="strong"><link linkend='igraph_count_subisomorphisms_vf2'>igraph_count_subisomorphisms_vf2</link></emphasis>(&amp;ring1, &amp;ring2, 0, 0, &amp;color1, &amp;color2,
				   &amp;count, 0, 0, 0);
  <emphasis role="strong">if</emphasis> (count != 22) {
    <emphasis role="strong">fprintf</emphasis>(stderr, "Count with two edge colors failed, expected %li, got %li.\n",
	    (long int) 22, (long int) count);
    <emphasis role="strong">return</emphasis> 52;
  }

  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color1);
  <emphasis role="strong">igraph_vector_int_destroy</emphasis>(&amp;color2);

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring1);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;ring2);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
