<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t g;
  igraph_vs_t vertices;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> result;
  long int i;
  
  <emphasis role="strong"><link linkend='igraph_vs_seq'>igraph_vs_seq</link></emphasis>(&amp;vertices, 1, 101);
  <emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(&amp;g, 100000, <emphasis>/*power=*/</emphasis> 1, 3, 0, 0, <emphasis>/*A=*/</emphasis> 1,
		       IGRAPH_DIRECTED, IGRAPH_BARABASI_BAG, 
		       <emphasis>/*start_from=*/</emphasis> 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;result, 0);
  
  <emphasis role="strong">for</emphasis> (i=0; i&lt;1; i++) {
    <emphasis role="strong">igraph_transitivity_local_undirected2</emphasis>(&amp;g, &amp;result, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			IGRAPH_TRANSITIVITY_NAN);
  }

  <emphasis role="strong">for</emphasis> (i=0; i&lt;1; i++) {
    <emphasis role="strong">igraph_transitivity_local_undirected4</emphasis>(&amp;g, &amp;result, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(),
			IGRAPH_TRANSITIVITY_NAN);
  }
  
<emphasis>/*   for (i=0; i&lt;igraph_vector_size(&amp;result); i++) { */</emphasis>
<emphasis>/*     printf("%f ", VECTOR(result)[i]); */</emphasis>
<emphasis>/*   } */</emphasis>
<emphasis>/*   printf("\n"); */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;result);
  <emphasis role="strong"><link linkend='igraph_vs_destroy'>igraph_vs_destroy</link></emphasis>(&amp;vertices);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
