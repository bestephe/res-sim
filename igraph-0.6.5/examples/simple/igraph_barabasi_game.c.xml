<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2006-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t g;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> v, v2;
  int i, ret;
  
  <emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(&amp;g, 10, <emphasis>/*power=*/</emphasis> 1, 2, 0, 0, <emphasis>/*A=*/</emphasis> 1, 1, 
		       IGRAPH_BARABASI_BAG, <emphasis>/*start_from=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g) != 18) {
    <emphasis role="strong">return</emphasis> 1;
  }
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g) != 10) {
    <emphasis role="strong">return</emphasis> 2;
  }
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) {
    <emphasis role="strong">return</emphasis> 3;
  }

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 0);
  <emphasis role="strong"><link linkend='igraph_get_edgelist'>igraph_get_edgelist</link></emphasis>(&amp;g, &amp;v, 0);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[2*i] &lt;= <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[2*i+1]) {
      <emphasis role="strong">return</emphasis> 4;
    }
  }
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
  <emphasis>/* out degree sequence */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_resize'>igraph_vector_resize</link></emphasis>(&amp;v, 10);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[0]=0; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[1]=1;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[2]=3; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[3]=3;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[4]=4; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[5]=5;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[6]=6; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[7]=7;
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[8]=8; <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[9]=9;
  
  <emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(&amp;g, 10, <emphasis>/*power=*/</emphasis> 1, 0, &amp;v, 0, <emphasis>/*A=*/</emphasis> 1, 1, 
		       IGRAPH_BARABASI_BAG, <emphasis>/*start_from=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g) != <emphasis role="strong"><link linkend='igraph_vector_sum'>igraph_vector_sum</link></emphasis>(&amp;v)) {
    <emphasis role="strong">return</emphasis> 5;
  }
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v2, 0);
  <emphasis role="strong"><link linkend='igraph_degree'>igraph_degree</link></emphasis>(&amp;g, &amp;v2, <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), IGRAPH_OUT, 1);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[i] != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v2)[i]) {
      <emphasis role="strong">igraph_vector_print</emphasis>(&amp;v);
      <emphasis role="strong">printf</emphasis>("\n");
      <emphasis role="strong">igraph_vector_print</emphasis>(&amp;v2);
      <emphasis role="strong">return</emphasis> 6;
    }
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v2);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
  <emphasis>/* outpref, we cannot really test this quantitatively,</emphasis>
<emphasis>     would need to set random seed */</emphasis>
  <emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(&amp;g, 10, <emphasis>/*power=*/</emphasis> 1, 2, 0, 1, <emphasis>/*A=*/</emphasis> 1, 1,
		       IGRAPH_BARABASI_BAG, <emphasis>/*start_from=*/</emphasis> 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 0);
  <emphasis role="strong"><link linkend='igraph_get_edgelist'>igraph_get_edgelist</link></emphasis>(&amp;g, &amp;v, 0);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[2*i] &lt;= <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(v)[2*i+1]) {
      <emphasis role="strong">return</emphasis> 7;
    }
  }
  <emphasis role="strong">if</emphasis> (!<emphasis role="strong"><link linkend='igraph_is_directed'>igraph_is_directed</link></emphasis>(&amp;g)) {
    <emphasis role="strong">return</emphasis> 8;
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis>/* Error tests */</emphasis>
  <emphasis role="strong"><link linkend='igraph_set_error_handler'>igraph_set_error_handler</link></emphasis>(<link linkend='igraph_error_handler_ignore'>igraph_error_handler_ignore</link>);
  ret=<emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(&amp;g, -10, <emphasis>/*power=*/</emphasis> 1, 1, 0, 0, <emphasis>/*A=*/</emphasis> 1, 0, 
			   IGRAPH_BARABASI_BAG, <emphasis>/*start_from=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (ret != IGRAPH_EINVAL) {
    <emphasis role="strong">return</emphasis> 9;
  }
  ret=<emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(&amp;g, 10, <emphasis>/*power=*/</emphasis> 1, -2, 0, 0, <emphasis>/*A=*/</emphasis> 1, 0,
			   IGRAPH_BARABASI_BAG, <emphasis>/*start_from=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (ret != IGRAPH_EINVAL) {
    <emphasis role="strong">return</emphasis> 10;
  }
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;v, 9);
  ret=<emphasis role="strong"><link linkend='igraph_barabasi_game'>igraph_barabasi_game</link></emphasis>(&amp;g, 10, <emphasis>/*power=*/</emphasis> 1, 0, &amp;v, 0, <emphasis>/*A=*/</emphasis> 1, 0,
			   IGRAPH_BARABASI_BAG, <emphasis>/*start_from=*/</emphasis> 0);
  <emphasis role="strong">if</emphasis> (ret != IGRAPH_EINVAL) {
    <emphasis role="strong">return</emphasis> 11;
  }
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;v);
  
  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
