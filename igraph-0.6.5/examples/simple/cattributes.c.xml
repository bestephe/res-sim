<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2007-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard street, Cambridge, MA 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;
<emphasis role="strong">#include</emphasis> &lt;string.h&gt;
<emphasis role="strong">#include</emphasis> &lt;stdlib.h&gt;

int <emphasis role="strong">print_attributes</emphasis>(<emphasis role="strong">const</emphasis> igraph_t *g) {

  <link linkend='igraph_vector_t'>igraph_vector_t</link> gtypes, vtypes, etypes;
  igraph_strvector_t gnames, vnames, enames;
  long int i;

  <link linkend='igraph_vector_t'>igraph_vector_t</link> vec;
  igraph_strvector_t svec;
  long int j;

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;gtypes, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;vtypes, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;etypes, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;gnames, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;vnames, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;enames, 0);

  <emphasis role="strong"><link linkend='igraph_cattribute_list'>igraph_cattribute_list</link></emphasis>(g, &amp;gnames, &amp;gtypes, &amp;vnames, &amp;vtypes, 
			 &amp;enames, &amp;etypes);

  <emphasis>/* Graph attributes */</emphasis>
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;gnames); i++) {
    <emphasis role="strong">printf</emphasis>("%s=", <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(gnames, i));
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(gtypes)[i]==IGRAPH_ATTRIBUTE_NUMERIC) {
      <emphasis role="strong">igraph_real_printf</emphasis>(<emphasis role="strong"><link linkend='GAN'>GAN</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(gnames,i)));
      <emphasis role="strong">putchar</emphasis>(' ');
    } <emphasis role="strong">else</emphasis> {
      <emphasis role="strong">printf</emphasis>("\"%s\" ", <emphasis role="strong"><link linkend='GAS'>GAS</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(gnames,i)));
    }
  }
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(g); i++) {
    long int j;
    <emphasis role="strong">printf</emphasis>("Vertex %li: ", i);
    <emphasis role="strong">for</emphasis> (j=0; j&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;vnames); j++) {
      <emphasis role="strong">printf</emphasis>("%s=", <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames, j));
      <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vtypes)[j]==IGRAPH_ATTRIBUTE_NUMERIC) {
	<emphasis role="strong">igraph_real_printf</emphasis>(<emphasis role="strong"><link linkend='VAN'>VAN</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames,j), i));
	<emphasis role="strong">putchar</emphasis>(' ');
      } <emphasis role="strong">else</emphasis> {
	<emphasis role="strong">printf</emphasis>("\"%s\" ", <emphasis role="strong"><link linkend='VAS'>VAS</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames,j), i));
      }
    }
    <emphasis role="strong">printf</emphasis>("\n");
  }

  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(g); i++) {
    long int j;
    <emphasis role="strong">printf</emphasis>("Edge %li (%i-%i): ", i, (int)<emphasis role="strong">IGRAPH_FROM</emphasis>(g,i), (int)<emphasis role="strong">IGRAPH_TO</emphasis>(g,i));
    <emphasis role="strong">for</emphasis> (j=0; j&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;enames); j++) {
      <emphasis role="strong">printf</emphasis>("%s=", <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, j));
      <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(etypes)[j]==IGRAPH_ATTRIBUTE_NUMERIC) {
	<emphasis role="strong">igraph_real_printf</emphasis>(<emphasis role="strong"><link linkend='EAN'>EAN</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, j), i));
	<emphasis role="strong">putchar</emphasis>(' ');
      } <emphasis role="strong">else</emphasis> {
	<emphasis role="strong">printf</emphasis>("\"%s\" ", <emphasis role="strong"><link linkend='EAS'>EAS</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, j), i));
      }
    }
    <emphasis role="strong">printf</emphasis>("\n");
  }

  <emphasis>/* Check vector-based query functions */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;vec, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;svec, 0);
  
  <emphasis role="strong">for</emphasis> (j=0; j&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;vnames); j++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vtypes)[j]==IGRAPH_ATTRIBUTE_NUMERIC) {
      <emphasis role="strong"><link linkend='igraph_cattribute_VANV'>igraph_cattribute_VANV</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames, j), <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), &amp;vec);
      <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(g); i++) {
	igraph_real_t num=<emphasis role="strong"><link linkend='VAN'>VAN</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames, j), i);
	<emphasis role="strong">if</emphasis> (num != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &amp;&amp;
	    (!<emphasis role="strong">isnan</emphasis>(num) || !<emphasis role="strong">isnan</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i]))) {
	  <emphasis role="strong">exit</emphasis>(51);
	}
      }
    } <emphasis role="strong">else</emphasis> {
      <emphasis role="strong"><link linkend='igraph_cattribute_VASV'>igraph_cattribute_VASV</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames, j), <emphasis role="strong"><link linkend='igraph_vss_all'>igraph_vss_all</link></emphasis>(), &amp;svec);
      <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(g); i++) {
	<emphasis role="strong">const</emphasis> char *str=<emphasis role="strong"><link linkend='VAS'>VAS</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames, j), i);
	<emphasis role="strong">if</emphasis> (<emphasis role="strong">strcmp</emphasis>(str,<emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(svec, i))) {
	  <emphasis role="strong">exit</emphasis>(52);
	}
      }
    }
  }

  <emphasis role="strong">for</emphasis> (j=0; j&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;enames); j++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(etypes)[j]==IGRAPH_ATTRIBUTE_NUMERIC) {
      <emphasis role="strong"><link linkend='igraph_cattribute_EANV'>igraph_cattribute_EANV</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, j), 
			     <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID), &amp;vec);
      <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(g); i++) {
	igraph_real_t num=<emphasis role="strong"><link linkend='EAN'>EAN</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, j), i);
	<emphasis role="strong">if</emphasis> (num != <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i] &amp;&amp; 
	    (!<emphasis role="strong">isnan</emphasis>(num) || !<emphasis role="strong">isnan</emphasis>(<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vec)[i]))) {
	  <emphasis role="strong">exit</emphasis>(53);
	}
      }
    } <emphasis role="strong">else</emphasis> {
      <emphasis role="strong"><link linkend='igraph_cattribute_EASV'>igraph_cattribute_EASV</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, j), 
			     <emphasis role="strong"><link linkend='igraph_ess_all'>igraph_ess_all</link></emphasis>(IGRAPH_EDGEORDER_ID), &amp;svec);
      <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(g); i++) {
	<emphasis role="strong">const</emphasis> char *str=<emphasis role="strong"><link linkend='EAS'>EAS</link></emphasis>(g, <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, j), i);
	<emphasis role="strong">if</emphasis> (<emphasis role="strong">strcmp</emphasis>(str,<emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(svec, i))) {
	  <emphasis role="strong">exit</emphasis>(54);
	}
      }
    }
  }

  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;svec);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;vec);

  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;enames);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;vnames);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;gnames);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;etypes);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;vtypes);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;gtypes);

  <emphasis role="strong">return</emphasis> 0;
}

int <emphasis role="strong">main</emphasis>() {
  
  igraph_t g, g2;
  FILE *ifile;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> gtypes, vtypes, etypes;
  igraph_strvector_t gnames, vnames, enames;
  long int i;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> y;
  igraph_strvector_t id;
  char str[20];

  <emphasis>/* turn on attribute handling */</emphasis>
  <emphasis role="strong"><link linkend='igraph_i_set_attribute_table'>igraph_i_set_attribute_table</link></emphasis>(&amp;igraph_cattribute_table);
  
  ifile=<emphasis role="strong">fopen</emphasis>("LINKS.NET", "r");
  <emphasis role="strong">if</emphasis> (ifile==0) {
    <emphasis role="strong">return</emphasis> 10;
  }
  <emphasis role="strong"><link linkend='igraph_read_graph_pajek'>igraph_read_graph_pajek</link></emphasis>(&amp;g, ifile);
  <emphasis role="strong">fclose</emphasis>(ifile);

  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;gtypes, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;vtypes, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;etypes, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;gnames, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;vnames, 0);
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;enames, 0);
  
  <emphasis role="strong"><link linkend='igraph_cattribute_list'>igraph_cattribute_list</link></emphasis>(&amp;g, &amp;gnames, &amp;gtypes, &amp;vnames, &amp;vtypes, 
			 &amp;enames, &amp;etypes);
  
  <emphasis>/* List attribute names and types */</emphasis>
  <emphasis role="strong">printf</emphasis>("Graph attributes: ");
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;gnames); i++) {
    <emphasis role="strong">printf</emphasis>("%s (%i) ", <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(gnames, i), (int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(gtypes)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong">printf</emphasis>("Vertex attributes: ");
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;vnames); i++) {
    <emphasis role="strong">printf</emphasis>("%s (%i) ", <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(vnames, i), (int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(vtypes)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong">printf</emphasis>("Edge attributes: ");
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;enames); i++) {
    <emphasis role="strong">printf</emphasis>("%s (%i) ", <emphasis role="strong"><link linkend='STR'>STR</link></emphasis>(enames, i), (int)<emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(etypes)[i]);
  }
  <emphasis role="strong">printf</emphasis>("\n");

  <emphasis role="strong">print_attributes</emphasis>(&amp;g);

  <emphasis>/* Copying a graph */</emphasis>
  <emphasis role="strong"><link linkend='igraph_copy'>igraph_copy</link></emphasis>(&amp;g2, &amp;g);
  <emphasis role="strong">print_attributes</emphasis>(&amp;g2);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g2);
  
  <emphasis>/* Adding vertices */</emphasis>
  <emphasis role="strong"><link linkend='igraph_add_vertices'>igraph_add_vertices</link></emphasis>(&amp;g, 3, 0);
  <emphasis role="strong">print_attributes</emphasis>(&amp;g);

  <emphasis>/* Adding edges */</emphasis>
  <emphasis role="strong"><link linkend='igraph_add_edge'>igraph_add_edge</link></emphasis>(&amp;g, 1, 1);
  <emphasis role="strong"><link linkend='igraph_add_edge'>igraph_add_edge</link></emphasis>(&amp;g, 2, 5);
  <emphasis role="strong"><link linkend='igraph_add_edge'>igraph_add_edge</link></emphasis>(&amp;g, 3, 6);
  <emphasis role="strong">print_attributes</emphasis>(&amp;g);

  <emphasis>/* Deleting vertices */</emphasis>
  <emphasis role="strong"><link linkend='igraph_delete_vertices'>igraph_delete_vertices</link></emphasis>(&amp;g, <emphasis role="strong"><link linkend='igraph_vss_1'>igraph_vss_1</link></emphasis>(1));
  <emphasis role="strong"><link linkend='igraph_delete_vertices'>igraph_delete_vertices</link></emphasis>(&amp;g, <emphasis role="strong"><link linkend='igraph_vss_1'>igraph_vss_1</link></emphasis>(4));
  <emphasis role="strong">print_attributes</emphasis>(&amp;g);

  <emphasis>/* Deleting edges */</emphasis>
  <emphasis role="strong"><link linkend='igraph_delete_edges'>igraph_delete_edges</link></emphasis>(&amp;g, <emphasis role="strong"><link linkend='igraph_ess_1'>igraph_ess_1</link></emphasis>(<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g)-1));
  <emphasis role="strong"><link linkend='igraph_delete_edges'>igraph_delete_edges</link></emphasis>(&amp;g, <emphasis role="strong"><link linkend='igraph_ess_1'>igraph_ess_1</link></emphasis>(0));
  <emphasis role="strong">print_attributes</emphasis>(&amp;g);

  <emphasis>/* Set graph attributes */</emphasis>
  <emphasis role="strong"><link linkend='SETGAN'>SETGAN</link></emphasis>(&amp;g, "id", 10);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='GAN'>GAN</link></emphasis>(&amp;g, "id") != 10) {
    <emphasis role="strong">return</emphasis> 11;
  }
  <emphasis role="strong"><link linkend='SETGAS'>SETGAS</link></emphasis>(&amp;g, "name", "toy");
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">strcmp</emphasis>(<emphasis role="strong"><link linkend='GAS'>GAS</link></emphasis>(&amp;g, "name"), "toy")) {
    <emphasis role="strong">return</emphasis> 12;
  }
  
  <emphasis>/* Delete graph attributes */</emphasis>
  <emphasis role="strong"><link linkend='DELGA'>DELGA</link></emphasis>(&amp;g, "id");
  <emphasis role="strong"><link linkend='DELGA'>DELGA</link></emphasis>(&amp;g, "name");
  <emphasis role="strong"><link linkend='igraph_cattribute_list'>igraph_cattribute_list</link></emphasis>(&amp;g, &amp;gnames, 0,0,0,0,0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;gnames) != 0) {
    <emphasis role="strong">return</emphasis> 14;
  }  

  <emphasis>/* Delete vertex attributes */</emphasis>
  <emphasis role="strong"><link linkend='DELVA'>DELVA</link></emphasis>(&amp;g, "x");
  <emphasis role="strong"><link linkend='DELVA'>DELVA</link></emphasis>(&amp;g, "shape");
  <emphasis role="strong"><link linkend='DELVA'>DELVA</link></emphasis>(&amp;g, "xfact");
  <emphasis role="strong"><link linkend='DELVA'>DELVA</link></emphasis>(&amp;g, "yfact");
  <emphasis role="strong"><link linkend='igraph_cattribute_list'>igraph_cattribute_list</link></emphasis>(&amp;g, 0,0, &amp;vnames, 0,0,0);  
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;vnames) != 2) {
    <emphasis role="strong">return</emphasis> 15;
  }
  
  <emphasis>/* Delete edge attributes */</emphasis>
  <emphasis role="strong"><link linkend='igraph_cattribute_list'>igraph_cattribute_list</link></emphasis>(&amp;g, 0,0,0,0,&amp;enames,0);
  i=<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;enames);
  <emphasis role="strong"><link linkend='DELEA'>DELEA</link></emphasis>(&amp;g, "hook1");
  <emphasis role="strong"><link linkend='DELEA'>DELEA</link></emphasis>(&amp;g, "hook2"); 
  <emphasis role="strong"><link linkend='DELEA'>DELEA</link></emphasis>(&amp;g, "label");
  <emphasis role="strong"><link linkend='igraph_cattribute_list'>igraph_cattribute_list</link></emphasis>(&amp;g, 0,0,0,0,&amp;enames,0);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;enames) != i-3) {
    <emphasis role="strong">return</emphasis> 16;
  }
  
  <emphasis>/* Set vertex attributes */</emphasis>
  <emphasis role="strong"><link linkend='SETVAN'>SETVAN</link></emphasis>(&amp;g, "y", 0, -1);
  <emphasis role="strong"><link linkend='SETVAN'>SETVAN</link></emphasis>(&amp;g, "y", 1, 2.1);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VAN'>VAN</link></emphasis>(&amp;g, "y", 0) != -1 || 
      <emphasis role="strong"><link linkend='VAN'>VAN</link></emphasis>(&amp;g, "y", 1) != 2.1) {
    <emphasis role="strong">return</emphasis> 17;
  }
  <emphasis role="strong"><link linkend='SETVAS'>SETVAS</link></emphasis>(&amp;g, "id", 0, "foo");
  <emphasis role="strong"><link linkend='SETVAS'>SETVAS</link></emphasis>(&amp;g, "id", 1, "bar");
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">strcmp</emphasis>(<emphasis role="strong"><link linkend='VAS'>VAS</link></emphasis>(&amp;g, "id", 0), "foo") ||
      <emphasis role="strong">strcmp</emphasis>(<emphasis role="strong"><link linkend='VAS'>VAS</link></emphasis>(&amp;g, "id", 1), "bar")) {
    <emphasis role="strong">return</emphasis> 18;
  }

  <emphasis>/* Set edge attributes */</emphasis>
  <emphasis role="strong"><link linkend='SETEAN'>SETEAN</link></emphasis>(&amp;g, "weight", 2, 100.0);
  <emphasis role="strong"><link linkend='SETEAN'>SETEAN</link></emphasis>(&amp;g, "weight", 0, -100.1);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='EAN'>EAN</link></emphasis>(&amp;g, "weight", 2) != 100.0 ||
      <emphasis role="strong"><link linkend='EAN'>EAN</link></emphasis>(&amp;g, "weight", 0) != -100.1) {
    <emphasis role="strong">return</emphasis> 19;
  }
  <emphasis role="strong"><link linkend='SETEAS'>SETEAS</link></emphasis>(&amp;g, "color", 2, "RED");
  <emphasis role="strong"><link linkend='SETEAS'>SETEAS</link></emphasis>(&amp;g, "color", 0, "Blue");
  <emphasis role="strong">if</emphasis> (<emphasis role="strong">strcmp</emphasis>(<emphasis role="strong"><link linkend='EAS'>EAS</link></emphasis>(&amp;g, "color", 2), "RED") ||
      <emphasis role="strong">strcmp</emphasis>(<emphasis role="strong"><link linkend='EAS'>EAS</link></emphasis>(&amp;g, "color", 0), "Blue")) {
    <emphasis role="strong">return</emphasis> 20;
  }      

  <emphasis>/* Set vector attributes as vector */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;y, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g));
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;y, 1.23);
  <emphasis role="strong"><link linkend='SETVANV'>SETVANV</link></emphasis>(&amp;g, "y", &amp;y);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;y);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++) {    
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VAN'>VAN</link></emphasis>(&amp;g, "y", i) != 1.23) {
      <emphasis role="strong">return</emphasis> 21;
    }
  }
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;y, 0, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g)-1);
  <emphasis role="strong"><link linkend='SETVANV'>SETVANV</link></emphasis>(&amp;g, "foobar", &amp;y);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;y);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VAN'>VAN</link></emphasis>(&amp;g, "foobar", i) != i) {
      <emphasis role="strong">return</emphasis> 22;
    }
  }  
  
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;id, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g));
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">snprintf</emphasis>(str, <emphasis role="strong">sizeof</emphasis>(str)-1, "%li", i);
    <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;id, i, str);
  }
  <emphasis role="strong"><link linkend='SETVASV'>SETVASV</link></emphasis>(&amp;g, "foo", &amp;id);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;id);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">printf</emphasis>("%s ", <emphasis role="strong"><link linkend='VAS'>VAS</link></emphasis>(&amp;g, "foo", i));
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;id, <emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g));
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">snprintf</emphasis>(str, <emphasis role="strong">sizeof</emphasis>(str)-1, "%li", i);
    <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;id, i, str);
  }
  <emphasis role="strong"><link linkend='SETVASV'>SETVASV</link></emphasis>(&amp;g, "id", &amp;id);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;id);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_vcount'>igraph_vcount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">printf</emphasis>("%s ", <emphasis role="strong"><link linkend='VAS'>VAS</link></emphasis>(&amp;g, "id", i));
  }
  <emphasis role="strong">printf</emphasis>("\n");  
  
  <emphasis>/* Set edge attributes as vector */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;y, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g));
  <emphasis role="strong"><link linkend='igraph_vector_fill'>igraph_vector_fill</link></emphasis>(&amp;y, 12.3);
  <emphasis role="strong"><link linkend='SETEANV'>SETEANV</link></emphasis>(&amp;g, "weight", &amp;y);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;y);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {    
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='EAN'>EAN</link></emphasis>(&amp;g, "weight", i) != 12.3) {
      <emphasis role="strong">return</emphasis> 23;
    }
  }
  <emphasis role="strong"><link linkend='igraph_vector_init_seq'>igraph_vector_init_seq</link></emphasis>(&amp;y, 0, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g)-1);
  <emphasis role="strong"><link linkend='SETEANV'>SETEANV</link></emphasis>(&amp;g, "foobar", &amp;y);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;y);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='VAN'>VAN</link></emphasis>(&amp;g, "foobar", i) != i) {
      <emphasis role="strong">return</emphasis> 24;
    }
  }  
  
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;id, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g));
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">snprintf</emphasis>(str, <emphasis role="strong">sizeof</emphasis>(str)-1, "%li", i);
    <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;id, i, str);
  }
  <emphasis role="strong"><link linkend='SETEASV'>SETEASV</link></emphasis>(&amp;g, "foo", &amp;id);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;id);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">printf</emphasis>("%s ", <emphasis role="strong"><link linkend='EAS'>EAS</link></emphasis>(&amp;g, "foo", i));
  }
  <emphasis role="strong">printf</emphasis>("\n");
  <emphasis role="strong"><link linkend='igraph_strvector_init'>igraph_strvector_init</link></emphasis>(&amp;id, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g));
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">snprintf</emphasis>(str, <emphasis role="strong">sizeof</emphasis>(str)-1, "%li", i);
    <emphasis role="strong"><link linkend='igraph_strvector_set'>igraph_strvector_set</link></emphasis>(&amp;id, i, str);
  }
  <emphasis role="strong"><link linkend='SETEASV'>SETEASV</link></emphasis>(&amp;g, "color", &amp;id);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;id);
  <emphasis role="strong">for</emphasis> (i=0; i&lt;<emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g); i++) {
    <emphasis role="strong">printf</emphasis>("%s ", <emphasis role="strong"><link linkend='EAS'>EAS</link></emphasis>(&amp;g, "color", i));
  }
  <emphasis role="strong">printf</emphasis>("\n");    

  <emphasis>/* Delete all remaining attributes */</emphasis>
  <emphasis role="strong"><link linkend='DELALL'>DELALL</link></emphasis>(&amp;g);
  <emphasis role="strong"><link linkend='igraph_cattribute_list'>igraph_cattribute_list</link></emphasis>(&amp;g, &amp;gnames, &amp;gtypes, &amp;vnames, &amp;vtypes, &amp;enames, &amp;etypes);
  <emphasis role="strong">if</emphasis> (<emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;gnames) != 0 ||
      <emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;vnames) != 0 ||
      <emphasis role="strong"><link linkend='igraph_strvector_size'>igraph_strvector_size</link></emphasis>(&amp;enames) != 0) {
    <emphasis role="strong">return</emphasis> 25;
  }

  <emphasis>/* Destroy */</emphasis>
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;gtypes);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;vtypes);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;etypes);  
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;gnames);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;vnames);
  <emphasis role="strong"><link linkend='igraph_strvector_destroy'>igraph_strvector_destroy</link></emphasis>(&amp;enames);

  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);

  <emphasis role="strong">return</emphasis> 0;
}
</programlisting>
