<programlisting linenumbering="numbered"><emphasis>/* -*- mode: C -*-  */</emphasis>
<emphasis>/* </emphasis>
<emphasis>   IGraph library.</emphasis>
<emphasis>   Copyright (C) 2011-2012  Gabor Csardi </emphasis>&lt;csardi.gabor@gmail.com&gt;
<emphasis>   334 Harvard st, Cambridge MA, 02139 USA</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is free software; you can redistribute it and/or modify</emphasis>
<emphasis>   it under the terms of the GNU General Public License as published by</emphasis>
<emphasis>   the Free Software Foundation; either version 2 of the License, or</emphasis>
<emphasis>   (at your option) any later version.</emphasis>
<emphasis>   </emphasis>
<emphasis>   This program is distributed in the hope that it will be useful,</emphasis>
<emphasis>   but WITHOUT ANY WARRANTY; without even the implied warranty of</emphasis>
<emphasis>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</emphasis>
<emphasis>   GNU General Public License for more details.</emphasis>
<emphasis>   </emphasis>
<emphasis>   You should have received a copy of the GNU General Public License</emphasis>
<emphasis>   along with this program; if not, write to the Free Software</emphasis>
<emphasis>   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA </emphasis>
<emphasis>   02110-1301 USA</emphasis>

<emphasis>*/</emphasis>

<emphasis role="strong">#include</emphasis> &lt;igraph.h&gt;

int <emphasis role="strong">main</emphasis>() {

  <emphasis role="strong">const</emphasis> int nodes=10;
  igraph_t g;
  igraph_matrix_t V, V3;
  igraph_matrix_complex_t V2;
  igraph_sparsemat_t stochastic, stochasticT;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> groups;
  igraph_eigen_which_t which;
  <link linkend='igraph_vector_t'>igraph_vector_t</link> p, selcol;

  <emphasis role="strong"><link linkend='igraph_tree'>igraph_tree</link></emphasis>(&amp;g, nodes, <emphasis>/* children= */</emphasis> 3, IGRAPH_TREE_UNDIRECTED);

  <emphasis role="strong"><link linkend='igraph_sparsemat_init'>igraph_sparsemat_init</link></emphasis>(&amp;stochastic, nodes, nodes, <emphasis role="strong"><link linkend='igraph_ecount'>igraph_ecount</link></emphasis>(&amp;g)*2);
  <emphasis role="strong">igraph_matrix_complex_init</emphasis>(&amp;V2, 0, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;V, 0, 0);
  <emphasis role="strong"><link linkend='igraph_matrix_init'>igraph_matrix_init</link></emphasis>(&amp;V3, 0, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;groups, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;p, 0);
  <emphasis role="strong"><link linkend='igraph_vector_init'>igraph_vector_init</link></emphasis>(&amp;selcol, 1);  
  
  <emphasis role="strong"><link linkend='igraph_rng_seed'>igraph_rng_seed</link></emphasis>(<emphasis role="strong"><link linkend='igraph_rng_default'>igraph_rng_default</link></emphasis>(), 42);

  <emphasis role="strong"><link linkend='igraph_get_stochastic_sparsemat'>igraph_get_stochastic_sparsemat</link></emphasis>(&amp;g, &amp;stochastic, <emphasis>/*column-wise=*/</emphasis> 0);
  <emphasis role="strong"><link linkend='igraph_sparsemat_transpose'>igraph_sparsemat_transpose</link></emphasis>(&amp;stochastic, &amp;stochasticT, <emphasis>/*values=*/</emphasis> 1);

  which.pos=IGRAPH_EIGEN_LR;
  which.howmany=1;

  <emphasis role="strong">igraph_eigen_matrix</emphasis>(<emphasis>/*matrix=*/</emphasis> 0, &amp;stochasticT, <emphasis>/*fun=*/</emphasis> 0, nodes,
		      <emphasis>/*extra=*/</emphasis> 0, <emphasis>/*1algorithm=*/</emphasis> IGRAPH_EIGEN_LAPACK,
		      &amp;which, <emphasis>/*options=*/</emphasis> 0, <emphasis>/*storage=*/</emphasis> 0, 
		      <emphasis>/*values=*/</emphasis> 0, &amp;V2);
  <emphasis role="strong">igraph_matrix_complex_real</emphasis>(&amp;V2, &amp;V);

  <emphasis>/* `p' is always the eigenvector corresponding to the 1-eigenvalue */</emphasis>
  <emphasis role="strong"><link linkend='igraph_matrix_get_col'>igraph_matrix_get_col</link></emphasis>(&amp;V, &amp;p, 0);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;p);

  which.howmany=3;
  <emphasis role="strong">igraph_eigen_matrix</emphasis>(<emphasis>/*matrix=*/</emphasis> 0, &amp;stochastic, <emphasis>/*fun=*/</emphasis> 0, nodes,
		      <emphasis>/*extra=*/</emphasis> 0, <emphasis>/*algorithm=*/</emphasis> IGRAPH_EIGEN_LAPACK,
		      &amp;which, <emphasis>/*options=*/</emphasis> 0, <emphasis>/*storage=*/</emphasis> 0, 
		      <emphasis>/*values=*/</emphasis> 0, &amp;V2);
  <emphasis role="strong">igraph_matrix_complex_real</emphasis>(&amp;V2, &amp;V3);
  <emphasis role="strong"><link linkend='VECTOR'>VECTOR</link></emphasis>(selcol)[0]=2;
  <emphasis role="strong"><link linkend='igraph_matrix_select_cols'>igraph_matrix_select_cols</link></emphasis>(&amp;V3, &amp;V, &amp;selcol);

  <emphasis>/* ------------ */</emphasis>
  
  <emphasis role="strong"><link linkend='igraph_scg_grouping'>igraph_scg_grouping</link></emphasis>(&amp;V, &amp;groups, <emphasis>/*intervals=*/</emphasis> 3, 
		      <emphasis>/*intervals_vector=*/</emphasis> 0, IGRAPH_SCG_STOCHASTIC,
		      IGRAPH_SCG_OPTIMUM, &amp;p, <emphasis>/*maxiter=*/</emphasis> 10000);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;groups);

  <emphasis>/* ------------ */</emphasis>

  <emphasis role="strong"><link linkend='igraph_scg_grouping'>igraph_scg_grouping</link></emphasis>(&amp;V, &amp;groups, <emphasis>/*intervals=*/</emphasis> 3, 
		      <emphasis>/*intervals_vector=*/</emphasis> 0, IGRAPH_SCG_STOCHASTIC,
		      IGRAPH_SCG_INTERV_KM, &amp;p, <emphasis>/*maxiter=*/</emphasis> 10000);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;groups);

  <emphasis>/* ------------ */</emphasis>

  <emphasis role="strong"><link linkend='igraph_scg_grouping'>igraph_scg_grouping</link></emphasis>(&amp;V, &amp;groups, <emphasis>/*intervals=*/</emphasis> 3, 
		      <emphasis>/*intervals_vector=*/</emphasis> 0, IGRAPH_SCG_STOCHASTIC,
		      IGRAPH_SCG_INTERV, &amp;p, <emphasis>/*maxiter=*/</emphasis> 10000);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;groups);

  <emphasis>/* ------------ */</emphasis>

  <emphasis role="strong"><link linkend='igraph_scg_grouping'>igraph_scg_grouping</link></emphasis>(&amp;V, &amp;groups, <emphasis>/*(ignored) intervals=*/</emphasis> 0, 
		      <emphasis>/*intervals_vector=*/</emphasis> 0, IGRAPH_SCG_STOCHASTIC,
		      IGRAPH_SCG_EXACT, &amp;p, <emphasis>/*maxiter=*/</emphasis> 10000);
  <emphasis role="strong">igraph_vector_print</emphasis>(&amp;groups);

  <emphasis>/* ------------ */</emphasis>  

  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;p);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;selcol);
  <emphasis role="strong"><link linkend='igraph_vector_destroy'>igraph_vector_destroy</link></emphasis>(&amp;groups);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;V);
  <emphasis role="strong"><link linkend='igraph_matrix_destroy'>igraph_matrix_destroy</link></emphasis>(&amp;V3);
  <emphasis role="strong">igraph_matrix_complex_destroy</emphasis>(&amp;V2);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;stochasticT);
  <emphasis role="strong"><link linkend='igraph_sparsemat_destroy'>igraph_sparsemat_destroy</link></emphasis>(&amp;stochastic);
  <emphasis role="strong"><link linkend='igraph_destroy'>igraph_destroy</link></emphasis>(&amp;g);
  
<emphasis role="strong">#ifdef</emphasis> __APPLE__
  <emphasis role="strong">return</emphasis> 0;
<emphasis role="strong">#else</emphasis>
  <emphasis role="strong">return</emphasis> 77;
<emphasis role="strong">#endif</emphasis>
}
    
</programlisting>
